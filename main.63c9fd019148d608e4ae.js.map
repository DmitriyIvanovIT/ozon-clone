{"version":3,"file":"main.63c9fd019148d608e4ae.js","mappings":"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","sources":["webpack://ozon-clone/webpack/runtime/global","webpack://ozon-clone/./src/modules/modalCart/index.ts","webpack://ozon-clone/./node_modules/@firebase/util/dist/index.esm2017.js","webpack://ozon-clone/./node_modules/@firebase/component/dist/esm/index.esm2017.js","webpack://ozon-clone/./node_modules/@firebase/logger/dist/esm/index.esm2017.js","webpack://ozon-clone/./node_modules/@firebase/app/dist/esm/index.esm2017.js","webpack://ozon-clone/./node_modules/firebase/app/dist/index.esm.js","webpack://ozon-clone/./node_modules/@firebase/database/dist/index.esm2017.js","webpack://ozon-clone/./src/lib/firebaseConfig.ts","webpack://ozon-clone/./src/lib/firebase.ts","webpack://ozon-clone/./src/index.ts","webpack://ozon-clone/./src/lib/services.ts"],"sourcesContent":["__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","const openModal = (selector: HTMLElement): void => {\n  selector.classList.add('active');\n};\n\nconst closeModal = (selector: HTMLElement): void => {\n  selector.classList.remove('active');\n};\n\nconst modalCart = (): void => {\n  const cartBtn = document.getElementById('cart') as HTMLElement,\n    cartModal = document.querySelector('.cart') as HTMLElement;\n\n  cartBtn.addEventListener('click', () => openModal(cartModal));\n  cartModal.addEventListener('click', (e) => {\n    const target = e.target as HTMLElement;\n\n    if (target.classList.contains('cart') || target.classList.contains('cart-close')) {\n      closeModal(cartModal);\n    }\n  })\n};\n\nexport default modalCart;\n","/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\r\n */\r\nconst CONSTANTS = {\r\n    /**\r\n     * @define {boolean} Whether this is the client Node.js SDK.\r\n     */\r\n    NODE_CLIENT: false,\r\n    /**\r\n     * @define {boolean} Whether this is the Admin Node.js SDK.\r\n     */\r\n    NODE_ADMIN: false,\r\n    /**\r\n     * Firebase SDK Version\r\n     */\r\n    SDK_VERSION: '${JSCORE_VERSION}'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws an error if the provided assertion is falsy\r\n */\r\nconst assert = function (assertion, message) {\r\n    if (!assertion) {\r\n        throw assertionError(message);\r\n    }\r\n};\r\n/**\r\n * Returns an Error object suitable for throwing.\r\n */\r\nconst assertionError = function (message) {\r\n    return new Error('Firebase Database (' +\r\n        CONSTANTS.SDK_VERSION +\r\n        ') INTERNAL ASSERT FAILED: ' +\r\n        message);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst stringToByteArray$1 = function (str) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if ((c & 0xfc00) === 0xd800 &&\r\n            i + 1 < str.length &&\r\n            (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\r\n            // Surrogate Pair\r\n            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Turns an array of numbers into the string given by the concatenation of the\r\n * characters to which the numbers correspond.\r\n * @param bytes Array of numbers representing characters.\r\n * @return Stringification of the array.\r\n */\r\nconst byteArrayToString = function (bytes) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let pos = 0, c = 0;\r\n    while (pos < bytes.length) {\r\n        const c1 = bytes[pos++];\r\n        if (c1 < 128) {\r\n            out[c++] = String.fromCharCode(c1);\r\n        }\r\n        else if (c1 > 191 && c1 < 224) {\r\n            const c2 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\r\n        }\r\n        else if (c1 > 239 && c1 < 365) {\r\n            // Surrogate Pair\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            const c4 = bytes[pos++];\r\n            const u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\r\n                0x10000;\r\n            out[c++] = String.fromCharCode(0xd800 + (u >> 10));\r\n            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\r\n        }\r\n        else {\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n        }\r\n    }\r\n    return out.join('');\r\n};\r\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\r\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\r\n// Static lookup maps, lazily populated by init_()\r\nconst base64 = {\r\n    /**\r\n     * Maps bytes to characters.\r\n     */\r\n    byteToCharMap_: null,\r\n    /**\r\n     * Maps characters to bytes.\r\n     */\r\n    charToByteMap_: null,\r\n    /**\r\n     * Maps bytes to websafe characters.\r\n     * @private\r\n     */\r\n    byteToCharMapWebSafe_: null,\r\n    /**\r\n     * Maps websafe characters to bytes.\r\n     * @private\r\n     */\r\n    charToByteMapWebSafe_: null,\r\n    /**\r\n     * Our default alphabet, shared between\r\n     * ENCODED_VALS and ENCODED_VALS_WEBSAFE\r\n     */\r\n    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\r\n    /**\r\n     * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\r\n     */\r\n    get ENCODED_VALS() {\r\n        return this.ENCODED_VALS_BASE + '+/=';\r\n    },\r\n    /**\r\n     * Our websafe alphabet.\r\n     */\r\n    get ENCODED_VALS_WEBSAFE() {\r\n        return this.ENCODED_VALS_BASE + '-_.';\r\n    },\r\n    /**\r\n     * Whether this browser supports the atob and btoa functions. This extension\r\n     * started at Mozilla but is now implemented by many browsers. We use the\r\n     * ASSUME_* variables to avoid pulling in the full useragent detection library\r\n     * but still allowing the standard per-browser compilations.\r\n     *\r\n     */\r\n    HAS_NATIVE_SUPPORT: typeof atob === 'function',\r\n    /**\r\n     * Base64-encode an array of bytes.\r\n     *\r\n     * @param input An array of bytes (numbers with\r\n     *     value in [0, 255]) to encode.\r\n     * @param webSafe Boolean indicating we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeByteArray(input, webSafe) {\r\n        if (!Array.isArray(input)) {\r\n            throw Error('encodeByteArray takes an array as a parameter');\r\n        }\r\n        this.init_();\r\n        const byteToCharMap = webSafe\r\n            ? this.byteToCharMapWebSafe_\r\n            : this.byteToCharMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length; i += 3) {\r\n            const byte1 = input[i];\r\n            const haveByte2 = i + 1 < input.length;\r\n            const byte2 = haveByte2 ? input[i + 1] : 0;\r\n            const haveByte3 = i + 2 < input.length;\r\n            const byte3 = haveByte3 ? input[i + 2] : 0;\r\n            const outByte1 = byte1 >> 2;\r\n            const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\r\n            let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\r\n            let outByte4 = byte3 & 0x3f;\r\n            if (!haveByte3) {\r\n                outByte4 = 64;\r\n                if (!haveByte2) {\r\n                    outByte3 = 64;\r\n                }\r\n            }\r\n            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);\r\n        }\r\n        return output.join('');\r\n    },\r\n    /**\r\n     * Base64-encode a string.\r\n     *\r\n     * @param input A string to encode.\r\n     * @param webSafe If true, we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return btoa(input);\r\n        }\r\n        return this.encodeByteArray(stringToByteArray$1(input), webSafe);\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * @param input to decode.\r\n     * @param webSafe True if we should use the\r\n     *     alternative alphabet.\r\n     * @return string representing the decoded value.\r\n     */\r\n    decodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return atob(input);\r\n        }\r\n        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * In base-64 decoding, groups of four characters are converted into three\r\n     * bytes.  If the encoder did not apply padding, the input length may not\r\n     * be a multiple of 4.\r\n     *\r\n     * In this case, the last group will have fewer than 4 characters, and\r\n     * padding will be inferred.  If the group has one or two characters, it decodes\r\n     * to one byte.  If the group has three characters, it decodes to two bytes.\r\n     *\r\n     * @param input Input to decode.\r\n     * @param webSafe True if we should use the web-safe alphabet.\r\n     * @return bytes representing the decoded value.\r\n     */\r\n    decodeStringToByteArray(input, webSafe) {\r\n        this.init_();\r\n        const charToByteMap = webSafe\r\n            ? this.charToByteMapWebSafe_\r\n            : this.charToByteMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length;) {\r\n            const byte1 = charToByteMap[input.charAt(i++)];\r\n            const haveByte2 = i < input.length;\r\n            const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\r\n            ++i;\r\n            const haveByte3 = i < input.length;\r\n            const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            const haveByte4 = i < input.length;\r\n            const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\r\n                throw Error();\r\n            }\r\n            const outByte1 = (byte1 << 2) | (byte2 >> 4);\r\n            output.push(outByte1);\r\n            if (byte3 !== 64) {\r\n                const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\r\n                output.push(outByte2);\r\n                if (byte4 !== 64) {\r\n                    const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\r\n                    output.push(outByte3);\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    },\r\n    /**\r\n     * Lazy static initialization function. Called before\r\n     * accessing any of the static map variables.\r\n     * @private\r\n     */\r\n    init_() {\r\n        if (!this.byteToCharMap_) {\r\n            this.byteToCharMap_ = {};\r\n            this.charToByteMap_ = {};\r\n            this.byteToCharMapWebSafe_ = {};\r\n            this.charToByteMapWebSafe_ = {};\r\n            // We want quick mappings back and forth, so we precompute two maps.\r\n            for (let i = 0; i < this.ENCODED_VALS.length; i++) {\r\n                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\r\n                this.charToByteMap_[this.byteToCharMap_[i]] = i;\r\n                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\r\n                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\r\n                // Be forgiving when decoding and correctly decode both encodings.\r\n                if (i >= this.ENCODED_VALS_BASE.length) {\r\n                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\r\n                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n/**\r\n * URL-safe base64 encoding\r\n */\r\nconst base64Encode = function (str) {\r\n    const utf8Bytes = stringToByteArray$1(str);\r\n    return base64.encodeByteArray(utf8Bytes, true);\r\n};\r\n/**\r\n * URL-safe base64 encoding (without \".\" padding in the end).\r\n * e.g. Used in JSON Web Token (JWT) parts.\r\n */\r\nconst base64urlEncodeWithoutPadding = function (str) {\r\n    // Use base64url encoding and remove padding in the end (dot characters).\r\n    return base64Encode(str).replace(/\\./g, '');\r\n};\r\n/**\r\n * URL-safe base64 decoding\r\n *\r\n * NOTE: DO NOT use the global atob() function - it does NOT support the\r\n * base64Url variant encoding.\r\n *\r\n * @param str To be decoded\r\n * @return Decoded result, if possible\r\n */\r\nconst base64Decode = function (str) {\r\n    try {\r\n        return base64.decodeString(str, true);\r\n    }\r\n    catch (e) {\r\n        console.error('base64Decode failed: ', e);\r\n    }\r\n    return null;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Do a deep-copy of basic JavaScript Objects or Arrays.\r\n */\r\nfunction deepCopy(value) {\r\n    return deepExtend(undefined, value);\r\n}\r\n/**\r\n * Copy properties from source to target (recursively allows extension\r\n * of Objects and Arrays).  Scalar values in the target are over-written.\r\n * If target is undefined, an object of the appropriate type will be created\r\n * (and returned).\r\n *\r\n * We recursively copy all child properties of plain Objects in the source- so\r\n * that namespace- like dictionaries are merged.\r\n *\r\n * Note that the target can be a function, in which case the properties in\r\n * the source Object are copied onto it as static properties of the Function.\r\n *\r\n * Note: we don't merge __proto__ to prevent prototype pollution\r\n */\r\nfunction deepExtend(target, source) {\r\n    if (!(source instanceof Object)) {\r\n        return source;\r\n    }\r\n    switch (source.constructor) {\r\n        case Date:\r\n            // Treat Dates like scalars; if the target date object had any child\r\n            // properties - they will be lost!\r\n            const dateValue = source;\r\n            return new Date(dateValue.getTime());\r\n        case Object:\r\n            if (target === undefined) {\r\n                target = {};\r\n            }\r\n            break;\r\n        case Array:\r\n            // Always copy the array source and overwrite the target.\r\n            target = [];\r\n            break;\r\n        default:\r\n            // Not a plain Object - treat it as a scalar.\r\n            return source;\r\n    }\r\n    for (const prop in source) {\r\n        // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\r\n        if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\r\n            continue;\r\n        }\r\n        target[prop] = deepExtend(target[prop], source[prop]);\r\n    }\r\n    return target;\r\n}\r\nfunction isValidKey(key) {\r\n    return key !== '__proto__';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Deferred {\r\n    constructor() {\r\n        this.reject = () => { };\r\n        this.resolve = () => { };\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this.resolve = resolve;\r\n            this.reject = reject;\r\n        });\r\n    }\r\n    /**\r\n     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\r\n     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\r\n     * and returns a node-style callback which will resolve or reject the Deferred's promise.\r\n     */\r\n    wrapCallback(callback) {\r\n        return (error, value) => {\r\n            if (error) {\r\n                this.reject(error);\r\n            }\r\n            else {\r\n                this.resolve(value);\r\n            }\r\n            if (typeof callback === 'function') {\r\n                // Attaching noop handler just in case developer wasn't expecting\r\n                // promises\r\n                this.promise.catch(() => { });\r\n                // Some of our callbacks don't expect a value and our own tests\r\n                // assert that the parameter length is 1\r\n                if (callback.length === 1) {\r\n                    callback(error);\r\n                }\r\n                else {\r\n                    callback(error, value);\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction createMockUserToken(token, projectId) {\r\n    if (token.uid) {\r\n        throw new Error('The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.');\r\n    }\r\n    // Unsecured JWTs use \"none\" as the algorithm.\r\n    const header = {\r\n        alg: 'none',\r\n        type: 'JWT'\r\n    };\r\n    const project = projectId || 'demo-project';\r\n    const iat = token.iat || 0;\r\n    const sub = token.sub || token.user_id;\r\n    if (!sub) {\r\n        throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\r\n    }\r\n    const payload = Object.assign({ \r\n        // Set all required fields to decent defaults\r\n        iss: `https://securetoken.google.com/${project}`, aud: project, iat, exp: iat + 3600, auth_time: iat, sub, user_id: sub, firebase: {\r\n            sign_in_provider: 'custom',\r\n            identities: {}\r\n        } }, token);\r\n    // Unsecured JWTs use the empty string as a signature.\r\n    const signature = '';\r\n    return [\r\n        base64urlEncodeWithoutPadding(JSON.stringify(header)),\r\n        base64urlEncodeWithoutPadding(JSON.stringify(payload)),\r\n        signature\r\n    ].join('.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns navigator.userAgent string or '' if it's not defined.\r\n * @return user agent string\r\n */\r\nfunction getUA() {\r\n    if (typeof navigator !== 'undefined' &&\r\n        typeof navigator['userAgent'] === 'string') {\r\n        return navigator['userAgent'];\r\n    }\r\n    else {\r\n        return '';\r\n    }\r\n}\r\n/**\r\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\r\n *\r\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\r\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\r\n * wait for a callback.\r\n */\r\nfunction isMobileCordova() {\r\n    return (typeof window !== 'undefined' &&\r\n        // @ts-ignore Setting up an broadly applicable index signature for Window\r\n        // just to deal with this case would probably be a bad idea.\r\n        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\r\n        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));\r\n}\r\n/**\r\n * Detect Node.js.\r\n *\r\n * @return true if Node.js environment is detected.\r\n */\r\n// Node detection logic from: https://github.com/iliakan/detect-node/\r\nfunction isNode() {\r\n    try {\r\n        return (Object.prototype.toString.call(global.process) === '[object process]');\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Detect Browser Environment\r\n */\r\nfunction isBrowser() {\r\n    return typeof self === 'object' && self.self === self;\r\n}\r\nfunction isBrowserExtension() {\r\n    const runtime = typeof chrome === 'object'\r\n        ? chrome.runtime\r\n        : typeof browser === 'object'\r\n            ? browser.runtime\r\n            : undefined;\r\n    return typeof runtime === 'object' && runtime.id !== undefined;\r\n}\r\n/**\r\n * Detect React Native.\r\n *\r\n * @return true if ReactNative environment is detected.\r\n */\r\nfunction isReactNative() {\r\n    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');\r\n}\r\n/** Detects Electron apps. */\r\nfunction isElectron() {\r\n    return getUA().indexOf('Electron/') >= 0;\r\n}\r\n/** Detects Internet Explorer. */\r\nfunction isIE() {\r\n    const ua = getUA();\r\n    return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\r\n}\r\n/** Detects Universal Windows Platform apps. */\r\nfunction isUWP() {\r\n    return getUA().indexOf('MSAppHost/') >= 0;\r\n}\r\n/**\r\n * Detect whether the current SDK build is the Node version.\r\n *\r\n * @return true if it's the Node SDK build.\r\n */\r\nfunction isNodeSdk() {\r\n    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\r\n}\r\n/** Returns true if we are running in Safari. */\r\nfunction isSafari() {\r\n    return (!isNode() &&\r\n        navigator.userAgent.includes('Safari') &&\r\n        !navigator.userAgent.includes('Chrome'));\r\n}\r\n/**\r\n * This method checks if indexedDB is supported by current browser/service worker context\r\n * @return true if indexedDB is supported by current browser/service worker context\r\n */\r\nfunction isIndexedDBAvailable() {\r\n    return typeof indexedDB === 'object';\r\n}\r\n/**\r\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\r\n * if errors occur during the database open operation.\r\n *\r\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\r\n * private browsing)\r\n */\r\nfunction validateIndexedDBOpenable() {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            let preExist = true;\r\n            const DB_CHECK_NAME = 'validate-browser-context-for-indexeddb-analytics-module';\r\n            const request = self.indexedDB.open(DB_CHECK_NAME);\r\n            request.onsuccess = () => {\r\n                request.result.close();\r\n                // delete database only when it doesn't pre-exist\r\n                if (!preExist) {\r\n                    self.indexedDB.deleteDatabase(DB_CHECK_NAME);\r\n                }\r\n                resolve(true);\r\n            };\r\n            request.onupgradeneeded = () => {\r\n                preExist = false;\r\n            };\r\n            request.onerror = () => {\r\n                var _a;\r\n                reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || '');\r\n            };\r\n        }\r\n        catch (error) {\r\n            reject(error);\r\n        }\r\n    });\r\n}\r\n/**\r\n *\r\n * This method checks whether cookie is enabled within current browser\r\n * @return true if cookie is enabled within current browser\r\n */\r\nfunction areCookiesEnabled() {\r\n    if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Polyfill for `globalThis` object.\r\n * @returns the `globalThis` object for the given environment.\r\n */\r\nfunction getGlobal() {\r\n    if (typeof self !== 'undefined') {\r\n        return self;\r\n    }\r\n    if (typeof window !== 'undefined') {\r\n        return window;\r\n    }\r\n    if (typeof global !== 'undefined') {\r\n        return global;\r\n    }\r\n    throw new Error('Unable to locate global object.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Standardized Firebase Error.\r\n *\r\n * Usage:\r\n *\r\n *   // Typescript string literals for type-safe codes\r\n *   type Err =\r\n *     'unknown' |\r\n *     'object-not-found'\r\n *     ;\r\n *\r\n *   // Closure enum for type-safe error codes\r\n *   // at-enum {string}\r\n *   var Err = {\r\n *     UNKNOWN: 'unknown',\r\n *     OBJECT_NOT_FOUND: 'object-not-found',\r\n *   }\r\n *\r\n *   let errors: Map<Err, string> = {\r\n *     'generic-error': \"Unknown error\",\r\n *     'file-not-found': \"Could not find file: {$file}\",\r\n *   };\r\n *\r\n *   // Type-safe function - must pass a valid error code as param.\r\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\r\n *\r\n *   ...\r\n *   throw error.create(Err.GENERIC);\r\n *   ...\r\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\r\n *   ...\r\n *   // Service: Could not file file: foo.txt (service/file-not-found).\r\n *\r\n *   catch (e) {\r\n *     assert(e.message === \"Could not find file: foo.txt.\");\r\n *     if (e.code === 'service/file-not-found') {\r\n *       console.log(\"Could not read file: \" + e['file']);\r\n *     }\r\n *   }\r\n */\r\nconst ERROR_NAME = 'FirebaseError';\r\n// Based on code from:\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\r\nclass FirebaseError extends Error {\r\n    constructor(code, message, customData) {\r\n        super(message);\r\n        this.code = code;\r\n        this.customData = customData;\r\n        this.name = ERROR_NAME;\r\n        // Fix For ES5\r\n        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(this, FirebaseError.prototype);\r\n        // Maintains proper stack trace for where our error was thrown.\r\n        // Only available on V8.\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, ErrorFactory.prototype.create);\r\n        }\r\n    }\r\n}\r\nclass ErrorFactory {\r\n    constructor(service, serviceName, errors) {\r\n        this.service = service;\r\n        this.serviceName = serviceName;\r\n        this.errors = errors;\r\n    }\r\n    create(code, ...data) {\r\n        const customData = data[0] || {};\r\n        const fullCode = `${this.service}/${code}`;\r\n        const template = this.errors[code];\r\n        const message = template ? replaceTemplate(template, customData) : 'Error';\r\n        // Service Name: Error message (service/code).\r\n        const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\r\n        const error = new FirebaseError(fullCode, fullMessage, customData);\r\n        return error;\r\n    }\r\n}\r\nfunction replaceTemplate(template, data) {\r\n    return template.replace(PATTERN, (_, key) => {\r\n        const value = data[key];\r\n        return value != null ? String(value) : `<${key}?>`;\r\n    });\r\n}\r\nconst PATTERN = /\\{\\$([^}]+)}/g;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Evaluates a JSON string into a javascript object.\r\n *\r\n * @param {string} str A string containing JSON.\r\n * @return {*} The javascript object representing the specified JSON.\r\n */\r\nfunction jsonEval(str) {\r\n    return JSON.parse(str);\r\n}\r\n/**\r\n * Returns JSON representing a javascript object.\r\n * @param {*} data Javascript object to be stringified.\r\n * @return {string} The JSON contents of the object.\r\n */\r\nfunction stringify(data) {\r\n    return JSON.stringify(data);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Decodes a Firebase auth. token into constituent parts.\r\n *\r\n * Notes:\r\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst decode = function (token) {\r\n    let header = {}, claims = {}, data = {}, signature = '';\r\n    try {\r\n        const parts = token.split('.');\r\n        header = jsonEval(base64Decode(parts[0]) || '');\r\n        claims = jsonEval(base64Decode(parts[1]) || '');\r\n        signature = parts[2];\r\n        data = claims['d'] || {};\r\n        delete claims['d'];\r\n    }\r\n    catch (e) { }\r\n    return {\r\n        header,\r\n        claims,\r\n        data,\r\n        signature\r\n    };\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\r\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidTimestamp = function (token) {\r\n    const claims = decode(token).claims;\r\n    const now = Math.floor(new Date().getTime() / 1000);\r\n    let validSince = 0, validUntil = 0;\r\n    if (typeof claims === 'object') {\r\n        if (claims.hasOwnProperty('nbf')) {\r\n            validSince = claims['nbf'];\r\n        }\r\n        else if (claims.hasOwnProperty('iat')) {\r\n            validSince = claims['iat'];\r\n        }\r\n        if (claims.hasOwnProperty('exp')) {\r\n            validUntil = claims['exp'];\r\n        }\r\n        else {\r\n            // token will expire after 24h by default\r\n            validUntil = validSince + 86400;\r\n        }\r\n    }\r\n    return (!!now &&\r\n        !!validSince &&\r\n        !!validUntil &&\r\n        now >= validSince &&\r\n        now <= validUntil);\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\r\n *\r\n * Notes:\r\n * - May return null if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst issuedAtTime = function (token) {\r\n    const claims = decode(token).claims;\r\n    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\r\n        return claims['iat'];\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidFormat = function (token) {\r\n    const decoded = decode(token), claims = decoded.claims;\r\n    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\r\n};\r\n/**\r\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isAdmin = function (token) {\r\n    const claims = decode(token).claims;\r\n    return typeof claims === 'object' && claims['admin'] === true;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction contains(obj, key) {\r\n    return Object.prototype.hasOwnProperty.call(obj, key);\r\n}\r\nfunction safeGet(obj, key) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\nfunction isEmpty(obj) {\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction map(obj, fn, contextObj) {\r\n    const res = {};\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            res[key] = fn.call(contextObj, obj[key], key, obj);\r\n        }\r\n    }\r\n    return res;\r\n}\r\n/**\r\n * Deep equal two objects. Support Arrays and Objects.\r\n */\r\nfunction deepEqual(a, b) {\r\n    if (a === b) {\r\n        return true;\r\n    }\r\n    const aKeys = Object.keys(a);\r\n    const bKeys = Object.keys(b);\r\n    for (const k of aKeys) {\r\n        if (!bKeys.includes(k)) {\r\n            return false;\r\n        }\r\n        const aProp = a[k];\r\n        const bProp = b[k];\r\n        if (isObject(aProp) && isObject(bProp)) {\r\n            if (!deepEqual(aProp, bProp)) {\r\n                return false;\r\n            }\r\n        }\r\n        else if (aProp !== bProp) {\r\n            return false;\r\n        }\r\n    }\r\n    for (const k of bKeys) {\r\n        if (!aKeys.includes(k)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction isObject(thing) {\r\n    return thing !== null && typeof thing === 'object';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\r\n * params object (e.g. {arg: 'val', arg2: 'val2'})\r\n * Note: You must prepend it with ? when adding it to a URL.\r\n */\r\nfunction querystring(querystringParams) {\r\n    const params = [];\r\n    for (const [key, value] of Object.entries(querystringParams)) {\r\n        if (Array.isArray(value)) {\r\n            value.forEach(arrayVal => {\r\n                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));\r\n            });\r\n        }\r\n        else {\r\n            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\r\n        }\r\n    }\r\n    return params.length ? '&' + params.join('&') : '';\r\n}\r\n/**\r\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\r\n * (e.g. {arg: 'val', arg2: 'val2'})\r\n */\r\nfunction querystringDecode(querystring) {\r\n    const obj = {};\r\n    const tokens = querystring.replace(/^\\?/, '').split('&');\r\n    tokens.forEach(token => {\r\n        if (token) {\r\n            const [key, value] = token.split('=');\r\n            obj[decodeURIComponent(key)] = decodeURIComponent(value);\r\n        }\r\n    });\r\n    return obj;\r\n}\r\n/**\r\n * Extract the query string part of a URL, including the leading question mark (if present).\r\n */\r\nfunction extractQuerystring(url) {\r\n    const queryStart = url.indexOf('?');\r\n    if (!queryStart) {\r\n        return '';\r\n    }\r\n    const fragmentStart = url.indexOf('#', queryStart);\r\n    return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : undefined);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview SHA-1 cryptographic hash.\r\n * Variable names follow the notation in FIPS PUB 180-3:\r\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\r\n *\r\n * Usage:\r\n *   var sha1 = new sha1();\r\n *   sha1.update(bytes);\r\n *   var hash = sha1.digest();\r\n *\r\n * Performance:\r\n *   Chrome 23:   ~400 Mbit/s\r\n *   Firefox 16:  ~250 Mbit/s\r\n *\r\n */\r\n/**\r\n * SHA-1 cryptographic hash constructor.\r\n *\r\n * The properties declared here are discussed in the above algorithm document.\r\n * @constructor\r\n * @final\r\n * @struct\r\n */\r\nclass Sha1 {\r\n    constructor() {\r\n        /**\r\n         * Holds the previous values of accumulated variables a-e in the compress_\r\n         * function.\r\n         * @private\r\n         */\r\n        this.chain_ = [];\r\n        /**\r\n         * A buffer holding the partially computed hash result.\r\n         * @private\r\n         */\r\n        this.buf_ = [];\r\n        /**\r\n         * An array of 80 bytes, each a part of the message to be hashed.  Referred to\r\n         * as the message schedule in the docs.\r\n         * @private\r\n         */\r\n        this.W_ = [];\r\n        /**\r\n         * Contains data needed to pad messages less than 64 bytes.\r\n         * @private\r\n         */\r\n        this.pad_ = [];\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.inbuf_ = 0;\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.total_ = 0;\r\n        this.blockSize = 512 / 8;\r\n        this.pad_[0] = 128;\r\n        for (let i = 1; i < this.blockSize; ++i) {\r\n            this.pad_[i] = 0;\r\n        }\r\n        this.reset();\r\n    }\r\n    reset() {\r\n        this.chain_[0] = 0x67452301;\r\n        this.chain_[1] = 0xefcdab89;\r\n        this.chain_[2] = 0x98badcfe;\r\n        this.chain_[3] = 0x10325476;\r\n        this.chain_[4] = 0xc3d2e1f0;\r\n        this.inbuf_ = 0;\r\n        this.total_ = 0;\r\n    }\r\n    /**\r\n     * Internal compress helper function.\r\n     * @param buf Block to compress.\r\n     * @param offset Offset of the block in the buffer.\r\n     * @private\r\n     */\r\n    compress_(buf, offset) {\r\n        if (!offset) {\r\n            offset = 0;\r\n        }\r\n        const W = this.W_;\r\n        // get 16 big endian words\r\n        if (typeof buf === 'string') {\r\n            for (let i = 0; i < 16; i++) {\r\n                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\r\n                // have a bug that turns the post-increment ++ operator into pre-increment\r\n                // during JIT compilation.  We have code that depends heavily on SHA-1 for\r\n                // correctness and which is affected by this bug, so I've removed all uses\r\n                // of post-increment ++ in which the result value is used.  We can revert\r\n                // this change once the Safari bug\r\n                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\r\n                // most clients have been updated.\r\n                W[i] =\r\n                    (buf.charCodeAt(offset) << 24) |\r\n                        (buf.charCodeAt(offset + 1) << 16) |\r\n                        (buf.charCodeAt(offset + 2) << 8) |\r\n                        buf.charCodeAt(offset + 3);\r\n                offset += 4;\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0; i < 16; i++) {\r\n                W[i] =\r\n                    (buf[offset] << 24) |\r\n                        (buf[offset + 1] << 16) |\r\n                        (buf[offset + 2] << 8) |\r\n                        buf[offset + 3];\r\n                offset += 4;\r\n            }\r\n        }\r\n        // expand to 80 words\r\n        for (let i = 16; i < 80; i++) {\r\n            const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\r\n            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\r\n        }\r\n        let a = this.chain_[0];\r\n        let b = this.chain_[1];\r\n        let c = this.chain_[2];\r\n        let d = this.chain_[3];\r\n        let e = this.chain_[4];\r\n        let f, k;\r\n        // TODO(user): Try to unroll this loop to speed up the computation.\r\n        for (let i = 0; i < 80; i++) {\r\n            if (i < 40) {\r\n                if (i < 20) {\r\n                    f = d ^ (b & (c ^ d));\r\n                    k = 0x5a827999;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0x6ed9eba1;\r\n                }\r\n            }\r\n            else {\r\n                if (i < 60) {\r\n                    f = (b & c) | (d & (b | c));\r\n                    k = 0x8f1bbcdc;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0xca62c1d6;\r\n                }\r\n            }\r\n            const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\r\n            e = d;\r\n            d = c;\r\n            c = ((b << 30) | (b >>> 2)) & 0xffffffff;\r\n            b = a;\r\n            a = t;\r\n        }\r\n        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\r\n        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\r\n        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\r\n        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\r\n        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\r\n    }\r\n    update(bytes, length) {\r\n        // TODO(johnlenz): tighten the function signature and remove this check\r\n        if (bytes == null) {\r\n            return;\r\n        }\r\n        if (length === undefined) {\r\n            length = bytes.length;\r\n        }\r\n        const lengthMinusBlock = length - this.blockSize;\r\n        let n = 0;\r\n        // Using local instead of member variables gives ~5% speedup on Firefox 16.\r\n        const buf = this.buf_;\r\n        let inbuf = this.inbuf_;\r\n        // The outer while loop should execute at most twice.\r\n        while (n < length) {\r\n            // When we have no data in the block to top up, we can directly process the\r\n            // input buffer (assuming it contains sufficient data). This gives ~25%\r\n            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\r\n            // the data is provided in large chunks (or in multiples of 64 bytes).\r\n            if (inbuf === 0) {\r\n                while (n <= lengthMinusBlock) {\r\n                    this.compress_(bytes, n);\r\n                    n += this.blockSize;\r\n                }\r\n            }\r\n            if (typeof bytes === 'string') {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes.charCodeAt(n);\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes[n];\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.inbuf_ = inbuf;\r\n        this.total_ += length;\r\n    }\r\n    /** @override */\r\n    digest() {\r\n        const digest = [];\r\n        let totalBits = this.total_ * 8;\r\n        // Add pad 0x80 0x00*.\r\n        if (this.inbuf_ < 56) {\r\n            this.update(this.pad_, 56 - this.inbuf_);\r\n        }\r\n        else {\r\n            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\r\n        }\r\n        // Add # bits.\r\n        for (let i = this.blockSize - 1; i >= 56; i--) {\r\n            this.buf_[i] = totalBits & 255;\r\n            totalBits /= 256; // Don't use bit-shifting here!\r\n        }\r\n        this.compress_(this.buf_);\r\n        let n = 0;\r\n        for (let i = 0; i < 5; i++) {\r\n            for (let j = 24; j >= 0; j -= 8) {\r\n                digest[n] = (this.chain_[i] >> j) & 255;\r\n                ++n;\r\n            }\r\n        }\r\n        return digest;\r\n    }\r\n}\n\n/**\r\n * Helper to make a Subscribe function (just like Promise helps make a\r\n * Thenable).\r\n *\r\n * @param executor Function which can make calls to a single Observer\r\n *     as a proxy.\r\n * @param onNoObservers Callback when count of Observers goes to zero.\r\n */\r\nfunction createSubscribe(executor, onNoObservers) {\r\n    const proxy = new ObserverProxy(executor, onNoObservers);\r\n    return proxy.subscribe.bind(proxy);\r\n}\r\n/**\r\n * Implement fan-out for any number of Observers attached via a subscribe\r\n * function.\r\n */\r\nclass ObserverProxy {\r\n    /**\r\n     * @param executor Function which can make calls to a single Observer\r\n     *     as a proxy.\r\n     * @param onNoObservers Callback when count of Observers goes to zero.\r\n     */\r\n    constructor(executor, onNoObservers) {\r\n        this.observers = [];\r\n        this.unsubscribes = [];\r\n        this.observerCount = 0;\r\n        // Micro-task scheduling by calling task.then().\r\n        this.task = Promise.resolve();\r\n        this.finalized = false;\r\n        this.onNoObservers = onNoObservers;\r\n        // Call the executor asynchronously so subscribers that are called\r\n        // synchronously after the creation of the subscribe function\r\n        // can still receive the very first value generated in the executor.\r\n        this.task\r\n            .then(() => {\r\n            executor(this);\r\n        })\r\n            .catch(e => {\r\n            this.error(e);\r\n        });\r\n    }\r\n    next(value) {\r\n        this.forEachObserver((observer) => {\r\n            observer.next(value);\r\n        });\r\n    }\r\n    error(error) {\r\n        this.forEachObserver((observer) => {\r\n            observer.error(error);\r\n        });\r\n        this.close(error);\r\n    }\r\n    complete() {\r\n        this.forEachObserver((observer) => {\r\n            observer.complete();\r\n        });\r\n        this.close();\r\n    }\r\n    /**\r\n     * Subscribe function that can be used to add an Observer to the fan-out list.\r\n     *\r\n     * - We require that no event is sent to a subscriber sychronously to their\r\n     *   call to subscribe().\r\n     */\r\n    subscribe(nextOrObserver, error, complete) {\r\n        let observer;\r\n        if (nextOrObserver === undefined &&\r\n            error === undefined &&\r\n            complete === undefined) {\r\n            throw new Error('Missing Observer.');\r\n        }\r\n        // Assemble an Observer object when passed as callback functions.\r\n        if (implementsAnyMethods(nextOrObserver, [\r\n            'next',\r\n            'error',\r\n            'complete'\r\n        ])) {\r\n            observer = nextOrObserver;\r\n        }\r\n        else {\r\n            observer = {\r\n                next: nextOrObserver,\r\n                error,\r\n                complete\r\n            };\r\n        }\r\n        if (observer.next === undefined) {\r\n            observer.next = noop;\r\n        }\r\n        if (observer.error === undefined) {\r\n            observer.error = noop;\r\n        }\r\n        if (observer.complete === undefined) {\r\n            observer.complete = noop;\r\n        }\r\n        const unsub = this.unsubscribeOne.bind(this, this.observers.length);\r\n        // Attempt to subscribe to a terminated Observable - we\r\n        // just respond to the Observer with the final error or complete\r\n        // event.\r\n        if (this.finalized) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this.task.then(() => {\r\n                try {\r\n                    if (this.finalError) {\r\n                        observer.error(this.finalError);\r\n                    }\r\n                    else {\r\n                        observer.complete();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // nothing\r\n                }\r\n                return;\r\n            });\r\n        }\r\n        this.observers.push(observer);\r\n        return unsub;\r\n    }\r\n    // Unsubscribe is synchronous - we guarantee that no events are sent to\r\n    // any unsubscribed Observer.\r\n    unsubscribeOne(i) {\r\n        if (this.observers === undefined || this.observers[i] === undefined) {\r\n            return;\r\n        }\r\n        delete this.observers[i];\r\n        this.observerCount -= 1;\r\n        if (this.observerCount === 0 && this.onNoObservers !== undefined) {\r\n            this.onNoObservers(this);\r\n        }\r\n    }\r\n    forEachObserver(fn) {\r\n        if (this.finalized) {\r\n            // Already closed by previous event....just eat the additional values.\r\n            return;\r\n        }\r\n        // Since sendOne calls asynchronously - there is no chance that\r\n        // this.observers will become undefined.\r\n        for (let i = 0; i < this.observers.length; i++) {\r\n            this.sendOne(i, fn);\r\n        }\r\n    }\r\n    // Call the Observer via one of it's callback function. We are careful to\r\n    // confirm that the observe has not been unsubscribed since this asynchronous\r\n    // function had been queued.\r\n    sendOne(i, fn) {\r\n        // Execute the callback asynchronously\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            if (this.observers !== undefined && this.observers[i] !== undefined) {\r\n                try {\r\n                    fn(this.observers[i]);\r\n                }\r\n                catch (e) {\r\n                    // Ignore exceptions raised in Observers or missing methods of an\r\n                    // Observer.\r\n                    // Log error to console. b/31404806\r\n                    if (typeof console !== 'undefined' && console.error) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    close(err) {\r\n        if (this.finalized) {\r\n            return;\r\n        }\r\n        this.finalized = true;\r\n        if (err !== undefined) {\r\n            this.finalError = err;\r\n        }\r\n        // Proxy is no longer needed - garbage collect references\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            this.observers = undefined;\r\n            this.onNoObservers = undefined;\r\n        });\r\n    }\r\n}\r\n/** Turn synchronous function into one called asynchronously. */\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction async(fn, onError) {\r\n    return (...args) => {\r\n        Promise.resolve(true)\r\n            .then(() => {\r\n            fn(...args);\r\n        })\r\n            .catch((error) => {\r\n            if (onError) {\r\n                onError(error);\r\n            }\r\n        });\r\n    };\r\n}\r\n/**\r\n * Return true if the object passed in implements any of the named methods.\r\n */\r\nfunction implementsAnyMethods(obj, methods) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return false;\r\n    }\r\n    for (const method of methods) {\r\n        if (method in obj && typeof obj[method] === 'function') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction noop() {\r\n    // do nothing\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Check to make sure the appropriate number of arguments are provided for a public function.\r\n * Throws an error if it fails.\r\n *\r\n * @param fnName The function name\r\n * @param minCount The minimum number of arguments to allow for the function call\r\n * @param maxCount The maximum number of argument to allow for the function call\r\n * @param argCount The actual number of arguments provided.\r\n */\r\nconst validateArgCount = function (fnName, minCount, maxCount, argCount) {\r\n    let argError;\r\n    if (argCount < minCount) {\r\n        argError = 'at least ' + minCount;\r\n    }\r\n    else if (argCount > maxCount) {\r\n        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\r\n    }\r\n    if (argError) {\r\n        const error = fnName +\r\n            ' failed: Was called with ' +\r\n            argCount +\r\n            (argCount === 1 ? ' argument.' : ' arguments.') +\r\n            ' Expects ' +\r\n            argError +\r\n            '.';\r\n        throw new Error(error);\r\n    }\r\n};\r\n/**\r\n * Generates a string to prefix an error message about failed argument validation\r\n *\r\n * @param fnName The function name\r\n * @param argName The name of the argument\r\n * @return The prefix to add to the error thrown for validation.\r\n */\r\nfunction errorPrefix(fnName, argName) {\r\n    return `${fnName} failed: ${argName} argument `;\r\n}\r\n/**\r\n * @param fnName\r\n * @param argumentNumber\r\n * @param namespace\r\n * @param optional\r\n */\r\nfunction validateNamespace(fnName, namespace, optional) {\r\n    if (optional && !namespace) {\r\n        return;\r\n    }\r\n    if (typeof namespace !== 'string') {\r\n        //TODO: I should do more validation here. We only allow certain chars in namespaces.\r\n        throw new Error(errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.');\r\n    }\r\n}\r\nfunction validateCallback(fnName, argumentName, \r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\ncallback, optional) {\r\n    if (optional && !callback) {\r\n        return;\r\n    }\r\n    if (typeof callback !== 'function') {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid function.');\r\n    }\r\n}\r\nfunction validateContextObject(fnName, argumentName, context, optional) {\r\n    if (optional && !context) {\r\n        return;\r\n    }\r\n    if (typeof context !== 'object' || context === null) {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid context object.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\r\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\r\n// so it's been modified.\r\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\r\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\r\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\r\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\r\n// pair).\r\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\r\n/**\r\n * @param {string} str\r\n * @return {Array}\r\n */\r\nconst stringToByteArray = function (str) {\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        // Is this the lead surrogate in a surrogate pair?\r\n        if (c >= 0xd800 && c <= 0xdbff) {\r\n            const high = c - 0xd800; // the high 10 bits.\r\n            i++;\r\n            assert(i < str.length, 'Surrogate pair missing trail surrogate.');\r\n            const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\r\n            c = 0x10000 + (high << 10) + low;\r\n        }\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if (c < 65536) {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Calculate length without actually converting; useful for doing cheaper validation.\r\n * @param {string} str\r\n * @return {number}\r\n */\r\nconst stringLength = function (str) {\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        const c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            p++;\r\n        }\r\n        else if (c < 2048) {\r\n            p += 2;\r\n        }\r\n        else if (c >= 0xd800 && c <= 0xdbff) {\r\n            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\r\n            p += 4;\r\n            i++; // skip trail surrogate.\r\n        }\r\n        else {\r\n            p += 3;\r\n        }\r\n    }\r\n    return p;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The amount of milliseconds to exponentially increase.\r\n */\r\nconst DEFAULT_INTERVAL_MILLIS = 1000;\r\n/**\r\n * The factor to backoff by.\r\n * Should be a number greater than 1.\r\n */\r\nconst DEFAULT_BACKOFF_FACTOR = 2;\r\n/**\r\n * The maximum milliseconds to increase to.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.\r\n/**\r\n * The percentage of backoff time to randomize by.\r\n * See\r\n * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic\r\n * for context.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst RANDOM_FACTOR = 0.5;\r\n/**\r\n * Based on the backoff method from\r\n * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.\r\n * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.\r\n */\r\nfunction calculateBackoffMillis(backoffCount, intervalMillis = DEFAULT_INTERVAL_MILLIS, backoffFactor = DEFAULT_BACKOFF_FACTOR) {\r\n    // Calculates an exponentially increasing value.\r\n    // Deviation: calculates value from count and a constant interval, so we only need to save value\r\n    // and count to restore state.\r\n    const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);\r\n    // A random \"fuzz\" to avoid waves of retries.\r\n    // Deviation: randomFactor is required.\r\n    const randomWait = Math.round(\r\n    // A fraction of the backoff value to add/subtract.\r\n    // Deviation: changes multiplication order to improve readability.\r\n    RANDOM_FACTOR *\r\n        currBaseValue *\r\n        // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines\r\n        // if we add or subtract.\r\n        (Math.random() - 0.5) *\r\n        2);\r\n    // Limits backoff to max to avoid effectively permanent backoff.\r\n    return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provide English ordinal letters after a number\r\n */\r\nfunction ordinal(i) {\r\n    if (!Number.isFinite(i)) {\r\n        return `${i}`;\r\n    }\r\n    return i + indicator(i);\r\n}\r\nfunction indicator(i) {\r\n    i = Math.abs(i);\r\n    const cent = i % 100;\r\n    if (cent >= 10 && cent <= 20) {\r\n        return 'th';\r\n    }\r\n    const dec = i % 10;\r\n    if (dec === 1) {\r\n        return 'st';\r\n    }\r\n    if (dec === 2) {\r\n        return 'nd';\r\n    }\r\n    if (dec === 3) {\r\n        return 'rd';\r\n    }\r\n    return 'th';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getModularInstance(service) {\r\n    if (service && service._delegate) {\r\n        return service._delegate;\r\n    }\r\n    else {\r\n        return service;\r\n    }\r\n}\n\nexport { CONSTANTS, Deferred, ErrorFactory, FirebaseError, MAX_VALUE_MILLIS, RANDOM_FACTOR, Sha1, areCookiesEnabled, assert, assertionError, async, base64, base64Decode, base64Encode, base64urlEncodeWithoutPadding, calculateBackoffMillis, contains, createMockUserToken, createSubscribe, decode, deepCopy, deepEqual, deepExtend, errorPrefix, extractQuerystring, getGlobal, getModularInstance, getUA, isAdmin, isBrowser, isBrowserExtension, isElectron, isEmpty, isIE, isIndexedDBAvailable, isMobileCordova, isNode, isNodeSdk, isReactNative, isSafari, isUWP, isValidFormat, isValidTimestamp, issuedAtTime, jsonEval, map, ordinal, querystring, querystringDecode, safeGet, stringLength, stringToByteArray, stringify, validateArgCount, validateCallback, validateContextObject, validateIndexedDBOpenable, validateNamespace };\n//# sourceMappingURL=index.esm2017.js.map\n","import { Deferred } from '@firebase/util';\n\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass Component {\r\n    /**\r\n     *\r\n     * @param name The public service name, e.g. app, auth, firestore, database\r\n     * @param instanceFactory Service factory responsible for creating the public interface\r\n     * @param type whether the service provided by the component is public or private\r\n     */\r\n    constructor(name, instanceFactory, type) {\r\n        this.name = name;\r\n        this.instanceFactory = instanceFactory;\r\n        this.type = type;\r\n        this.multipleInstances = false;\r\n        /**\r\n         * Properties to be added to the service namespace\r\n         */\r\n        this.serviceProps = {};\r\n        this.instantiationMode = \"LAZY\" /* LAZY */;\r\n        this.onInstanceCreated = null;\r\n    }\r\n    setInstantiationMode(mode) {\r\n        this.instantiationMode = mode;\r\n        return this;\r\n    }\r\n    setMultipleInstances(multipleInstances) {\r\n        this.multipleInstances = multipleInstances;\r\n        return this;\r\n    }\r\n    setServiceProps(props) {\r\n        this.serviceProps = props;\r\n        return this;\r\n    }\r\n    setInstanceCreatedCallback(callback) {\r\n        this.onInstanceCreated = callback;\r\n        return this;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\r\nclass Provider {\r\n    constructor(name, container) {\r\n        this.name = name;\r\n        this.container = container;\r\n        this.component = null;\r\n        this.instances = new Map();\r\n        this.instancesDeferred = new Map();\r\n        this.instancesOptions = new Map();\r\n        this.onInitCallbacks = new Map();\r\n    }\r\n    /**\r\n     * @param identifier A provider can provide mulitple instances of a service\r\n     * if this.component.multipleInstances is true.\r\n     */\r\n    get(identifier) {\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        if (!this.instancesDeferred.has(normalizedIdentifier)) {\r\n            const deferred = new Deferred();\r\n            this.instancesDeferred.set(normalizedIdentifier, deferred);\r\n            if (this.isInitialized(normalizedIdentifier) ||\r\n                this.shouldAutoInitialize()) {\r\n                // initialize the service if it can be auto-initialized\r\n                try {\r\n                    const instance = this.getOrInitializeService({\r\n                        instanceIdentifier: normalizedIdentifier\r\n                    });\r\n                    if (instance) {\r\n                        deferred.resolve(instance);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // when the instance factory throws an exception during get(), it should not cause\r\n                    // a fatal error. We just return the unresolved promise in this case.\r\n                }\r\n            }\r\n        }\r\n        return this.instancesDeferred.get(normalizedIdentifier).promise;\r\n    }\r\n    getImmediate(options) {\r\n        var _a;\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);\r\n        const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;\r\n        if (this.isInitialized(normalizedIdentifier) ||\r\n            this.shouldAutoInitialize()) {\r\n            try {\r\n                return this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n            }\r\n            catch (e) {\r\n                if (optional) {\r\n                    return null;\r\n                }\r\n                else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\r\n            if (optional) {\r\n                return null;\r\n            }\r\n            else {\r\n                throw Error(`Service ${this.name} is not available`);\r\n            }\r\n        }\r\n    }\r\n    getComponent() {\r\n        return this.component;\r\n    }\r\n    setComponent(component) {\r\n        if (component.name !== this.name) {\r\n            throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);\r\n        }\r\n        if (this.component) {\r\n            throw Error(`Component for ${this.name} has already been provided`);\r\n        }\r\n        this.component = component;\r\n        // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\r\n        if (!this.shouldAutoInitialize()) {\r\n            return;\r\n        }\r\n        // if the service is eager, initialize the default instance\r\n        if (isComponentEager(component)) {\r\n            try {\r\n                this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\r\n            }\r\n            catch (e) {\r\n                // when the instance factory for an eager Component throws an exception during the eager\r\n                // initialization, it should not cause a fatal error.\r\n                // TODO: Investigate if we need to make it configurable, because some component may want to cause\r\n                // a fatal error in this case?\r\n            }\r\n        }\r\n        // Create service instances for the pending promises and resolve them\r\n        // NOTE: if this.multipleInstances is false, only the default instance will be created\r\n        // and all promises with resolve with it regardless of the identifier.\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            try {\r\n                // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\r\n                const instance = this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n            catch (e) {\r\n                // when the instance factory throws an exception, it should not cause\r\n                // a fatal error. We just leave the promise unresolved.\r\n            }\r\n        }\r\n    }\r\n    clearInstance(identifier = DEFAULT_ENTRY_NAME) {\r\n        this.instancesDeferred.delete(identifier);\r\n        this.instancesOptions.delete(identifier);\r\n        this.instances.delete(identifier);\r\n    }\r\n    // app.delete() will call this method on every provider to delete the services\r\n    // TODO: should we mark the provider as deleted?\r\n    async delete() {\r\n        const services = Array.from(this.instances.values());\r\n        await Promise.all([\r\n            ...services\r\n                .filter(service => 'INTERNAL' in service) // legacy services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service.INTERNAL.delete()),\r\n            ...services\r\n                .filter(service => '_delete' in service) // modularized services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service._delete())\r\n        ]);\r\n    }\r\n    isComponentSet() {\r\n        return this.component != null;\r\n    }\r\n    isInitialized(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instances.has(identifier);\r\n    }\r\n    getOptions(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instancesOptions.get(identifier) || {};\r\n    }\r\n    initialize(opts = {}) {\r\n        const { options = {} } = opts;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\r\n        if (this.isInitialized(normalizedIdentifier)) {\r\n            throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);\r\n        }\r\n        if (!this.isComponentSet()) {\r\n            throw Error(`Component ${this.name} has not been registered yet`);\r\n        }\r\n        const instance = this.getOrInitializeService({\r\n            instanceIdentifier: normalizedIdentifier,\r\n            options\r\n        });\r\n        // resolve any pending promise waiting for the service instance\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            if (normalizedIdentifier === normalizedDeferredIdentifier) {\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n    /**\r\n     *\r\n     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\r\n     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\r\n     *\r\n     * @param identifier An optional instance identifier\r\n     * @returns a function to unregister the callback\r\n     */\r\n    onInit(callback, identifier) {\r\n        var _a;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();\r\n        existingCallbacks.add(callback);\r\n        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\r\n        const existingInstance = this.instances.get(normalizedIdentifier);\r\n        if (existingInstance) {\r\n            callback(existingInstance, normalizedIdentifier);\r\n        }\r\n        return () => {\r\n            existingCallbacks.delete(callback);\r\n        };\r\n    }\r\n    /**\r\n     * Invoke onInit callbacks synchronously\r\n     * @param instance the service instance`\r\n     */\r\n    invokeOnInitCallbacks(instance, identifier) {\r\n        const callbacks = this.onInitCallbacks.get(identifier);\r\n        if (!callbacks) {\r\n            return;\r\n        }\r\n        for (const callback of callbacks) {\r\n            try {\r\n                callback(instance, identifier);\r\n            }\r\n            catch (_a) {\r\n                // ignore errors in the onInit callback\r\n            }\r\n        }\r\n    }\r\n    getOrInitializeService({ instanceIdentifier, options = {} }) {\r\n        let instance = this.instances.get(instanceIdentifier);\r\n        if (!instance && this.component) {\r\n            instance = this.component.instanceFactory(this.container, {\r\n                instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\r\n                options\r\n            });\r\n            this.instances.set(instanceIdentifier, instance);\r\n            this.instancesOptions.set(instanceIdentifier, options);\r\n            /**\r\n             * Invoke onInit listeners.\r\n             * Note this.component.onInstanceCreated is different, which is used by the component creator,\r\n             * while onInit listeners are registered by consumers of the provider.\r\n             */\r\n            this.invokeOnInitCallbacks(instance, instanceIdentifier);\r\n            /**\r\n             * Order is important\r\n             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\r\n             * makes `isInitialized()` return true.\r\n             */\r\n            if (this.component.onInstanceCreated) {\r\n                try {\r\n                    this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\r\n                }\r\n                catch (_a) {\r\n                    // ignore errors in the onInstanceCreatedCallback\r\n                }\r\n            }\r\n        }\r\n        return instance || null;\r\n    }\r\n    normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME) {\r\n        if (this.component) {\r\n            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\r\n        }\r\n        else {\r\n            return identifier; // assume multiple instances are supported before the component is provided.\r\n        }\r\n    }\r\n    shouldAutoInitialize() {\r\n        return (!!this.component &&\r\n            this.component.instantiationMode !== \"EXPLICIT\" /* EXPLICIT */);\r\n    }\r\n}\r\n// undefined should be passed to the service factory for the default instance\r\nfunction normalizeIdentifierForFactory(identifier) {\r\n    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\r\n}\r\nfunction isComponentEager(component) {\r\n    return component.instantiationMode === \"EAGER\" /* EAGER */;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass ComponentContainer {\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.providers = new Map();\r\n    }\r\n    /**\r\n     *\r\n     * @param component Component being added\r\n     * @param overwrite When a component with the same name has already been registered,\r\n     * if overwrite is true: overwrite the existing component with the new component and create a new\r\n     * provider with the new component. It can be useful in tests where you want to use different mocks\r\n     * for different tests.\r\n     * if overwrite is false: throw an exception\r\n     */\r\n    addComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            throw new Error(`Component ${component.name} has already been registered with ${this.name}`);\r\n        }\r\n        provider.setComponent(component);\r\n    }\r\n    addOrOverwriteComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            // delete the existing provider from the container, so we can register the new component\r\n            this.providers.delete(component.name);\r\n        }\r\n        this.addComponent(component);\r\n    }\r\n    /**\r\n     * getProvider provides a type safe interface where it can only be called with a field name\r\n     * present in NameServiceMapping interface.\r\n     *\r\n     * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n     * themselves.\r\n     */\r\n    getProvider(name) {\r\n        if (this.providers.has(name)) {\r\n            return this.providers.get(name);\r\n        }\r\n        // create a Provider for a service that hasn't registered with Firebase\r\n        const provider = new Provider(name, this);\r\n        this.providers.set(name, provider);\r\n        return provider;\r\n    }\r\n    getProviders() {\r\n        return Array.from(this.providers.values());\r\n    }\r\n}\n\nexport { Component, ComponentContainer, Provider };\n//# sourceMappingURL=index.esm2017.js.map\n","/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A container for all of the Logger instances\r\n */\r\nconst instances = [];\r\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n})(LogLevel || (LogLevel = {}));\r\nconst levelStringToEnum = {\r\n    'debug': LogLevel.DEBUG,\r\n    'verbose': LogLevel.VERBOSE,\r\n    'info': LogLevel.INFO,\r\n    'warn': LogLevel.WARN,\r\n    'error': LogLevel.ERROR,\r\n    'silent': LogLevel.SILENT\r\n};\r\n/**\r\n * The default log level\r\n */\r\nconst defaultLogLevel = LogLevel.INFO;\r\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\r\nconst ConsoleMethod = {\r\n    [LogLevel.DEBUG]: 'log',\r\n    [LogLevel.VERBOSE]: 'log',\r\n    [LogLevel.INFO]: 'info',\r\n    [LogLevel.WARN]: 'warn',\r\n    [LogLevel.ERROR]: 'error'\r\n};\r\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\r\nconst defaultLogHandler = (instance, logType, ...args) => {\r\n    if (logType < instance.logLevel) {\r\n        return;\r\n    }\r\n    const now = new Date().toISOString();\r\n    const method = ConsoleMethod[logType];\r\n    if (method) {\r\n        console[method](`[${now}]  ${instance.name}:`, ...args);\r\n    }\r\n    else {\r\n        throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);\r\n    }\r\n};\r\nclass Logger {\r\n    /**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */\r\n    constructor(name) {\r\n        this.name = name;\r\n        /**\r\n         * The log level of the given Logger instance.\r\n         */\r\n        this._logLevel = defaultLogLevel;\r\n        /**\r\n         * The main (internal) log handler for the Logger instance.\r\n         * Can be set to a new function in internal package code but not by user.\r\n         */\r\n        this._logHandler = defaultLogHandler;\r\n        /**\r\n         * The optional, additional, user-defined log handler for the Logger instance.\r\n         */\r\n        this._userLogHandler = null;\r\n        /**\r\n         * Capture the current instance for later use\r\n         */\r\n        instances.push(this);\r\n    }\r\n    get logLevel() {\r\n        return this._logLevel;\r\n    }\r\n    set logLevel(val) {\r\n        if (!(val in LogLevel)) {\r\n            throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\r\n        }\r\n        this._logLevel = val;\r\n    }\r\n    // Workaround for setter/getter having to be the same type.\r\n    setLogLevel(val) {\r\n        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\r\n    }\r\n    get logHandler() {\r\n        return this._logHandler;\r\n    }\r\n    set logHandler(val) {\r\n        if (typeof val !== 'function') {\r\n            throw new TypeError('Value assigned to `logHandler` must be a function');\r\n        }\r\n        this._logHandler = val;\r\n    }\r\n    get userLogHandler() {\r\n        return this._userLogHandler;\r\n    }\r\n    set userLogHandler(val) {\r\n        this._userLogHandler = val;\r\n    }\r\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\r\n    debug(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\r\n        this._logHandler(this, LogLevel.DEBUG, ...args);\r\n    }\r\n    log(...args) {\r\n        this._userLogHandler &&\r\n            this._userLogHandler(this, LogLevel.VERBOSE, ...args);\r\n        this._logHandler(this, LogLevel.VERBOSE, ...args);\r\n    }\r\n    info(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\r\n        this._logHandler(this, LogLevel.INFO, ...args);\r\n    }\r\n    warn(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\r\n        this._logHandler(this, LogLevel.WARN, ...args);\r\n    }\r\n    error(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\r\n        this._logHandler(this, LogLevel.ERROR, ...args);\r\n    }\r\n}\r\nfunction setLogLevel(level) {\r\n    instances.forEach(inst => {\r\n        inst.setLogLevel(level);\r\n    });\r\n}\r\nfunction setUserLogHandler(logCallback, options) {\r\n    for (const instance of instances) {\r\n        let customLogLevel = null;\r\n        if (options && options.level) {\r\n            customLogLevel = levelStringToEnum[options.level];\r\n        }\r\n        if (logCallback === null) {\r\n            instance.userLogHandler = null;\r\n        }\r\n        else {\r\n            instance.userLogHandler = (instance, level, ...args) => {\r\n                const message = args\r\n                    .map(arg => {\r\n                    if (arg == null) {\r\n                        return null;\r\n                    }\r\n                    else if (typeof arg === 'string') {\r\n                        return arg;\r\n                    }\r\n                    else if (typeof arg === 'number' || typeof arg === 'boolean') {\r\n                        return arg.toString();\r\n                    }\r\n                    else if (arg instanceof Error) {\r\n                        return arg.message;\r\n                    }\r\n                    else {\r\n                        try {\r\n                            return JSON.stringify(arg);\r\n                        }\r\n                        catch (ignored) {\r\n                            return null;\r\n                        }\r\n                    }\r\n                })\r\n                    .filter(arg => arg)\r\n                    .join(' ');\r\n                if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\r\n                    logCallback({\r\n                        level: LogLevel[level].toLowerCase(),\r\n                        message,\r\n                        args,\r\n                        type: instance.name\r\n                    });\r\n                }\r\n            };\r\n        }\r\n    }\r\n}\n\nexport { LogLevel, Logger, setLogLevel, setUserLogHandler };\n//# sourceMappingURL=index.esm2017.js.map\n","import { Component, ComponentContainer } from '@firebase/component';\nimport { Logger, setUserLogHandler, setLogLevel as setLogLevel$1 } from '@firebase/logger';\nimport { ErrorFactory, deepEqual } from '@firebase/util';\nexport { FirebaseError } from '@firebase/util';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PlatformLoggerServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n    }\r\n    // In initial implementation, this will be called by installations on\r\n    // auth token refresh, and installations will send this string.\r\n    getPlatformInfoString() {\r\n        const providers = this.container.getProviders();\r\n        // Loop through providers and get library/version pairs from any that are\r\n        // version components.\r\n        return providers\r\n            .map(provider => {\r\n            if (isVersionServiceProvider(provider)) {\r\n                const service = provider.getImmediate();\r\n                return `${service.library}/${service.version}`;\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        })\r\n            .filter(logString => logString)\r\n            .join(' ');\r\n    }\r\n}\r\n/**\r\n *\r\n * @param provider check if this provider provides a VersionService\r\n *\r\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\r\n * provides VersionService. The provider is not necessarily a 'app-version'\r\n * provider.\r\n */\r\nfunction isVersionServiceProvider(provider) {\r\n    const component = provider.getComponent();\r\n    return (component === null || component === void 0 ? void 0 : component.type) === \"VERSION\" /* VERSION */;\r\n}\n\nconst name$o = \"@firebase/app\";\nconst version$1 = \"0.7.11\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logger = new Logger('@firebase/app');\n\nconst name$n = \"@firebase/app-compat\";\n\nconst name$m = \"@firebase/analytics-compat\";\n\nconst name$l = \"@firebase/analytics\";\n\nconst name$k = \"@firebase/app-check-compat\";\n\nconst name$j = \"@firebase/app-check\";\n\nconst name$i = \"@firebase/auth\";\n\nconst name$h = \"@firebase/auth-compat\";\n\nconst name$g = \"@firebase/database\";\n\nconst name$f = \"@firebase/database-compat\";\n\nconst name$e = \"@firebase/functions\";\n\nconst name$d = \"@firebase/functions-compat\";\n\nconst name$c = \"@firebase/installations\";\n\nconst name$b = \"@firebase/installations-compat\";\n\nconst name$a = \"@firebase/messaging\";\n\nconst name$9 = \"@firebase/messaging-compat\";\n\nconst name$8 = \"@firebase/performance\";\n\nconst name$7 = \"@firebase/performance-compat\";\n\nconst name$6 = \"@firebase/remote-config\";\n\nconst name$5 = \"@firebase/remote-config-compat\";\n\nconst name$4 = \"@firebase/storage\";\n\nconst name$3 = \"@firebase/storage-compat\";\n\nconst name$2 = \"@firebase/firestore\";\n\nconst name$1 = \"@firebase/firestore-compat\";\n\nconst name = \"firebase\";\nconst version = \"9.6.1\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The default app name\r\n *\r\n * @internal\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\r\nconst PLATFORM_LOG_STRING = {\r\n    [name$o]: 'fire-core',\r\n    [name$n]: 'fire-core-compat',\r\n    [name$l]: 'fire-analytics',\r\n    [name$m]: 'fire-analytics-compat',\r\n    [name$j]: 'fire-app-check',\r\n    [name$k]: 'fire-app-check-compat',\r\n    [name$i]: 'fire-auth',\r\n    [name$h]: 'fire-auth-compat',\r\n    [name$g]: 'fire-rtdb',\r\n    [name$f]: 'fire-rtdb-compat',\r\n    [name$e]: 'fire-fn',\r\n    [name$d]: 'fire-fn-compat',\r\n    [name$c]: 'fire-iid',\r\n    [name$b]: 'fire-iid-compat',\r\n    [name$a]: 'fire-fcm',\r\n    [name$9]: 'fire-fcm-compat',\r\n    [name$8]: 'fire-perf',\r\n    [name$7]: 'fire-perf-compat',\r\n    [name$6]: 'fire-rc',\r\n    [name$5]: 'fire-rc-compat',\r\n    [name$4]: 'fire-gcs',\r\n    [name$3]: 'fire-gcs-compat',\r\n    [name$2]: 'fire-fst',\r\n    [name$1]: 'fire-fst-compat',\r\n    'fire-js': 'fire-js',\r\n    [name]: 'fire-js-all'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nconst _apps = new Map();\r\n/**\r\n * Registered components.\r\n *\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst _components = new Map();\r\n/**\r\n * @param component - the component being added to this app's container\r\n *\r\n * @internal\r\n */\r\nfunction _addComponent(app, component) {\r\n    try {\r\n        app.container.addComponent(component);\r\n    }\r\n    catch (e) {\r\n        logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);\r\n    }\r\n}\r\n/**\r\n *\r\n * @internal\r\n */\r\nfunction _addOrOverwriteComponent(app, component) {\r\n    app.container.addOrOverwriteComponent(component);\r\n}\r\n/**\r\n *\r\n * @param component - the component to register\r\n * @returns whether or not the component is registered successfully\r\n *\r\n * @internal\r\n */\r\nfunction _registerComponent(component) {\r\n    const componentName = component.name;\r\n    if (_components.has(componentName)) {\r\n        logger.debug(`There were multiple attempts to register component ${componentName}.`);\r\n        return false;\r\n    }\r\n    _components.set(componentName, component);\r\n    // add the component to existing app instances\r\n    for (const app of _apps.values()) {\r\n        _addComponent(app, component);\r\n    }\r\n    return true;\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n *\r\n * @returns the provider for the service with the matching name\r\n *\r\n * @internal\r\n */\r\nfunction _getProvider(app, name) {\r\n    return app.container.getProvider(name);\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\r\n *\r\n * @internal\r\n */\r\nfunction _removeServiceInstance(app, name, instanceIdentifier = DEFAULT_ENTRY_NAME) {\r\n    _getProvider(app, name).clearInstance(instanceIdentifier);\r\n}\r\n/**\r\n * Test only\r\n *\r\n * @internal\r\n */\r\nfunction _clearComponents() {\r\n    _components.clear();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERRORS = {\r\n    [\"no-app\" /* NO_APP */]: \"No Firebase App '{$appName}' has been created - \" +\r\n        'call Firebase App.initializeApp()',\r\n    [\"bad-app-name\" /* BAD_APP_NAME */]: \"Illegal App name: '{$appName}\",\r\n    [\"duplicate-app\" /* DUPLICATE_APP */]: \"Firebase App named '{$appName}' already exists with different options or config\",\r\n    [\"app-deleted\" /* APP_DELETED */]: \"Firebase App named '{$appName}' already deleted\",\r\n    [\"invalid-app-argument\" /* INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' +\r\n        'Firebase App instance.',\r\n    [\"invalid-log-argument\" /* INVALID_LOG_ARGUMENT */]: 'First argument to `onLog` must be null or a function.'\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass FirebaseAppImpl {\r\n    constructor(options, config, container) {\r\n        this._isDeleted = false;\r\n        this._options = Object.assign({}, options);\r\n        this._config = Object.assign({}, config);\r\n        this._name = config.name;\r\n        this._automaticDataCollectionEnabled =\r\n            config.automaticDataCollectionEnabled;\r\n        this._container = container;\r\n        this.container.addComponent(new Component('app', () => this, \"PUBLIC\" /* PUBLIC */));\r\n    }\r\n    get automaticDataCollectionEnabled() {\r\n        this.checkDestroyed();\r\n        return this._automaticDataCollectionEnabled;\r\n    }\r\n    set automaticDataCollectionEnabled(val) {\r\n        this.checkDestroyed();\r\n        this._automaticDataCollectionEnabled = val;\r\n    }\r\n    get name() {\r\n        this.checkDestroyed();\r\n        return this._name;\r\n    }\r\n    get options() {\r\n        this.checkDestroyed();\r\n        return this._options;\r\n    }\r\n    get config() {\r\n        this.checkDestroyed();\r\n        return this._config;\r\n    }\r\n    get container() {\r\n        return this._container;\r\n    }\r\n    get isDeleted() {\r\n        return this._isDeleted;\r\n    }\r\n    set isDeleted(val) {\r\n        this._isDeleted = val;\r\n    }\r\n    /**\r\n     * This function will throw an Error if the App has already been deleted -\r\n     * use before performing API actions on the App.\r\n     */\r\n    checkDestroyed() {\r\n        if (this.isDeleted) {\r\n            throw ERROR_FACTORY.create(\"app-deleted\" /* APP_DELETED */, { appName: this._name });\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The current SDK version.\r\n *\r\n * @public\r\n */\r\nconst SDK_VERSION = version;\r\nfunction initializeApp(options, rawConfig = {}) {\r\n    if (typeof rawConfig !== 'object') {\r\n        const name = rawConfig;\r\n        rawConfig = { name };\r\n    }\r\n    const config = Object.assign({ name: DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false }, rawConfig);\r\n    const name = config.name;\r\n    if (typeof name !== 'string' || !name) {\r\n        throw ERROR_FACTORY.create(\"bad-app-name\" /* BAD_APP_NAME */, {\r\n            appName: String(name)\r\n        });\r\n    }\r\n    const existingApp = _apps.get(name);\r\n    if (existingApp) {\r\n        // return the existing app if options and config deep equal the ones in the existing app.\r\n        if (deepEqual(options, existingApp.options) &&\r\n            deepEqual(config, existingApp.config)) {\r\n            return existingApp;\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"duplicate-app\" /* DUPLICATE_APP */, { appName: name });\r\n        }\r\n    }\r\n    const container = new ComponentContainer(name);\r\n    for (const component of _components.values()) {\r\n        container.addComponent(component);\r\n    }\r\n    const newApp = new FirebaseAppImpl(options, config, container);\r\n    _apps.set(name, newApp);\r\n    return newApp;\r\n}\r\n/**\r\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * When called with no arguments, the default app is returned. When an app name\r\n * is provided, the app corresponding to that name is returned.\r\n *\r\n * An exception is thrown if the app being retrieved has not yet been\r\n * initialized.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return the default app\r\n * const app = getApp();\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return a named app\r\n * const otherApp = getApp(\"otherApp\");\r\n * ```\r\n *\r\n * @param name - Optional name of the app to return. If no name is\r\n *   provided, the default is `\"[DEFAULT]\"`.\r\n *\r\n * @returns The app corresponding to the provided app name.\r\n *   If no app name is provided, the default app is returned.\r\n *\r\n * @public\r\n */\r\nfunction getApp(name = DEFAULT_ENTRY_NAME) {\r\n    const app = _apps.get(name);\r\n    if (!app) {\r\n        throw ERROR_FACTORY.create(\"no-app\" /* NO_APP */, { appName: name });\r\n    }\r\n    return app;\r\n}\r\n/**\r\n * A (read-only) array of all initialized apps.\r\n * @public\r\n */\r\nfunction getApps() {\r\n    return Array.from(_apps.values());\r\n}\r\n/**\r\n * Renders this app unusable and frees the resources of all associated\r\n * services.\r\n *\r\n * @example\r\n * ```javascript\r\n * deleteApp(app)\r\n *   .then(function() {\r\n *     console.log(\"App deleted successfully\");\r\n *   })\r\n *   .catch(function(error) {\r\n *     console.log(\"Error deleting app:\", error);\r\n *   });\r\n * ```\r\n *\r\n * @public\r\n */\r\nasync function deleteApp(app) {\r\n    const name = app.name;\r\n    if (_apps.has(name)) {\r\n        _apps.delete(name);\r\n        await Promise.all(app.container\r\n            .getProviders()\r\n            .map(provider => provider.delete()));\r\n        app.isDeleted = true;\r\n    }\r\n}\r\n/**\r\n * Registers a library's name and version for platform logging purposes.\r\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\r\n * @param version - Current version of that library.\r\n * @param variant - Bundle variant, e.g., node, rn, etc.\r\n *\r\n * @public\r\n */\r\nfunction registerVersion(libraryKeyOrName, version, variant) {\r\n    var _a;\r\n    // TODO: We can use this check to whitelist strings when/if we set up\r\n    // a good whitelist system.\r\n    let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\r\n    if (variant) {\r\n        library += `-${variant}`;\r\n    }\r\n    const libraryMismatch = library.match(/\\s|\\//);\r\n    const versionMismatch = version.match(/\\s|\\//);\r\n    if (libraryMismatch || versionMismatch) {\r\n        const warning = [\r\n            `Unable to register library \"${library}\" with version \"${version}\":`\r\n        ];\r\n        if (libraryMismatch) {\r\n            warning.push(`library name \"${library}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        if (libraryMismatch && versionMismatch) {\r\n            warning.push('and');\r\n        }\r\n        if (versionMismatch) {\r\n            warning.push(`version name \"${version}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        logger.warn(warning.join(' '));\r\n        return;\r\n    }\r\n    _registerComponent(new Component(`${library}-version`, () => ({ library, version }), \"VERSION\" /* VERSION */));\r\n}\r\n/**\r\n * Sets log handler for all Firebase SDKs.\r\n * @param logCallback - An optional custom log handler that executes user code whenever\r\n * the Firebase SDK makes a logging call.\r\n *\r\n * @public\r\n */\r\nfunction onLog(logCallback, options) {\r\n    if (logCallback !== null && typeof logCallback !== 'function') {\r\n        throw ERROR_FACTORY.create(\"invalid-log-argument\" /* INVALID_LOG_ARGUMENT */);\r\n    }\r\n    setUserLogHandler(logCallback, options);\r\n}\r\n/**\r\n * Sets log level for all Firebase SDKs.\r\n *\r\n * All of the log types above the current log level are captured (i.e. if\r\n * you set the log level to `info`, errors are logged, but `debug` and\r\n * `verbose` logs are not).\r\n *\r\n * @public\r\n */\r\nfunction setLogLevel(logLevel) {\r\n    setLogLevel$1(logLevel);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerCoreComponents(variant) {\r\n    _registerComponent(new Component('platform-logger', container => new PlatformLoggerServiceImpl(container), \"PRIVATE\" /* PRIVATE */));\r\n    // Register `app` package.\r\n    registerVersion(name$o, version$1, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name$o, version$1, 'esm2017');\r\n    // Register platform SDK identifier (no version).\r\n    registerVersion('fire-js', '');\r\n}\n\n/**\r\n * Firebase App\r\n *\r\n * @remarks This package coordinates the communication between the different Firebase components\r\n * @packageDocumentation\r\n */\r\nregisterCoreComponents('');\n\nexport { SDK_VERSION, DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME, _addComponent, _addOrOverwriteComponent, _apps, _clearComponents, _components, _getProvider, _registerComponent, _removeServiceInstance, deleteApp, getApp, getApps, initializeApp, onLog, registerVersion, setLogLevel };\n//# sourceMappingURL=index.esm2017.js.map\n","import { registerVersion } from '@firebase/app';\nexport * from '@firebase/app';\n\nvar name = \"firebase\";\nvar version = \"9.6.1\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nregisterVersion(name, version, 'app');\n//# sourceMappingURL=index.esm.js.map\n","import { getApp, _getProvider, SDK_VERSION as SDK_VERSION$1, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, base64, stringToByteArray, Sha1, isNodeSdk, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, createMockUserToken } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\n\nconst name = \"@firebase/database\";\nconst version = \"0.12.4\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** The semver (www.semver.org) version of the SDK. */\r\nlet SDK_VERSION = '';\r\n/**\r\n * SDK_VERSION should be set before any database instance is created\r\n * @internal\r\n */\r\nfunction setSDKVersion(version) {\r\n    SDK_VERSION = version;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n */\r\nclass DOMStorageWrapper {\r\n    /**\r\n     * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */\r\n    constructor(domStorage_) {\r\n        this.domStorage_ = domStorage_;\r\n        // Use a prefix to avoid collisions with other stuff saved by the app.\r\n        this.prefix_ = 'firebase:';\r\n    }\r\n    /**\r\n     * @param key - The key to save the value under\r\n     * @param value - The value being stored, or null to remove the key.\r\n     */\r\n    set(key, value) {\r\n        if (value == null) {\r\n            this.domStorage_.removeItem(this.prefixedName_(key));\r\n        }\r\n        else {\r\n            this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\r\n        }\r\n    }\r\n    /**\r\n     * @returns The value that was stored under this key, or null\r\n     */\r\n    get(key) {\r\n        const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\r\n        if (storedVal == null) {\r\n            return null;\r\n        }\r\n        else {\r\n            return jsonEval(storedVal);\r\n        }\r\n    }\r\n    remove(key) {\r\n        this.domStorage_.removeItem(this.prefixedName_(key));\r\n    }\r\n    prefixedName_(name) {\r\n        return this.prefix_ + name;\r\n    }\r\n    toString() {\r\n        return this.domStorage_.toString();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n */\r\nclass MemoryStorage {\r\n    constructor() {\r\n        this.cache_ = {};\r\n        this.isInMemoryStorage = true;\r\n    }\r\n    set(key, value) {\r\n        if (value == null) {\r\n            delete this.cache_[key];\r\n        }\r\n        else {\r\n            this.cache_[key] = value;\r\n        }\r\n    }\r\n    get(key) {\r\n        if (contains(this.cache_, key)) {\r\n            return this.cache_[key];\r\n        }\r\n        return null;\r\n    }\r\n    remove(key) {\r\n        delete this.cache_[key];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param domStorageName - Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @returns Turning off type information until a common interface is defined.\r\n */\r\nconst createStoragefor = function (domStorageName) {\r\n    try {\r\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\r\n        // so it must be inside the try/catch.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window[domStorageName] !== 'undefined') {\r\n            // Need to test cache. Just because it's here doesn't mean it works\r\n            const domStorage = window[domStorageName];\r\n            domStorage.setItem('firebase:sentinel', 'cache');\r\n            domStorage.removeItem('firebase:sentinel');\r\n            return new DOMStorageWrapper(domStorage);\r\n        }\r\n    }\r\n    catch (e) { }\r\n    // Failed to create wrapper.  Just return in-memory storage.\r\n    // TODO: log?\r\n    return new MemoryStorage();\r\n};\r\n/** A storage object that lasts across sessions */\r\nconst PersistentStorage = createStoragefor('localStorage');\r\n/** A storage object that only lasts one session */\r\nconst SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logClient = new Logger('@firebase/database');\r\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n */\r\nconst LUIDGenerator = (function () {\r\n    let id = 1;\r\n    return function () {\r\n        return id++;\r\n    };\r\n})();\r\n/**\r\n * Sha1 hash of the input string\r\n * @param str - The string to hash\r\n * @returns {!string} The resulting hash\r\n */\r\nconst sha1 = function (str) {\r\n    const utf8Bytes = stringToByteArray(str);\r\n    const sha1 = new Sha1();\r\n    sha1.update(utf8Bytes);\r\n    const sha1Bytes = sha1.digest();\r\n    return base64.encodeByteArray(sha1Bytes);\r\n};\r\nconst buildLogMessage_ = function (...varArgs) {\r\n    let message = '';\r\n    for (let i = 0; i < varArgs.length; i++) {\r\n        const arg = varArgs[i];\r\n        if (Array.isArray(arg) ||\r\n            (arg &&\r\n                typeof arg === 'object' &&\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                typeof arg.length === 'number')) {\r\n            message += buildLogMessage_.apply(null, arg);\r\n        }\r\n        else if (typeof arg === 'object') {\r\n            message += stringify(arg);\r\n        }\r\n        else {\r\n            message += arg;\r\n        }\r\n        message += ' ';\r\n    }\r\n    return message;\r\n};\r\n/**\r\n * Use this for all debug messages in Firebase.\r\n */\r\nlet logger = null;\r\n/**\r\n * Flag to check for log availability on first log message\r\n */\r\nlet firstLog_ = true;\r\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param logger_ - A flag to turn on logging, or a custom logger\r\n * @param persistent - Whether or not to persist logging settings across refreshes\r\n */\r\nconst enableLogging$1 = function (logger_, persistent) {\r\n    assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\r\n    if (logger_ === true) {\r\n        logClient.logLevel = LogLevel.VERBOSE;\r\n        logger = logClient.log.bind(logClient);\r\n        if (persistent) {\r\n            SessionStorage.set('logging_enabled', true);\r\n        }\r\n    }\r\n    else if (typeof logger_ === 'function') {\r\n        logger = logger_;\r\n    }\r\n    else {\r\n        logger = null;\r\n        SessionStorage.remove('logging_enabled');\r\n    }\r\n};\r\nconst log = function (...varArgs) {\r\n    if (firstLog_ === true) {\r\n        firstLog_ = false;\r\n        if (logger === null && SessionStorage.get('logging_enabled') === true) {\r\n            enableLogging$1(true);\r\n        }\r\n    }\r\n    if (logger) {\r\n        const message = buildLogMessage_.apply(null, varArgs);\r\n        logger(message);\r\n    }\r\n};\r\nconst logWrapper = function (prefix) {\r\n    return function (...varArgs) {\r\n        log(prefix, ...varArgs);\r\n    };\r\n};\r\nconst error = function (...varArgs) {\r\n    const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\r\n    logClient.error(message);\r\n};\r\nconst fatal = function (...varArgs) {\r\n    const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\r\n    logClient.error(message);\r\n    throw new Error(message);\r\n};\r\nconst warn = function (...varArgs) {\r\n    const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\r\n    logClient.warn(message);\r\n};\r\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\r\nconst warnIfPageIsSecure = function () {\r\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\r\n    if (typeof window !== 'undefined' &&\r\n        window.location &&\r\n        window.location.protocol &&\r\n        window.location.protocol.indexOf('https:') !== -1) {\r\n        warn('Insecure Firebase access from a secure page. ' +\r\n            'Please use https in calls to new Firebase().');\r\n    }\r\n};\r\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n */\r\nconst isInvalidJSONNumber = function (data) {\r\n    return (typeof data === 'number' &&\r\n        (data !== data || // NaN\r\n            data === Number.POSITIVE_INFINITY ||\r\n            data === Number.NEGATIVE_INFINITY));\r\n};\r\nconst executeWhenDOMReady = function (fn) {\r\n    if (isNodeSdk() || document.readyState === 'complete') {\r\n        fn();\r\n    }\r\n    else {\r\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\r\n        // fire before onload), but fall back to onload.\r\n        let called = false;\r\n        const wrappedFn = function () {\r\n            if (!document.body) {\r\n                setTimeout(wrappedFn, Math.floor(10));\r\n                return;\r\n            }\r\n            if (!called) {\r\n                called = true;\r\n                fn();\r\n            }\r\n        };\r\n        if (document.addEventListener) {\r\n            document.addEventListener('DOMContentLoaded', wrappedFn, false);\r\n            // fallback to onload.\r\n            window.addEventListener('load', wrappedFn, false);\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (document.attachEvent) {\r\n            // IE.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            document.attachEvent('onreadystatechange', () => {\r\n                if (document.readyState === 'complete') {\r\n                    wrappedFn();\r\n                }\r\n            });\r\n            // fallback to onload.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            window.attachEvent('onload', wrappedFn);\r\n            // jQuery has an extra hack for IE that we could employ (based on\r\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\r\n            // I'm hoping we don't need it.\r\n        }\r\n    }\r\n};\r\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n */\r\nconst MIN_NAME = '[MIN_NAME]';\r\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n */\r\nconst MAX_NAME = '[MAX_NAME]';\r\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n */\r\nconst nameCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a === MIN_NAME || b === MAX_NAME) {\r\n        return -1;\r\n    }\r\n    else if (b === MIN_NAME || a === MAX_NAME) {\r\n        return 1;\r\n    }\r\n    else {\r\n        const aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\r\n        if (aAsInt !== null) {\r\n            if (bAsInt !== null) {\r\n                return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (bAsInt !== null) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return a < b ? -1 : 1;\r\n        }\r\n    }\r\n};\r\n/**\r\n * @returns {!number} comparison result.\r\n */\r\nconst stringCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n};\r\nconst requireKey = function (key, obj) {\r\n    if (obj && key in obj) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\r\n    }\r\n};\r\nconst ObjectToUniqueKey = function (obj) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return stringify(obj);\r\n    }\r\n    const keys = [];\r\n    // eslint-disable-next-line guard-for-in\r\n    for (const k in obj) {\r\n        keys.push(k);\r\n    }\r\n    // Export as json, but with the keys sorted.\r\n    keys.sort();\r\n    let key = '{';\r\n    for (let i = 0; i < keys.length; i++) {\r\n        if (i !== 0) {\r\n            key += ',';\r\n        }\r\n        key += stringify(keys[i]);\r\n        key += ':';\r\n        key += ObjectToUniqueKey(obj[keys[i]]);\r\n    }\r\n    key += '}';\r\n    return key;\r\n};\r\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param str - The string\r\n * @param segsize - The maximum number of chars in the string.\r\n * @returns The string, split into appropriately-sized chunks\r\n */\r\nconst splitStringBySize = function (str, segsize) {\r\n    const len = str.length;\r\n    if (len <= segsize) {\r\n        return [str];\r\n    }\r\n    const dataSegs = [];\r\n    for (let c = 0; c < len; c += segsize) {\r\n        if (c + segsize > len) {\r\n            dataSegs.push(str.substring(c, len));\r\n        }\r\n        else {\r\n            dataSegs.push(str.substring(c, c + segsize));\r\n        }\r\n    }\r\n    return dataSegs;\r\n};\r\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj - The object or array to iterate over\r\n * @param fn - The function to apply\r\n */\r\nfunction each(obj, fn) {\r\n    for (const key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n            fn(key, obj[key]);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param v - A double\r\n *\r\n */\r\nconst doubleToIEEE754String = function (v) {\r\n    assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\r\n    const ebits = 11, fbits = 52;\r\n    const bias = (1 << (ebits - 1)) - 1;\r\n    let s, e, f, ln, i;\r\n    // Compute sign, exponent, fraction\r\n    // Skip NaN / Infinity handling --MJL.\r\n    if (v === 0) {\r\n        e = 0;\r\n        f = 0;\r\n        s = 1 / v === -Infinity ? 1 : 0;\r\n    }\r\n    else {\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n        if (v >= Math.pow(2, 1 - bias)) {\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }\r\n        else {\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n    // Pack sign, exponent, fraction\r\n    const bits = [];\r\n    for (i = fbits; i; i -= 1) {\r\n        bits.push(f % 2 ? 1 : 0);\r\n        f = Math.floor(f / 2);\r\n    }\r\n    for (i = ebits; i; i -= 1) {\r\n        bits.push(e % 2 ? 1 : 0);\r\n        e = Math.floor(e / 2);\r\n    }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    const str = bits.join('');\r\n    // Return the data as a hex string. --MJL\r\n    let hexByteString = '';\r\n    for (i = 0; i < 64; i += 8) {\r\n        let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\r\n        if (hexByte.length === 1) {\r\n            hexByte = '0' + hexByte;\r\n        }\r\n        hexByteString = hexByteString + hexByte;\r\n    }\r\n    return hexByteString.toLowerCase();\r\n};\r\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n */\r\nconst isChromeExtensionContentScript = function () {\r\n    return !!(typeof window === 'object' &&\r\n        window['chrome'] &&\r\n        window['chrome']['extension'] &&\r\n        !/^chrome/.test(window.location.href));\r\n};\r\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n */\r\nconst isWindowsStoreApp = function () {\r\n    // Check for the presence of a couple WinRT globals\r\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\r\n};\r\n/**\r\n * Converts a server error code to a Javascript Error\r\n */\r\nfunction errorForServerCode(code, query) {\r\n    let reason = 'Unknown Error';\r\n    if (code === 'too_big') {\r\n        reason =\r\n            'The data requested exceeds the maximum size ' +\r\n                'that can be accessed with a single request.';\r\n    }\r\n    else if (code === 'permission_denied') {\r\n        reason = \"Client doesn't have permission to access the desired data.\";\r\n    }\r\n    else if (code === 'unavailable') {\r\n        reason = 'The service is unavailable';\r\n    }\r\n    const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    error.code = code.toUpperCase();\r\n    return error;\r\n}\r\n/**\r\n * Used to test for integer-looking strings\r\n */\r\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\r\n/**\r\n * For use in keys, the minimum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MIN = -2147483648;\r\n/**\r\n * For use in kyes, the maximum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MAX = 2147483647;\r\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n */\r\nconst tryParseInt = function (str) {\r\n    if (INTEGER_REGEXP_.test(str)) {\r\n        const intVal = Number(str);\r\n        if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\r\n            return intVal;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param fn - The code to guard.\r\n */\r\nconst exceptionGuard = function (fn) {\r\n    try {\r\n        fn();\r\n    }\r\n    catch (e) {\r\n        // Re-throw exception when it's safe.\r\n        setTimeout(() => {\r\n            // It used to be that \"throw e\" would result in a good console error with\r\n            // relevant context, but as of Chrome 39, you just get the firebase.js\r\n            // file/line number where we re-throw it, which is useless. So we log\r\n            // e.stack explicitly.\r\n            const stack = e.stack || '';\r\n            warn('Exception was thrown by user callback.', stack);\r\n            throw e;\r\n        }, Math.floor(0));\r\n    }\r\n};\r\n/**\r\n * @returns {boolean} true if we think we're currently being crawled.\r\n */\r\nconst beingCrawled = function () {\r\n    const userAgent = (typeof window === 'object' &&\r\n        window['navigator'] &&\r\n        window['navigator']['userAgent']) ||\r\n        '';\r\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\r\n    // believe to support JavaScript/AJAX rendering.\r\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\r\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\r\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\r\n};\r\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param fn - Function to run.\r\n * @param time - Milliseconds to wait before running.\r\n * @returns The setTimeout() return value.\r\n */\r\nconst setTimeoutNonBlocking = function (fn, time) {\r\n    const timeout = setTimeout(fn, time);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if (typeof timeout === 'object' && timeout['unref']) {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        timeout['unref']();\r\n    }\r\n    return timeout;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */\r\nclass AppCheckTokenProvider {\r\n    constructor(appName_, appCheckProvider) {\r\n        this.appName_ = appName_;\r\n        this.appCheckProvider = appCheckProvider;\r\n        this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({ optional: true });\r\n        if (!this.appCheck) {\r\n            appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => (this.appCheck = appCheck));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.appCheck) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAppCheck. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // AppCheck and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.appCheck) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.appCheck.getToken(forceRefresh);\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        var _a;\r\n        (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        warn(`Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\r\n            'are invalid. This usually indicates your app was not initialized correctly.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\r\nclass FirebaseAuthTokenProvider {\r\n    constructor(appName_, firebaseOptions_, authProvider_) {\r\n        this.appName_ = appName_;\r\n        this.firebaseOptions_ = firebaseOptions_;\r\n        this.authProvider_ = authProvider_;\r\n        this.auth_ = null;\r\n        this.auth_ = authProvider_.getImmediate({ optional: true });\r\n        if (!this.auth_) {\r\n            authProvider_.onInit(auth => (this.auth_ = auth));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.auth_) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAuth. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // Auth and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.auth_) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.auth_.getToken(forceRefresh).catch(error => {\r\n            // TODO: Need to figure out all the cases this is raised and whether\r\n            // this makes sense.\r\n            if (error && error.code === 'auth/token-not-initialized') {\r\n                log('Got auth/token-not-initialized error.  Treating as null token.');\r\n                return null;\r\n            }\r\n            else {\r\n                return Promise.reject(error);\r\n            }\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // TODO: We might want to wrap the listener and call it with no args to\r\n        // avoid a leaky abstraction, but that makes removing the listener harder.\r\n        if (this.auth_) {\r\n            this.auth_.addAuthTokenListener(listener);\r\n        }\r\n        else {\r\n            this.authProvider_\r\n                .get()\r\n                .then(auth => auth.addAuthTokenListener(listener));\r\n        }\r\n    }\r\n    removeTokenChangeListener(listener) {\r\n        this.authProvider_\r\n            .get()\r\n            .then(auth => auth.removeAuthTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        let errorMessage = 'Provided authentication credentials for the app named \"' +\r\n            this.appName_ +\r\n            '\" are invalid. This usually indicates your app was not ' +\r\n            'initialized correctly. ';\r\n        if ('credential' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"credential\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else if ('serviceAccount' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else {\r\n            errorMessage +=\r\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\r\n                    'initializeApp() match the values provided for your app at ' +\r\n                    'https://console.firebase.google.com/.';\r\n        }\r\n        warn(errorMessage);\r\n    }\r\n}\r\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\r\nclass EmulatorTokenProvider {\r\n    constructor(accessToken) {\r\n        this.accessToken = accessToken;\r\n    }\r\n    getToken(forceRefresh) {\r\n        return Promise.resolve({\r\n            accessToken: this.accessToken\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // Invoke the listener immediately to match the behavior in Firebase Auth\r\n        // (see packages/auth/src/auth.js#L1807)\r\n        listener(this.accessToken);\r\n    }\r\n    removeTokenChangeListener(listener) { }\r\n    notifyForInvalidToken() { }\r\n}\r\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\r\nEmulatorTokenProvider.OWNER = 'owner';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PROTOCOL_VERSION = '5';\r\nconst VERSION_PARAM = 'v';\r\nconst TRANSPORT_SESSION_PARAM = 's';\r\nconst REFERER_PARAM = 'r';\r\nconst FORGE_REF = 'f';\r\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\r\n// firebase.corp.google.com\r\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\r\nconst LAST_SESSION_PARAM = 'ls';\r\nconst APPLICATION_ID_PARAM = 'p';\r\nconst APP_CHECK_TOKEN_PARAM = 'ac';\r\nconst WEBSOCKET = 'websocket';\r\nconst LONG_POLLING = 'long_polling';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A class that holds metadata about a Repo object\r\n */\r\nclass RepoInfo {\r\n    /**\r\n     * @param host - Hostname portion of the url for the repo\r\n     * @param secure - Whether or not this repo is accessed over ssl\r\n     * @param namespace - The namespace represented by the repo\r\n     * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param nodeAdmin - Whether this instance uses Admin SDK credentials\r\n     * @param persistenceKey - Override the default session persistence storage key\r\n     */\r\n    constructor(host, secure, namespace, webSocketOnly, nodeAdmin = false, persistenceKey = '', includeNamespaceInQueryParams = false) {\r\n        this.secure = secure;\r\n        this.namespace = namespace;\r\n        this.webSocketOnly = webSocketOnly;\r\n        this.nodeAdmin = nodeAdmin;\r\n        this.persistenceKey = persistenceKey;\r\n        this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\r\n        this._host = host.toLowerCase();\r\n        this._domain = this._host.substr(this._host.indexOf('.') + 1);\r\n        this.internalHost =\r\n            PersistentStorage.get('host:' + host) || this._host;\r\n    }\r\n    isCacheableHost() {\r\n        return this.internalHost.substr(0, 2) === 's-';\r\n    }\r\n    isCustomHost() {\r\n        return (this._domain !== 'firebaseio.com' &&\r\n            this._domain !== 'firebaseio-demo.com');\r\n    }\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    set host(newHost) {\r\n        if (newHost !== this.internalHost) {\r\n            this.internalHost = newHost;\r\n            if (this.isCacheableHost()) {\r\n                PersistentStorage.set('host:' + this._host, this.internalHost);\r\n            }\r\n        }\r\n    }\r\n    toString() {\r\n        let str = this.toURLString();\r\n        if (this.persistenceKey) {\r\n            str += '<' + this.persistenceKey + '>';\r\n        }\r\n        return str;\r\n    }\r\n    toURLString() {\r\n        const protocol = this.secure ? 'https://' : 'http://';\r\n        const query = this.includeNamespaceInQueryParams\r\n            ? `?ns=${this.namespace}`\r\n            : '';\r\n        return `${protocol}${this.host}/${query}`;\r\n    }\r\n}\r\nfunction repoInfoNeedsQueryParam(repoInfo) {\r\n    return (repoInfo.host !== repoInfo.internalHost ||\r\n        repoInfo.isCustomHost() ||\r\n        repoInfo.includeNamespaceInQueryParams);\r\n}\r\n/**\r\n * Returns the websocket URL for this repo\r\n * @param repoInfo - RepoInfo object\r\n * @param type - of connection\r\n * @param params - list\r\n * @returns The URL for this repo\r\n */\r\nfunction repoInfoConnectionURL(repoInfo, type, params) {\r\n    assert(typeof type === 'string', 'typeof type must == string');\r\n    assert(typeof params === 'object', 'typeof params must == object');\r\n    let connURL;\r\n    if (type === WEBSOCKET) {\r\n        connURL =\r\n            (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\r\n    }\r\n    else if (type === LONG_POLLING) {\r\n        connURL =\r\n            (repoInfo.secure ? 'https://' : 'http://') +\r\n                repoInfo.internalHost +\r\n                '/.lp?';\r\n    }\r\n    else {\r\n        throw new Error('Unknown connection type: ' + type);\r\n    }\r\n    if (repoInfoNeedsQueryParam(repoInfo)) {\r\n        params['ns'] = repoInfo.namespace;\r\n    }\r\n    const pairs = [];\r\n    each(params, (key, value) => {\r\n        pairs.push(key + '=' + value);\r\n    });\r\n    return connURL + pairs.join('&');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Tracks a collection of stats.\r\n */\r\nclass StatsCollection {\r\n    constructor() {\r\n        this.counters_ = {};\r\n    }\r\n    incrementCounter(name, amount = 1) {\r\n        if (!contains(this.counters_, name)) {\r\n            this.counters_[name] = 0;\r\n        }\r\n        this.counters_[name] += amount;\r\n    }\r\n    get() {\r\n        return deepCopy(this.counters_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst collections = {};\r\nconst reporters = {};\r\nfunction statsManagerGetCollection(repoInfo) {\r\n    const hashString = repoInfo.toString();\r\n    if (!collections[hashString]) {\r\n        collections[hashString] = new StatsCollection();\r\n    }\r\n    return collections[hashString];\r\n}\r\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\r\n    const hashString = repoInfo.toString();\r\n    if (!reporters[hashString]) {\r\n        reporters[hashString] = creatorFunction();\r\n    }\r\n    return reporters[hashString];\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n */\r\nclass PacketReceiver {\r\n    /**\r\n     * @param onMessage_\r\n     */\r\n    constructor(onMessage_) {\r\n        this.onMessage_ = onMessage_;\r\n        this.pendingResponses = [];\r\n        this.currentResponseNum = 0;\r\n        this.closeAfterResponse = -1;\r\n        this.onClose = null;\r\n    }\r\n    closeAfter(responseNum, callback) {\r\n        this.closeAfterResponse = responseNum;\r\n        this.onClose = callback;\r\n        if (this.closeAfterResponse < this.currentResponseNum) {\r\n            this.onClose();\r\n            this.onClose = null;\r\n        }\r\n    }\r\n    /**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     */\r\n    handleResponse(requestNum, data) {\r\n        this.pendingResponses[requestNum] = data;\r\n        while (this.pendingResponses[this.currentResponseNum]) {\r\n            const toProcess = this.pendingResponses[this.currentResponseNum];\r\n            delete this.pendingResponses[this.currentResponseNum];\r\n            for (let i = 0; i < toProcess.length; ++i) {\r\n                if (toProcess[i]) {\r\n                    exceptionGuard(() => {\r\n                        this.onMessage_(toProcess[i]);\r\n                    });\r\n                }\r\n            }\r\n            if (this.currentResponseNum === this.closeAfterResponse) {\r\n                if (this.onClose) {\r\n                    this.onClose();\r\n                    this.onClose = null;\r\n                }\r\n                break;\r\n            }\r\n            this.currentResponseNum++;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// URL query parameters associated with longpolling\r\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\r\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\r\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\r\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\r\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\r\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\r\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\r\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\r\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\r\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\r\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\r\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\r\n//Data size constants.\r\n//TODO: Perf: the maximum length actually differs from browser to browser.\r\n// We should check what browser we're on and set accordingly.\r\nconst MAX_URL_DATA_SIZE = 1870;\r\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\r\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\r\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n */\r\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\r\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n */\r\nconst LP_CONNECT_TIMEOUT = 30000;\r\n/**\r\n * This class manages a single long-polling connection.\r\n */\r\nclass BrowserPollConnection {\r\n    /**\r\n     * @param connId An identifier for this connection, used for logging\r\n     * @param repoInfo The info for the endpoint to send data to.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The AppCheck token for this client.\r\n     * @param authToken The AuthToken to use for this connection.\r\n     * @param transportSessionId Optional transportSessionid if we are\r\n     * reconnecting for an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if the PersistentConnection has\r\n     * already created a connection previously\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.repoInfo = repoInfo;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.transportSessionId = transportSessionId;\r\n        this.lastSessionId = lastSessionId;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.everConnected_ = false;\r\n        this.log_ = logWrapper(connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.urlFn = (params) => {\r\n            // Always add the token if we have one.\r\n            if (this.appCheckToken) {\r\n                params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\r\n        };\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.curSegmentNum = 0;\r\n        this.onDisconnect_ = onDisconnect;\r\n        this.myPacketOrderer = new PacketReceiver(onMessage);\r\n        this.isClosed_ = false;\r\n        this.connectTimeoutTimer_ = setTimeout(() => {\r\n            this.log_('Timed out trying to connect.');\r\n            // Make sure we clear the host cache\r\n            this.onClosed_();\r\n            this.connectTimeoutTimer_ = null;\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(LP_CONNECT_TIMEOUT));\r\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\r\n        executeWhenDOMReady(() => {\r\n            if (this.isClosed_) {\r\n                return;\r\n            }\r\n            //Set up a callback that gets triggered once a connection is set up.\r\n            this.scriptTagHolder = new FirebaseIFrameScriptHolder((...args) => {\r\n                const [command, arg1, arg2, arg3, arg4] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                if (!this.scriptTagHolder) {\r\n                    return; // we closed the connection.\r\n                }\r\n                if (this.connectTimeoutTimer_) {\r\n                    clearTimeout(this.connectTimeoutTimer_);\r\n                    this.connectTimeoutTimer_ = null;\r\n                }\r\n                this.everConnected_ = true;\r\n                if (command === FIREBASE_LONGPOLL_START_PARAM) {\r\n                    this.id = arg1;\r\n                    this.password = arg2;\r\n                }\r\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\r\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\r\n                    if (arg1) {\r\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\r\n                        // through our already open polls), so don't send any more.\r\n                        this.scriptTagHolder.sendNewPolls = false;\r\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\r\n                        // all of the responses up to this one before closing\r\n                        this.myPacketOrderer.closeAfter(arg1, () => {\r\n                            this.onClosed_();\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.onClosed_();\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Unrecognized command received: ' + command);\r\n                }\r\n            }, (...args) => {\r\n                const [pN, data] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                this.myPacketOrderer.handleResponse(pN, data);\r\n            }, () => {\r\n                this.onClosed_();\r\n            }, this.urlFn);\r\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\r\n            //from cache.\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\r\n            if (this.scriptTagHolder.uniqueCallbackIdentifier) {\r\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\r\n                    this.scriptTagHolder.uniqueCallbackIdentifier;\r\n            }\r\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n            if (this.transportSessionId) {\r\n                urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\r\n            }\r\n            if (this.lastSessionId) {\r\n                urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\r\n            }\r\n            if (this.applicationId) {\r\n                urlParams[APPLICATION_ID_PARAM] = this.applicationId;\r\n            }\r\n            if (this.appCheckToken) {\r\n                urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            if (typeof location !== 'undefined' &&\r\n                location.hostname &&\r\n                FORGE_DOMAIN_RE.test(location.hostname)) {\r\n                urlParams[REFERER_PARAM] = FORGE_REF;\r\n            }\r\n            const connectURL = this.urlFn(urlParams);\r\n            this.log_('Connecting via long-poll to ' + connectURL);\r\n            this.scriptTagHolder.addTag(connectURL, () => {\r\n                /* do nothing */\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */\r\n    start() {\r\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\r\n        this.addDisconnectPingFrame(this.id, this.password);\r\n    }\r\n    /**\r\n     * Forces long polling to be considered as a potential transport\r\n     */\r\n    static forceAllow() {\r\n        BrowserPollConnection.forceAllow_ = true;\r\n    }\r\n    /**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */\r\n    static forceDisallow() {\r\n        BrowserPollConnection.forceDisallow_ = true;\r\n    }\r\n    // Static method, use string literal so it can be accessed in a generic way\r\n    static isAvailable() {\r\n        if (isNodeSdk()) {\r\n            return false;\r\n        }\r\n        else if (BrowserPollConnection.forceAllow_) {\r\n            return true;\r\n        }\r\n        else {\r\n            // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\r\n            // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\r\n            return (!BrowserPollConnection.forceDisallow_ &&\r\n                typeof document !== 'undefined' &&\r\n                document.createElement != null &&\r\n                !isChromeExtensionContentScript() &&\r\n                !isWindowsStoreApp());\r\n        }\r\n    }\r\n    /**\r\n     * No-op for polling\r\n     */\r\n    markConnectionHealthy() { }\r\n    /**\r\n     * Stops polling and cleans up the iframe\r\n     */\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.scriptTagHolder) {\r\n            this.scriptTagHolder.close();\r\n            this.scriptTagHolder = null;\r\n        }\r\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\r\n        if (this.myDisconnFrame) {\r\n            document.body.removeChild(this.myDisconnFrame);\r\n            this.myDisconnFrame = null;\r\n        }\r\n        if (this.connectTimeoutTimer_) {\r\n            clearTimeout(this.connectTimeoutTimer_);\r\n            this.connectTimeoutTimer_ = null;\r\n        }\r\n    }\r\n    /**\r\n     * Triggered when this transport is closed\r\n     */\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is closing itself');\r\n            this.shutdown_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_(this.everConnected_);\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is being closed.');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param data - The JSON data to transmit.\r\n     */\r\n    send(data) {\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //first, lets get the base64-encoded data\r\n        const base64data = base64Encode(dataStr);\r\n        //We can only fit a certain amount in each URL, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\r\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\r\n        //of segments so that we can reassemble the packet on the server.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\r\n            this.curSegmentNum++;\r\n        }\r\n    }\r\n    /**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     */\r\n    addDisconnectPingFrame(id, pw) {\r\n        if (isNodeSdk()) {\r\n            return;\r\n        }\r\n        this.myDisconnFrame = document.createElement('iframe');\r\n        const urlParams = {};\r\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\r\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\r\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\r\n        this.myDisconnFrame.src = this.urlFn(urlParams);\r\n        this.myDisconnFrame.style.display = 'none';\r\n        document.body.appendChild(this.myDisconnFrame);\r\n    }\r\n    /**\r\n     * Used to track the bytes received by this client\r\n     */\r\n    incrementIncomingBytes_(args) {\r\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\r\n        const bytesReceived = stringify(args).length;\r\n        this.bytesReceived += bytesReceived;\r\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\r\n    }\r\n}\r\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n *********************************************************************************************/\r\nclass FirebaseIFrameScriptHolder {\r\n    /**\r\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */\r\n    constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.urlFn = urlFn;\r\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\r\n        //problems in some browsers.\r\n        this.outstandingRequests = new Set();\r\n        //A queue of the pending segments waiting for transmission to the server.\r\n        this.pendingSegs = [];\r\n        //A serial number. We use this for two things:\r\n        // 1) A way to ensure the browser doesn't cache responses to polls\r\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\r\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\r\n        //    JSONP code in the order it was added to the iframe.\r\n        this.currentSerial = Math.floor(Math.random() * 100000000);\r\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\r\n        // incoming data from the server that we're waiting for).\r\n        this.sendNewPolls = true;\r\n        if (!isNodeSdk()) {\r\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\r\n            //iframes where we put the long-polling script tags. We have two callbacks:\r\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\r\n            //   2) Message Callback - Triggered when new data arrives.\r\n            this.uniqueCallbackIdentifier = LUIDGenerator();\r\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\r\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\r\n                onMessageCB;\r\n            //Create an iframe for us to add script tags to.\r\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\r\n            // Set the iframe's contents.\r\n            let script = '';\r\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\r\n            // for ie9, but ie8 needs to do it again in the document itself.\r\n            if (this.myIFrame.src &&\r\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\r\n                const currentDomain = document.domain;\r\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\r\n            }\r\n            const iframeContents = '<html><body>' + script + '</body></html>';\r\n            try {\r\n                this.myIFrame.doc.open();\r\n                this.myIFrame.doc.write(iframeContents);\r\n                this.myIFrame.doc.close();\r\n            }\r\n            catch (e) {\r\n                log('frame writing exception');\r\n                if (e.stack) {\r\n                    log(e.stack);\r\n                }\r\n                log(e);\r\n            }\r\n        }\r\n        else {\r\n            this.commandCB = commandCB;\r\n            this.onMessageCB = onMessageCB;\r\n        }\r\n    }\r\n    /**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     */\r\n    static createIFrame_() {\r\n        const iframe = document.createElement('iframe');\r\n        iframe.style.display = 'none';\r\n        // This is necessary in order to initialize the document inside the iframe\r\n        if (document.body) {\r\n            document.body.appendChild(iframe);\r\n            try {\r\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\r\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\r\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\r\n                const a = iframe.contentWindow.document;\r\n                if (!a) {\r\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\r\n                    log('No IE domain setting required');\r\n                }\r\n            }\r\n            catch (e) {\r\n                const domain = document.domain;\r\n                iframe.src =\r\n                    \"javascript:void((function(){document.open();document.domain='\" +\r\n                        domain +\r\n                        \"';document.close();})())\";\r\n            }\r\n        }\r\n        else {\r\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\r\n            // never gets hit.\r\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\r\n        }\r\n        // Get the document of the iframe in a browser-specific way.\r\n        if (iframe.contentDocument) {\r\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\r\n        }\r\n        else if (iframe.contentWindow) {\r\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (iframe.document) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            iframe.doc = iframe.document; //others?\r\n        }\r\n        return iframe;\r\n    }\r\n    /**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */\r\n    close() {\r\n        //Mark this iframe as dead, so no new requests are sent.\r\n        this.alive = false;\r\n        if (this.myIFrame) {\r\n            //We have to actually remove all of the html inside this iframe before removing it from the\r\n            //window, or IE will continue loading and executing the script tags we've already added, which\r\n            //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\r\n            this.myIFrame.doc.body.innerHTML = '';\r\n            setTimeout(() => {\r\n                if (this.myIFrame !== null) {\r\n                    document.body.removeChild(this.myIFrame);\r\n                    this.myIFrame = null;\r\n                }\r\n            }, Math.floor(0));\r\n        }\r\n        // Protect from being called recursively.\r\n        const onDisconnect = this.onDisconnect;\r\n        if (onDisconnect) {\r\n            this.onDisconnect = null;\r\n            onDisconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param id - The ID of this connection\r\n     * @param pw - The password for this connection\r\n     */\r\n    startLongPoll(id, pw) {\r\n        this.myID = id;\r\n        this.myPW = pw;\r\n        this.alive = true;\r\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\r\n        while (this.newRequest_()) { }\r\n    }\r\n    /**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */\r\n    newRequest_() {\r\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\r\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\r\n        // close the old request.\r\n        if (this.alive &&\r\n            this.sendNewPolls &&\r\n            this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\r\n            //construct our url\r\n            this.currentSerial++;\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\r\n            let theURL = this.urlFn(urlParams);\r\n            //Now add as much data as we can.\r\n            let curDataString = '';\r\n            let i = 0;\r\n            while (this.pendingSegs.length > 0) {\r\n                //first, lets see if the next segment will fit.\r\n                const nextSeg = this.pendingSegs[0];\r\n                if (nextSeg.d.length +\r\n                    SEG_HEADER_SIZE +\r\n                    curDataString.length <=\r\n                    MAX_URL_DATA_SIZE) {\r\n                    //great, the segment will fit. Lets append it.\r\n                    const theSeg = this.pendingSegs.shift();\r\n                    curDataString =\r\n                        curDataString +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.seg +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.ts +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_DATA_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.d;\r\n                    i++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            theURL = theURL + curDataString;\r\n            this.addLongPollTag_(theURL, this.currentSerial);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */\r\n    enqueueSegment(segnum, totalsegs, data) {\r\n        //add this to the queue of segments to send.\r\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\r\n        //send the data immediately if there isn't already data being transmitted, unless\r\n        //startLongPoll hasn't been called yet.\r\n        if (this.alive) {\r\n            this.newRequest_();\r\n        }\r\n    }\r\n    /**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param url - The URL of the script tag.\r\n     * @param serial - The serial number of the request.\r\n     */\r\n    addLongPollTag_(url, serial) {\r\n        //remember that we sent this request.\r\n        this.outstandingRequests.add(serial);\r\n        const doNewRequest = () => {\r\n            this.outstandingRequests.delete(serial);\r\n            this.newRequest_();\r\n        };\r\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\r\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\r\n        const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\r\n        const readyStateCB = () => {\r\n            // Request completed.  Cancel the keepalive.\r\n            clearTimeout(keepaliveTimeout);\r\n            // Trigger a new request so we can continue receiving data.\r\n            doNewRequest();\r\n        };\r\n        this.addTag(url, readyStateCB);\r\n    }\r\n    /**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param url - The URL for the script tag source.\r\n     * @param loadCB - A callback to be triggered once the script has loaded.\r\n     */\r\n    addTag(url, loadCB) {\r\n        if (isNodeSdk()) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            this.doNodeLongPoll(url, loadCB);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                try {\r\n                    // if we're already closed, don't add this poll\r\n                    if (!this.sendNewPolls) {\r\n                        return;\r\n                    }\r\n                    const newScript = this.myIFrame.doc.createElement('script');\r\n                    newScript.type = 'text/javascript';\r\n                    newScript.async = true;\r\n                    newScript.src = url;\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    newScript.onload = newScript.onreadystatechange =\r\n                        function () {\r\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                            const rstate = newScript.readyState;\r\n                            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\r\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                                newScript.onload = newScript.onreadystatechange = null;\r\n                                if (newScript.parentNode) {\r\n                                    newScript.parentNode.removeChild(newScript);\r\n                                }\r\n                                loadCB();\r\n                            }\r\n                        };\r\n                    newScript.onerror = () => {\r\n                        log('Long-poll script failed to load: ' + url);\r\n                        this.sendNewPolls = false;\r\n                        this.close();\r\n                    };\r\n                    this.myIFrame.doc.body.appendChild(newScript);\r\n                }\r\n                catch (e) {\r\n                    // TODO: we should make this error visible somehow\r\n                }\r\n            }, Math.floor(1));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\r\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\r\nlet WebSocketImpl = null;\r\nif (typeof MozWebSocket !== 'undefined') {\r\n    WebSocketImpl = MozWebSocket;\r\n}\r\nelse if (typeof WebSocket !== 'undefined') {\r\n    WebSocketImpl = WebSocket;\r\n}\r\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n */\r\nclass WebSocketConnection {\r\n    /**\r\n     * @param connId identifier for this transport\r\n     * @param repoInfo The info for the websocket endpoint.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The App Check Token for this client.\r\n     * @param authToken The Auth Token for this client.\r\n     * @param transportSessionId Optional transportSessionId if this is connecting\r\n     * to an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if there was a previous\r\n     * connection\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.keepaliveTimer = null;\r\n        this.frames = null;\r\n        this.totalFrames = 0;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.log_ = logWrapper(this.connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken);\r\n        this.nodeAdmin = repoInfo.nodeAdmin;\r\n    }\r\n    /**\r\n     * @param repoInfo - The info for the websocket endpoint.\r\n     * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param lastSessionId - Optional lastSessionId if there was a previous connection\r\n     * @returns connection url\r\n     */\r\n    static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken) {\r\n        const urlParams = {};\r\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n        if (!isNodeSdk() &&\r\n            typeof location !== 'undefined' &&\r\n            location.hostname &&\r\n            FORGE_DOMAIN_RE.test(location.hostname)) {\r\n            urlParams[REFERER_PARAM] = FORGE_REF;\r\n        }\r\n        if (transportSessionId) {\r\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\r\n        }\r\n        if (lastSessionId) {\r\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\r\n        }\r\n        if (appCheckToken) {\r\n            urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\r\n        }\r\n        return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.onMessage = onMessage;\r\n        this.log_('Websocket connecting to ' + this.connURL);\r\n        this.everConnected_ = false;\r\n        // Assume failure until proven otherwise.\r\n        PersistentStorage.set('previous_websocket_failure', true);\r\n        try {\r\n            if (isNodeSdk()) {\r\n                const device = this.nodeAdmin ? 'AdminNode' : 'Node';\r\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\r\n                const options = {\r\n                    headers: {\r\n                        'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\r\n                        'X-Firebase-GMPID': this.applicationId || ''\r\n                    }\r\n                };\r\n                // If using Node with admin creds, AppCheck-related checks are unnecessary.\r\n                // Note that we send the credentials here even if they aren't admin credentials, which is\r\n                // not a problem.\r\n                // Note that this header is just used to bypass appcheck, and the token should still be sent\r\n                // through the websocket connection once it is established.\r\n                if (this.authToken) {\r\n                    options.headers['Authorization'] = `Bearer ${this.authToken}`;\r\n                }\r\n                if (this.appCheckToken) {\r\n                    options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\r\n                }\r\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\r\n                const env = process['env'];\r\n                const proxy = this.connURL.indexOf('wss://') === 0\r\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\r\n                    : env['HTTP_PROXY'] || env['http_proxy'];\r\n                if (proxy) {\r\n                    options['proxy'] = { origin: proxy };\r\n                }\r\n                this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n            }\r\n            else {\r\n                const options = {\r\n                    headers: {\r\n                        'X-Firebase-GMPID': this.applicationId || '',\r\n                        'X-Firebase-AppCheck': this.appCheckToken || ''\r\n                    }\r\n                };\r\n                this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n            }\r\n        }\r\n        catch (e) {\r\n            this.log_('Error instantiating WebSocket.');\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n            return;\r\n        }\r\n        this.mySock.onopen = () => {\r\n            this.log_('Websocket connected.');\r\n            this.everConnected_ = true;\r\n        };\r\n        this.mySock.onclose = () => {\r\n            this.log_('Websocket connection was disconnected.');\r\n            this.mySock = null;\r\n            this.onClosed_();\r\n        };\r\n        this.mySock.onmessage = m => {\r\n            this.handleIncomingFrame(m);\r\n        };\r\n        this.mySock.onerror = e => {\r\n            this.log_('WebSocket error.  Closing connection.');\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n        };\r\n    }\r\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\r\n    start() { }\r\n    static forceDisallow() {\r\n        WebSocketConnection.forceDisallow_ = true;\r\n    }\r\n    static isAvailable() {\r\n        let isOldAndroid = false;\r\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n            const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\r\n            const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\r\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\r\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\r\n                    isOldAndroid = true;\r\n                }\r\n            }\r\n        }\r\n        return (!isOldAndroid &&\r\n            WebSocketImpl !== null &&\r\n            !WebSocketConnection.forceDisallow_);\r\n    }\r\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     */\r\n    static previouslyFailed() {\r\n        // If our persistent storage is actually only in-memory storage,\r\n        // we default to assuming that it previously failed to be safe.\r\n        return (PersistentStorage.isInMemoryStorage ||\r\n            PersistentStorage.get('previous_websocket_failure') === true);\r\n    }\r\n    markConnectionHealthy() {\r\n        PersistentStorage.remove('previous_websocket_failure');\r\n    }\r\n    appendFrame_(data) {\r\n        this.frames.push(data);\r\n        if (this.frames.length === this.totalFrames) {\r\n            const fullMess = this.frames.join('');\r\n            this.frames = null;\r\n            const jsonMess = jsonEval(fullMess);\r\n            //handle the message\r\n            this.onMessage(jsonMess);\r\n        }\r\n    }\r\n    /**\r\n     * @param frameCount - The number of frames we are expecting from the server\r\n     */\r\n    handleNewFrameCount_(frameCount) {\r\n        this.totalFrames = frameCount;\r\n        this.frames = [];\r\n    }\r\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @returns Any remaining data to be process, or null if there is none\r\n     */\r\n    extractFrameCount_(data) {\r\n        assert(this.frames === null, 'We already have a frame buffer');\r\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\r\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\r\n        if (data.length <= 6) {\r\n            const frameCount = Number(data);\r\n            if (!isNaN(frameCount)) {\r\n                this.handleNewFrameCount_(frameCount);\r\n                return null;\r\n            }\r\n        }\r\n        this.handleNewFrameCount_(1);\r\n        return data;\r\n    }\r\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess - The frame data\r\n     */\r\n    handleIncomingFrame(mess) {\r\n        if (this.mySock === null) {\r\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\r\n        }\r\n        const data = mess['data'];\r\n        this.bytesReceived += data.length;\r\n        this.stats_.incrementCounter('bytes_received', data.length);\r\n        this.resetKeepAlive();\r\n        if (this.frames !== null) {\r\n            // we're buffering\r\n            this.appendFrame_(data);\r\n        }\r\n        else {\r\n            // try to parse out a frame count, otherwise, assume 1 and process it\r\n            const remainingData = this.extractFrameCount_(data);\r\n            if (remainingData !== null) {\r\n                this.appendFrame_(remainingData);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Send a message to the server\r\n     * @param data - The JSON object to transmit\r\n     */\r\n    send(data) {\r\n        this.resetKeepAlive();\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\r\n        //Send the length header\r\n        if (dataSegs.length > 1) {\r\n            this.sendString_(String(dataSegs.length));\r\n        }\r\n        //Send the actual data in segments.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.sendString_(dataSegs[i]);\r\n        }\r\n    }\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.keepaliveTimer) {\r\n            clearInterval(this.keepaliveTimer);\r\n            this.keepaliveTimer = null;\r\n        }\r\n        if (this.mySock) {\r\n            this.mySock.close();\r\n            this.mySock = null;\r\n        }\r\n    }\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is closing itself');\r\n            this.shutdown_();\r\n            // since this is an internal close, trigger the close listener\r\n            if (this.onDisconnect) {\r\n                this.onDisconnect(this.everConnected_);\r\n                this.onDisconnect = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is being closed');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\r\n    resetKeepAlive() {\r\n        clearInterval(this.keepaliveTimer);\r\n        this.keepaliveTimer = setInterval(() => {\r\n            //If there has been no websocket activity for a while, send a no-op\r\n            if (this.mySock) {\r\n                this.sendString_('0');\r\n            }\r\n            this.resetKeepAlive();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\r\n    }\r\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param str - String to send.\r\n     */\r\n    sendString_(str) {\r\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\r\n        // calls for some unknown reason.  We treat these as an error and disconnect.\r\n        // See https://app.asana.com/0/58926111402292/68021340250410\r\n        try {\r\n            this.mySock.send(str);\r\n        }\r\n        catch (e) {\r\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\r\n            setTimeout(this.onClosed_.bind(this), 0);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Number of response before we consider the connection \"healthy.\"\r\n */\r\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\r\n/**\r\n * Time to wait for the connection te become healthy before giving up.\r\n */\r\nWebSocketConnection.healthyTimeout = 30000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n */\r\nclass TransportManager {\r\n    /**\r\n     * @param repoInfo - Metadata around the namespace we're connecting to\r\n     */\r\n    constructor(repoInfo) {\r\n        this.initTransports_(repoInfo);\r\n    }\r\n    static get ALL_TRANSPORTS() {\r\n        return [BrowserPollConnection, WebSocketConnection];\r\n    }\r\n    initTransports_(repoInfo) {\r\n        const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\r\n        let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\r\n        if (repoInfo.webSocketOnly) {\r\n            if (!isWebSocketsAvailable) {\r\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\r\n            }\r\n            isSkipPollConnection = true;\r\n        }\r\n        if (isSkipPollConnection) {\r\n            this.transports_ = [WebSocketConnection];\r\n        }\r\n        else {\r\n            const transports = (this.transports_ = []);\r\n            for (const transport of TransportManager.ALL_TRANSPORTS) {\r\n                if (transport && transport['isAvailable']()) {\r\n                    transports.push(transport);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the initial transport to use\r\n     */\r\n    initialTransport() {\r\n        if (this.transports_.length > 0) {\r\n            return this.transports_[0];\r\n        }\r\n        else {\r\n            throw new Error('No transports available');\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the next transport, or null\r\n     */\r\n    upgradeTransport() {\r\n        if (this.transports_.length > 1) {\r\n            return this.transports_[1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Abort upgrade attempt if it takes longer than 60s.\r\nconst UPGRADE_TIMEOUT = 60000;\r\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\r\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\r\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\r\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\r\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\r\n// but we've sent/received enough bytes, we don't cancel the connection.\r\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\r\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\r\nconst MESSAGE_TYPE = 't';\r\nconst MESSAGE_DATA = 'd';\r\nconst CONTROL_SHUTDOWN = 's';\r\nconst CONTROL_RESET = 'r';\r\nconst CONTROL_ERROR = 'e';\r\nconst CONTROL_PONG = 'o';\r\nconst SWITCH_ACK = 'a';\r\nconst END_TRANSMISSION = 'n';\r\nconst PING = 'p';\r\nconst SERVER_HELLO = 'h';\r\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n */\r\nclass Connection {\r\n    /**\r\n     * @param id - an id for this connection\r\n     * @param repoInfo_ - the info for the endpoint to connect to\r\n     * @param applicationId_ - the Firebase App ID for this project\r\n     * @param appCheckToken_ - The App Check Token for this device.\r\n     * @param authToken_ - The auth token for this session.\r\n     * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */\r\n    constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\r\n        this.id = id;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.appCheckToken_ = appCheckToken_;\r\n        this.authToken_ = authToken_;\r\n        this.onMessage_ = onMessage_;\r\n        this.onReady_ = onReady_;\r\n        this.onDisconnect_ = onDisconnect_;\r\n        this.onKill_ = onKill_;\r\n        this.lastSessionId = lastSessionId;\r\n        this.connectionCount = 0;\r\n        this.pendingDataMessages = [];\r\n        this.state_ = 0 /* CONNECTING */;\r\n        this.log_ = logWrapper('c:' + this.id + ':');\r\n        this.transportManager_ = new TransportManager(repoInfo_);\r\n        this.log_('Connection created');\r\n        this.start_();\r\n    }\r\n    /**\r\n     * Starts a connection attempt\r\n     */\r\n    start_() {\r\n        const conn = this.transportManager_.initialTransport();\r\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessageReceived = this.connReceiver_(this.conn_);\r\n        const onConnectionLost = this.disconnReceiver_(this.conn_);\r\n        this.tx_ = this.conn_;\r\n        this.rx_ = this.conn_;\r\n        this.secondaryConn_ = null;\r\n        this.isHealthy_ = false;\r\n        /*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */\r\n        setTimeout(() => {\r\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\r\n            this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\r\n        }, Math.floor(0));\r\n        const healthyTimeoutMS = conn['healthyTimeout'] || 0;\r\n        if (healthyTimeoutMS > 0) {\r\n            this.healthyTimeout_ = setTimeoutNonBlocking(() => {\r\n                this.healthyTimeout_ = null;\r\n                if (!this.isHealthy_) {\r\n                    if (this.conn_ &&\r\n                        this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has received ' +\r\n                            this.conn_.bytesReceived +\r\n                            ' bytes.  Marking connection healthy.');\r\n                        this.isHealthy_ = true;\r\n                        this.conn_.markConnectionHealthy();\r\n                    }\r\n                    else if (this.conn_ &&\r\n                        this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has sent ' +\r\n                            this.conn_.bytesSent +\r\n                            ' bytes.  Leaving connection alive.');\r\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\r\n                        // the server.\r\n                    }\r\n                    else {\r\n                        this.log_('Closing unhealthy connection after timeout.');\r\n                        this.close();\r\n                    }\r\n                }\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            }, Math.floor(healthyTimeoutMS));\r\n        }\r\n    }\r\n    nextTransportId_() {\r\n        return 'c:' + this.id + ':' + this.connectionCount++;\r\n    }\r\n    disconnReceiver_(conn) {\r\n        return everConnected => {\r\n            if (conn === this.conn_) {\r\n                this.onConnectionLost_(everConnected);\r\n            }\r\n            else if (conn === this.secondaryConn_) {\r\n                this.log_('Secondary connection lost.');\r\n                this.onSecondaryConnectionLost_();\r\n            }\r\n            else {\r\n                this.log_('closing an old connection');\r\n            }\r\n        };\r\n    }\r\n    connReceiver_(conn) {\r\n        return (message) => {\r\n            if (this.state_ !== 2 /* DISCONNECTED */) {\r\n                if (conn === this.rx_) {\r\n                    this.onPrimaryMessageReceived_(message);\r\n                }\r\n                else if (conn === this.secondaryConn_) {\r\n                    this.onSecondaryMessageReceived_(message);\r\n                }\r\n                else {\r\n                    this.log_('message on old connection');\r\n                }\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * @param dataMsg - An arbitrary data message to be sent to the server\r\n     */\r\n    sendRequest(dataMsg) {\r\n        // wrap in a data message envelope and send it on\r\n        const msg = { t: 'd', d: dataMsg };\r\n        this.sendData_(msg);\r\n    }\r\n    tryCleanupConnection() {\r\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\r\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\r\n            this.conn_ = this.secondaryConn_;\r\n            this.secondaryConn_ = null;\r\n            // the server will shutdown the old connection\r\n        }\r\n    }\r\n    onSecondaryControl_(controlData) {\r\n        if (MESSAGE_TYPE in controlData) {\r\n            const cmd = controlData[MESSAGE_TYPE];\r\n            if (cmd === SWITCH_ACK) {\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // Most likely the session wasn't valid. Abandon the switch attempt\r\n                this.log_('Got a reset on secondary, closing it');\r\n                this.secondaryConn_.close();\r\n                // If we were already using this connection for something, than we need to fully close\r\n                if (this.tx_ === this.secondaryConn_ ||\r\n                    this.rx_ === this.secondaryConn_) {\r\n                    this.close();\r\n                }\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on secondary.');\r\n                this.secondaryResponsesRequired_--;\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n        }\r\n    }\r\n    onSecondaryMessageReceived_(parsedData) {\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onSecondaryControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            // got a data message, but we're still second connection. Need to buffer it up\r\n            this.pendingDataMessages.push(data);\r\n        }\r\n        else {\r\n            throw new Error('Unknown protocol layer: ' + layer);\r\n        }\r\n    }\r\n    upgradeIfSecondaryHealthy_() {\r\n        if (this.secondaryResponsesRequired_ <= 0) {\r\n            this.log_('Secondary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n            this.secondaryConn_.markConnectionHealthy();\r\n            this.proceedWithUpgrade_();\r\n        }\r\n        else {\r\n            // Send a ping to make sure the connection is healthy.\r\n            this.log_('sending ping on secondary.');\r\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    proceedWithUpgrade_() {\r\n        // tell this connection to consider itself open\r\n        this.secondaryConn_.start();\r\n        // send ack\r\n        this.log_('sending client ack on secondary');\r\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\r\n        // send end packet on primary transport, switch to sending on this one\r\n        // can receive on this one, buffer responses until end received on primary transport\r\n        this.log_('Ending transmission on primary');\r\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\r\n        this.tx_ = this.secondaryConn_;\r\n        this.tryCleanupConnection();\r\n    }\r\n    onPrimaryMessageReceived_(parsedData) {\r\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            this.onDataMessage_(data);\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        this.onPrimaryResponse_();\r\n        // We don't do anything with data messages, just kick them up a level\r\n        this.onMessage_(message);\r\n    }\r\n    onPrimaryResponse_() {\r\n        if (!this.isHealthy_) {\r\n            this.primaryResponsesRequired_--;\r\n            if (this.primaryResponsesRequired_ <= 0) {\r\n                this.log_('Primary connection is healthy.');\r\n                this.isHealthy_ = true;\r\n                this.conn_.markConnectionHealthy();\r\n            }\r\n        }\r\n    }\r\n    onControl_(controlData) {\r\n        const cmd = requireKey(MESSAGE_TYPE, controlData);\r\n        if (MESSAGE_DATA in controlData) {\r\n            const payload = controlData[MESSAGE_DATA];\r\n            if (cmd === SERVER_HELLO) {\r\n                this.onHandshake_(payload);\r\n            }\r\n            else if (cmd === END_TRANSMISSION) {\r\n                this.log_('recvd end transmission on primary');\r\n                this.rx_ = this.secondaryConn_;\r\n                for (let i = 0; i < this.pendingDataMessages.length; ++i) {\r\n                    this.onDataMessage_(this.pendingDataMessages[i]);\r\n                }\r\n                this.pendingDataMessages = [];\r\n                this.tryCleanupConnection();\r\n            }\r\n            else if (cmd === CONTROL_SHUTDOWN) {\r\n                // This was previously the 'onKill' callback passed to the lower-level connection\r\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\r\n                this.onConnectionShutdown_(payload);\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // payload in this case is the host we should contact\r\n                this.onReset_(payload);\r\n            }\r\n            else if (cmd === CONTROL_ERROR) {\r\n                error('Server Error: ' + payload);\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on primary.');\r\n                this.onPrimaryResponse_();\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }\r\n            else {\r\n                error('Unknown control packet command: ' + cmd);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param handshake - The handshake data returned from the server\r\n     */\r\n    onHandshake_(handshake) {\r\n        const timestamp = handshake.ts;\r\n        const version = handshake.v;\r\n        const host = handshake.h;\r\n        this.sessionId = handshake.s;\r\n        this.repoInfo_.host = host;\r\n        // if we've already closed the connection, then don't bother trying to progress further\r\n        if (this.state_ === 0 /* CONNECTING */) {\r\n            this.conn_.start();\r\n            this.onConnectionEstablished_(this.conn_, timestamp);\r\n            if (PROTOCOL_VERSION !== version) {\r\n                warn('Protocol version mismatch detected');\r\n            }\r\n            // TODO: do we want to upgrade? when? maybe a delay?\r\n            this.tryStartUpgrade_();\r\n        }\r\n    }\r\n    tryStartUpgrade_() {\r\n        const conn = this.transportManager_.upgradeTransport();\r\n        if (conn) {\r\n            this.startUpgrade_(conn);\r\n        }\r\n    }\r\n    startUpgrade_(conn) {\r\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.secondaryResponsesRequired_ =\r\n            conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessage = this.connReceiver_(this.secondaryConn_);\r\n        const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\r\n        this.secondaryConn_.open(onMessage, onDisconnect);\r\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\r\n        setTimeoutNonBlocking(() => {\r\n            if (this.secondaryConn_) {\r\n                this.log_('Timed out trying to upgrade.');\r\n                this.secondaryConn_.close();\r\n            }\r\n        }, Math.floor(UPGRADE_TIMEOUT));\r\n    }\r\n    onReset_(host) {\r\n        this.log_('Reset packet received.  New host: ' + host);\r\n        this.repoInfo_.host = host;\r\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\r\n        // We don't currently support resets after the connection has already been established\r\n        if (this.state_ === 1 /* CONNECTED */) {\r\n            this.close();\r\n        }\r\n        else {\r\n            // Close whatever connections we have open and start again.\r\n            this.closeConnections_();\r\n            this.start_();\r\n        }\r\n    }\r\n    onConnectionEstablished_(conn, timestamp) {\r\n        this.log_('Realtime connection established.');\r\n        this.conn_ = conn;\r\n        this.state_ = 1 /* CONNECTED */;\r\n        if (this.onReady_) {\r\n            this.onReady_(timestamp, this.sessionId);\r\n            this.onReady_ = null;\r\n        }\r\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\r\n        // send some pings.\r\n        if (this.primaryResponsesRequired_ === 0) {\r\n            this.log_('Primary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n        }\r\n        else {\r\n            setTimeoutNonBlocking(() => {\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\r\n        }\r\n    }\r\n    sendPingOnPrimaryIfNecessary_() {\r\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\r\n        if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('sending ping on primary.');\r\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    onSecondaryConnectionLost_() {\r\n        const conn = this.secondaryConn_;\r\n        this.secondaryConn_ = null;\r\n        if (this.tx_ === conn || this.rx_ === conn) {\r\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\r\n            this.close();\r\n        }\r\n    }\r\n    /**\r\n     * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     */\r\n    onConnectionLost_(everConnected) {\r\n        this.conn_ = null;\r\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\r\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\r\n        if (!everConnected && this.state_ === 0 /* CONNECTING */) {\r\n            this.log_('Realtime connection failed.');\r\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\r\n            if (this.repoInfo_.isCacheableHost()) {\r\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\r\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\r\n                this.repoInfo_.internalHost = this.repoInfo_.host;\r\n            }\r\n        }\r\n        else if (this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('Realtime connection lost.');\r\n        }\r\n        this.close();\r\n    }\r\n    onConnectionShutdown_(reason) {\r\n        this.log_('Connection shutdown command received. Shutting down...');\r\n        if (this.onKill_) {\r\n            this.onKill_(reason);\r\n            this.onKill_ = null;\r\n        }\r\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\r\n        // so clear the callback.\r\n        this.onDisconnect_ = null;\r\n        this.close();\r\n    }\r\n    sendData_(data) {\r\n        if (this.state_ !== 1 /* CONNECTED */) {\r\n            throw 'Connection is not connected';\r\n        }\r\n        else {\r\n            this.tx_.send(data);\r\n        }\r\n    }\r\n    /**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */\r\n    close() {\r\n        if (this.state_ !== 2 /* DISCONNECTED */) {\r\n            this.log_('Closing realtime connection.');\r\n            this.state_ = 2 /* DISCONNECTED */;\r\n            this.closeConnections_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_();\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    closeConnections_() {\r\n        this.log_('Shutting down all connections');\r\n        if (this.conn_) {\r\n            this.conn_.close();\r\n            this.conn_ = null;\r\n        }\r\n        if (this.secondaryConn_) {\r\n            this.secondaryConn_.close();\r\n            this.secondaryConn_ = null;\r\n        }\r\n        if (this.healthyTimeout_) {\r\n            clearTimeout(this.healthyTimeout_);\r\n            this.healthyTimeout_ = null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\r\nclass ServerActions {\r\n    put(pathString, data, onComplete, hash) { }\r\n    merge(pathString, data, onComplete, hash) { }\r\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param token - The authentication token\r\n     */\r\n    refreshAuthToken(token) { }\r\n    /**\r\n     * Refreshes the app check token for the current connection.\r\n     * @param token The app check token\r\n     */\r\n    refreshAppCheckToken(token) { }\r\n    onDisconnectPut(pathString, data, onComplete) { }\r\n    onDisconnectMerge(pathString, data, onComplete) { }\r\n    onDisconnectCancel(pathString, onComplete) { }\r\n    reportStats(stats) { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\r\nclass EventEmitter {\r\n    constructor(allowedEvents_) {\r\n        this.allowedEvents_ = allowedEvents_;\r\n        this.listeners_ = {};\r\n        assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\r\n    }\r\n    /**\r\n     * To be called by derived classes to trigger events.\r\n     */\r\n    trigger(eventType, ...varArgs) {\r\n        if (Array.isArray(this.listeners_[eventType])) {\r\n            // Clone the list, since callbacks could add/remove listeners.\r\n            const listeners = [...this.listeners_[eventType]];\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                listeners[i].callback.apply(listeners[i].context, varArgs);\r\n            }\r\n        }\r\n    }\r\n    on(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\r\n        this.listeners_[eventType].push({ callback, context });\r\n        const eventData = this.getInitialEvent(eventType);\r\n        if (eventData) {\r\n            callback.apply(context, eventData);\r\n        }\r\n    }\r\n    off(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        const listeners = this.listeners_[eventType] || [];\r\n        for (let i = 0; i < listeners.length; i++) {\r\n            if (listeners[i].callback === callback &&\r\n                (!context || context === listeners[i].context)) {\r\n                listeners.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    validateEventType_(eventType) {\r\n        assert(this.allowedEvents_.find(et => {\r\n            return et === eventType;\r\n        }), 'Unknown event: ' + eventType);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n */\r\nclass OnlineMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['online']);\r\n        this.online_ = true;\r\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\r\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\r\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\r\n        // for Cordova.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window.addEventListener !== 'undefined' &&\r\n            !isMobileCordova()) {\r\n            window.addEventListener('online', () => {\r\n                if (!this.online_) {\r\n                    this.online_ = true;\r\n                    this.trigger('online', true);\r\n                }\r\n            }, false);\r\n            window.addEventListener('offline', () => {\r\n                if (this.online_) {\r\n                    this.online_ = false;\r\n                    this.trigger('online', false);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new OnlineMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'online', 'Unknown event type: ' + eventType);\r\n        return [this.online_];\r\n    }\r\n    currentlyOnline() {\r\n        return this.online_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Maximum key depth. */\r\nconst MAX_PATH_DEPTH = 32;\r\n/** Maximum number of (UTF8) bytes in a Firebase path. */\r\nconst MAX_PATH_LENGTH_BYTES = 768;\r\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\r\nclass Path {\r\n    /**\r\n     * @param pathOrString - Path string to parse, or another path, or the raw\r\n     * tokens array\r\n     */\r\n    constructor(pathOrString, pieceNum) {\r\n        if (pieceNum === void 0) {\r\n            this.pieces_ = pathOrString.split('/');\r\n            // Remove empty pieces.\r\n            let copyTo = 0;\r\n            for (let i = 0; i < this.pieces_.length; i++) {\r\n                if (this.pieces_[i].length > 0) {\r\n                    this.pieces_[copyTo] = this.pieces_[i];\r\n                    copyTo++;\r\n                }\r\n            }\r\n            this.pieces_.length = copyTo;\r\n            this.pieceNum_ = 0;\r\n        }\r\n        else {\r\n            this.pieces_ = pathOrString;\r\n            this.pieceNum_ = pieceNum;\r\n        }\r\n    }\r\n    toString() {\r\n        let pathString = '';\r\n        for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '') {\r\n                pathString += '/' + this.pieces_[i];\r\n            }\r\n        }\r\n        return pathString || '/';\r\n    }\r\n}\r\nfunction newEmptyPath() {\r\n    return new Path('');\r\n}\r\nfunction pathGetFront(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    return path.pieces_[path.pieceNum_];\r\n}\r\n/**\r\n * @returns The number of segments in this path\r\n */\r\nfunction pathGetLength(path) {\r\n    return path.pieces_.length - path.pieceNum_;\r\n}\r\nfunction pathPopFront(path) {\r\n    let pieceNum = path.pieceNum_;\r\n    if (pieceNum < path.pieces_.length) {\r\n        pieceNum++;\r\n    }\r\n    return new Path(path.pieces_, pieceNum);\r\n}\r\nfunction pathGetBack(path) {\r\n    if (path.pieceNum_ < path.pieces_.length) {\r\n        return path.pieces_[path.pieces_.length - 1];\r\n    }\r\n    return null;\r\n}\r\nfunction pathToUrlEncodedString(path) {\r\n    let pathString = '';\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        if (path.pieces_[i] !== '') {\r\n            pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\r\n        }\r\n    }\r\n    return pathString || '/';\r\n}\r\n/**\r\n * Shallow copy of the parts of the path.\r\n *\r\n */\r\nfunction pathSlice(path, begin = 0) {\r\n    return path.pieces_.slice(path.pieceNum_ + begin);\r\n}\r\nfunction pathParent(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\nfunction pathChild(path, childPathObj) {\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    if (childPathObj instanceof Path) {\r\n        for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\r\n            pieces.push(childPathObj.pieces_[i]);\r\n        }\r\n    }\r\n    else {\r\n        const childPieces = childPathObj.split('/');\r\n        for (let i = 0; i < childPieces.length; i++) {\r\n            if (childPieces[i].length > 0) {\r\n                pieces.push(childPieces[i]);\r\n            }\r\n        }\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\n/**\r\n * @returns True if there are no segments in this path\r\n */\r\nfunction pathIsEmpty(path) {\r\n    return path.pieceNum_ >= path.pieces_.length;\r\n}\r\n/**\r\n * @returns The path from outerPath to innerPath\r\n */\r\nfunction newRelativePath(outerPath, innerPath) {\r\n    const outer = pathGetFront(outerPath), inner = pathGetFront(innerPath);\r\n    if (outer === null) {\r\n        return innerPath;\r\n    }\r\n    else if (outer === inner) {\r\n        return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\r\n    }\r\n    else {\r\n        throw new Error('INTERNAL ERROR: innerPath (' +\r\n            innerPath +\r\n            ') is not within ' +\r\n            'outerPath (' +\r\n            outerPath +\r\n            ')');\r\n    }\r\n}\r\n/**\r\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\r\n */\r\nfunction pathCompare(left, right) {\r\n    const leftKeys = pathSlice(left, 0);\r\n    const rightKeys = pathSlice(right, 0);\r\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\r\n        const cmp = nameCompare(leftKeys[i], rightKeys[i]);\r\n        if (cmp !== 0) {\r\n            return cmp;\r\n        }\r\n    }\r\n    if (leftKeys.length === rightKeys.length) {\r\n        return 0;\r\n    }\r\n    return leftKeys.length < rightKeys.length ? -1 : 1;\r\n}\r\n/**\r\n * @returns true if paths are the same.\r\n */\r\nfunction pathEquals(path, other) {\r\n    if (pathGetLength(path) !== pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * @returns True if this path is a parent (or the same as) other\r\n */\r\nfunction pathContains(path, other) {\r\n    let i = path.pieceNum_;\r\n    let j = other.pieceNum_;\r\n    if (pathGetLength(path) > pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    while (i < path.pieces_.length) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n        ++i;\r\n        ++j;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\r\nclass ValidationPath {\r\n    /**\r\n     * @param path - Initial Path.\r\n     * @param errorPrefix_ - Prefix for any error messages.\r\n     */\r\n    constructor(path, errorPrefix_) {\r\n        this.errorPrefix_ = errorPrefix_;\r\n        this.parts_ = pathSlice(path, 0);\r\n        /** Initialize to number of '/' chars needed in path. */\r\n        this.byteLength_ = Math.max(1, this.parts_.length);\r\n        for (let i = 0; i < this.parts_.length; i++) {\r\n            this.byteLength_ += stringLength(this.parts_[i]);\r\n        }\r\n        validationPathCheckValid(this);\r\n    }\r\n}\r\nfunction validationPathPush(validationPath, child) {\r\n    // Count the needed '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ += 1;\r\n    }\r\n    validationPath.parts_.push(child);\r\n    validationPath.byteLength_ += stringLength(child);\r\n    validationPathCheckValid(validationPath);\r\n}\r\nfunction validationPathPop(validationPath) {\r\n    const last = validationPath.parts_.pop();\r\n    validationPath.byteLength_ -= stringLength(last);\r\n    // Un-count the previous '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ -= 1;\r\n    }\r\n}\r\nfunction validationPathCheckValid(validationPath) {\r\n    if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'has a key path longer than ' +\r\n            MAX_PATH_LENGTH_BYTES +\r\n            ' bytes (' +\r\n            validationPath.byteLength_ +\r\n            ').');\r\n    }\r\n    if (validationPath.parts_.length > MAX_PATH_DEPTH) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'path specified exceeds the maximum depth that can be written (' +\r\n            MAX_PATH_DEPTH +\r\n            ') or object contains a cycle ' +\r\n            validationPathToErrorString(validationPath));\r\n    }\r\n}\r\n/**\r\n * String for use in error messages - uses '.' notation for path.\r\n */\r\nfunction validationPathToErrorString(validationPath) {\r\n    if (validationPath.parts_.length === 0) {\r\n        return '';\r\n    }\r\n    return \"in property '\" + validationPath.parts_.join('.') + \"'\";\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass VisibilityMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['visible']);\r\n        let hidden;\r\n        let visibilityChange;\r\n        if (typeof document !== 'undefined' &&\r\n            typeof document.addEventListener !== 'undefined') {\r\n            if (typeof document['hidden'] !== 'undefined') {\r\n                // Opera 12.10 and Firefox 18 and later support\r\n                visibilityChange = 'visibilitychange';\r\n                hidden = 'hidden';\r\n            }\r\n            else if (typeof document['mozHidden'] !== 'undefined') {\r\n                visibilityChange = 'mozvisibilitychange';\r\n                hidden = 'mozHidden';\r\n            }\r\n            else if (typeof document['msHidden'] !== 'undefined') {\r\n                visibilityChange = 'msvisibilitychange';\r\n                hidden = 'msHidden';\r\n            }\r\n            else if (typeof document['webkitHidden'] !== 'undefined') {\r\n                visibilityChange = 'webkitvisibilitychange';\r\n                hidden = 'webkitHidden';\r\n            }\r\n        }\r\n        // Initially, we always assume we are visible. This ensures that in browsers\r\n        // without page visibility support or in cases where we are never visible\r\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\r\n        // reconnects\r\n        this.visible_ = true;\r\n        if (visibilityChange) {\r\n            document.addEventListener(visibilityChange, () => {\r\n                const visible = !document[hidden];\r\n                if (visible !== this.visible_) {\r\n                    this.visible_ = visible;\r\n                    this.trigger('visible', visible);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new VisibilityMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'visible', 'Unknown event type: ' + eventType);\r\n        return [this.visible_];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst RECONNECT_MIN_DELAY = 1000;\r\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\r\nconst GET_CONNECT_TIMEOUT = 3 * 1000;\r\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\r\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\r\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\r\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\r\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\r\nconst INVALID_TOKEN_THRESHOLD = 3;\r\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\r\nclass PersistentConnection extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param applicationId_ - The Firebase App ID for this project\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.onConnectStatus_ = onConnectStatus_;\r\n        this.onServerInfoUpdate_ = onServerInfoUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        this.authOverride_ = authOverride_;\r\n        // Used for diagnostic logging.\r\n        this.id = PersistentConnection.nextPersistentConnectionId_++;\r\n        this.log_ = logWrapper('p:' + this.id + ':');\r\n        this.interruptReasons_ = {};\r\n        this.listens = new Map();\r\n        this.outstandingPuts_ = [];\r\n        this.outstandingGets_ = [];\r\n        this.outstandingPutCount_ = 0;\r\n        this.outstandingGetCount_ = 0;\r\n        this.onDisconnectRequestQueue_ = [];\r\n        this.connected_ = false;\r\n        this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n        this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\r\n        this.securityDebugCallback_ = null;\r\n        this.lastSessionId = null;\r\n        this.establishConnectionTimer_ = null;\r\n        this.visible_ = false;\r\n        // Before we get connected, we keep a queue of pending messages to send.\r\n        this.requestCBHash_ = {};\r\n        this.requestNumber_ = 0;\r\n        this.realtime_ = null;\r\n        this.authToken_ = null;\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = false;\r\n        this.invalidAuthTokenCount_ = 0;\r\n        this.invalidAppCheckTokenCount_ = 0;\r\n        this.firstConnection_ = true;\r\n        this.lastConnectionAttemptTime_ = null;\r\n        this.lastConnectionEstablishedTime_ = null;\r\n        if (authOverride_ && !isNodeSdk()) {\r\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\r\n        }\r\n        VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\r\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\r\n            OnlineMonitor.getInstance().on('online', this.onOnline_, this);\r\n        }\r\n    }\r\n    sendRequest(action, body, onResponse) {\r\n        const curReqNum = ++this.requestNumber_;\r\n        const msg = { r: curReqNum, a: action, b: body };\r\n        this.log_(stringify(msg));\r\n        assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\r\n        this.realtime_.sendRequest(msg);\r\n        if (onResponse) {\r\n            this.requestCBHash_[curReqNum] = onResponse;\r\n        }\r\n    }\r\n    get(query) {\r\n        this.initConnection_();\r\n        const deferred = new Deferred();\r\n        const request = {\r\n            p: query._path.toString(),\r\n            q: query._queryObject\r\n        };\r\n        const outstandingGet = {\r\n            action: 'g',\r\n            request,\r\n            onComplete: (message) => {\r\n                const payload = message['d'];\r\n                if (message['s'] === 'ok') {\r\n                    this.onDataUpdate_(request['p'], payload, \r\n                    /*isMerge*/ false, \r\n                    /*tag*/ null);\r\n                    deferred.resolve(payload);\r\n                }\r\n                else {\r\n                    deferred.reject(payload);\r\n                }\r\n            }\r\n        };\r\n        this.outstandingGets_.push(outstandingGet);\r\n        this.outstandingGetCount_++;\r\n        const index = this.outstandingGets_.length - 1;\r\n        if (!this.connected_) {\r\n            setTimeout(() => {\r\n                const get = this.outstandingGets_[index];\r\n                if (get === undefined || outstandingGet !== get) {\r\n                    return;\r\n                }\r\n                delete this.outstandingGets_[index];\r\n                this.outstandingGetCount_--;\r\n                if (this.outstandingGetCount_ === 0) {\r\n                    this.outstandingGets_ = [];\r\n                }\r\n                this.log_('get ' + index + ' timed out on connection');\r\n                deferred.reject(new Error('Client is offline.'));\r\n            }, GET_CONNECT_TIMEOUT);\r\n        }\r\n        if (this.connected_) {\r\n            this.sendGet_(index);\r\n        }\r\n        return deferred.promise;\r\n    }\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        this.initConnection_();\r\n        const queryId = query._queryIdentifier;\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\r\n        if (!this.listens.has(pathString)) {\r\n            this.listens.set(pathString, new Map());\r\n        }\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\r\n        assert(!this.listens.get(pathString).has(queryId), 'listen() called twice for same path/queryId.');\r\n        const listenSpec = {\r\n            onComplete,\r\n            hashFn: currentHashFn,\r\n            query,\r\n            tag\r\n        };\r\n        this.listens.get(pathString).set(queryId, listenSpec);\r\n        if (this.connected_) {\r\n            this.sendListen_(listenSpec);\r\n        }\r\n    }\r\n    sendGet_(index) {\r\n        const get = this.outstandingGets_[index];\r\n        this.sendRequest('g', get.request, (message) => {\r\n            delete this.outstandingGets_[index];\r\n            this.outstandingGetCount_--;\r\n            if (this.outstandingGetCount_ === 0) {\r\n                this.outstandingGets_ = [];\r\n            }\r\n            if (get.onComplete) {\r\n                get.onComplete(message);\r\n            }\r\n        });\r\n    }\r\n    sendListen_(listenSpec) {\r\n        const query = listenSpec.query;\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'q';\r\n        // Only bother to send query if it's non-default.\r\n        if (listenSpec.tag) {\r\n            req['q'] = query._queryObject;\r\n            req['t'] = listenSpec.tag;\r\n        }\r\n        req[ /*hash*/'h'] = listenSpec.hashFn();\r\n        this.sendRequest(action, req, (message) => {\r\n            const payload = message[ /*data*/'d'];\r\n            const status = message[ /*status*/'s'];\r\n            // print warnings in any case...\r\n            PersistentConnection.warnOnListenWarnings_(payload, query);\r\n            const currentListenSpec = this.listens.get(pathString) &&\r\n                this.listens.get(pathString).get(queryId);\r\n            // only trigger actions if the listen hasn't been removed and readded\r\n            if (currentListenSpec === listenSpec) {\r\n                this.log_('listen response', message);\r\n                if (status !== 'ok') {\r\n                    this.removeListen_(pathString, queryId);\r\n                }\r\n                if (listenSpec.onComplete) {\r\n                    listenSpec.onComplete(status, payload);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    static warnOnListenWarnings_(payload, query) {\r\n        if (payload && typeof payload === 'object' && contains(payload, 'w')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const warnings = safeGet(payload, 'w');\r\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\r\n                const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\r\n                const indexPath = query._path.toString();\r\n                warn(`Using an unspecified index. Your data will be downloaded and ` +\r\n                    `filtered on the client. Consider adding ${indexSpec} at ` +\r\n                    `${indexPath} to your security rules for better performance.`);\r\n            }\r\n        }\r\n    }\r\n    refreshAuthToken(token) {\r\n        this.authToken_ = token;\r\n        this.log_('Auth token refreshed');\r\n        if (this.authToken_) {\r\n            this.tryAuth();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\r\n            //the credential so we dont become authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unauth', {}, () => { });\r\n            }\r\n        }\r\n        this.reduceReconnectDelayIfAdminCredential_(token);\r\n    }\r\n    reduceReconnectDelayIfAdminCredential_(credential) {\r\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\r\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\r\n        const isFirebaseSecret = credential && credential.length === 40;\r\n        if (isFirebaseSecret || isAdmin(credential)) {\r\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\r\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n        }\r\n    }\r\n    refreshAppCheckToken(token) {\r\n        this.appCheckToken_ = token;\r\n        this.log_('App check token refreshed');\r\n        if (this.appCheckToken_) {\r\n            this.tryAppCheck();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us.\r\n            //If we're not connected, simply delete the credential so we dont become\r\n            // authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unappeck', {}, () => { });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\r\n    tryAuth() {\r\n        if (this.connected_ && this.authToken_) {\r\n            const token = this.authToken_;\r\n            const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\r\n            const requestData = { cred: token };\r\n            if (this.authOverride_ === null) {\r\n                requestData['noauth'] = true;\r\n            }\r\n            else if (typeof this.authOverride_ === 'object') {\r\n                requestData['authvar'] = this.authOverride_;\r\n            }\r\n            this.sendRequest(authMethod, requestData, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (this.authToken_ === token) {\r\n                    if (status === 'ok') {\r\n                        this.invalidAuthTokenCount_ = 0;\r\n                    }\r\n                    else {\r\n                        // Triggers reconnect and force refresh for auth token\r\n                        this.onAuthRevoked_(status, data);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given token. If the authentication\r\n     * attempt fails, it's triggered like the token was revoked (the connection is\r\n     * closed).\r\n     */\r\n    tryAppCheck() {\r\n        if (this.connected_ && this.appCheckToken_) {\r\n            this.sendRequest('appcheck', { 'token': this.appCheckToken_ }, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (status === 'ok') {\r\n                    this.invalidAppCheckTokenCount_ = 0;\r\n                }\r\n                else {\r\n                    this.onAppCheckRevoked_(status, data);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    unlisten(query, tag) {\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && this.connected_) {\r\n            this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\r\n        }\r\n    }\r\n    sendUnlisten_(pathString, queryId, queryObj, tag) {\r\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'n';\r\n        // Only bother sending queryId if it's non-default.\r\n        if (tag) {\r\n            req['q'] = queryObj;\r\n            req['t'] = tag;\r\n        }\r\n        this.sendRequest(action, req);\r\n    }\r\n    onDisconnectPut(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'o',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectMerge(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'om',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectCancel(pathString, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'oc',\r\n                data: null,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    sendOnDisconnect_(action, pathString, data, onComplete) {\r\n        const request = { /*path*/ p: pathString, /*data*/ d: data };\r\n        this.log_('onDisconnect ' + action, request);\r\n        this.sendRequest(action, request, (response) => {\r\n            if (onComplete) {\r\n                setTimeout(() => {\r\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\r\n                }, Math.floor(0));\r\n            }\r\n        });\r\n    }\r\n    put(pathString, data, onComplete, hash) {\r\n        this.putInternal('p', pathString, data, onComplete, hash);\r\n    }\r\n    merge(pathString, data, onComplete, hash) {\r\n        this.putInternal('m', pathString, data, onComplete, hash);\r\n    }\r\n    putInternal(action, pathString, data, onComplete, hash) {\r\n        this.initConnection_();\r\n        const request = {\r\n            /*path*/ p: pathString,\r\n            /*data*/ d: data\r\n        };\r\n        if (hash !== undefined) {\r\n            request[ /*hash*/'h'] = hash;\r\n        }\r\n        // TODO: Only keep track of the most recent put for a given path?\r\n        this.outstandingPuts_.push({\r\n            action,\r\n            request,\r\n            onComplete\r\n        });\r\n        this.outstandingPutCount_++;\r\n        const index = this.outstandingPuts_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendPut_(index);\r\n        }\r\n        else {\r\n            this.log_('Buffering put: ' + pathString);\r\n        }\r\n    }\r\n    sendPut_(index) {\r\n        const action = this.outstandingPuts_[index].action;\r\n        const request = this.outstandingPuts_[index].request;\r\n        const onComplete = this.outstandingPuts_[index].onComplete;\r\n        this.outstandingPuts_[index].queued = this.connected_;\r\n        this.sendRequest(action, request, (message) => {\r\n            this.log_(action + ' response', message);\r\n            delete this.outstandingPuts_[index];\r\n            this.outstandingPutCount_--;\r\n            // Clean up array occasionally.\r\n            if (this.outstandingPutCount_ === 0) {\r\n                this.outstandingPuts_ = [];\r\n            }\r\n            if (onComplete) {\r\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\r\n            }\r\n        });\r\n    }\r\n    reportStats(stats) {\r\n        // If we're not connected, we just drop the stats.\r\n        if (this.connected_) {\r\n            const request = { /*counters*/ c: stats };\r\n            this.log_('reportStats', request);\r\n            this.sendRequest(/*stats*/ 's', request, result => {\r\n                const status = result[ /*status*/'s'];\r\n                if (status !== 'ok') {\r\n                    const errorReason = result[ /* data */'d'];\r\n                    this.log_('reportStats', 'Error sending stats: ' + errorReason);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        if ('r' in message) {\r\n            // this is a response\r\n            this.log_('from server: ' + stringify(message));\r\n            const reqNum = message['r'];\r\n            const onResponse = this.requestCBHash_[reqNum];\r\n            if (onResponse) {\r\n                delete this.requestCBHash_[reqNum];\r\n                onResponse(message[ /*body*/'b']);\r\n            }\r\n        }\r\n        else if ('error' in message) {\r\n            throw 'A server-side error has occurred: ' + message['error'];\r\n        }\r\n        else if ('a' in message) {\r\n            // a and b are action and body, respectively\r\n            this.onDataPush_(message['a'], message['b']);\r\n        }\r\n    }\r\n    onDataPush_(action, body) {\r\n        this.log_('handleServerMessage', action, body);\r\n        if (action === 'd') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge*/ false, body['t']);\r\n        }\r\n        else if (action === 'm') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge=*/ true, body['t']);\r\n        }\r\n        else if (action === 'c') {\r\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\r\n        }\r\n        else if (action === 'ac') {\r\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'apc') {\r\n            this.onAppCheckRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'sd') {\r\n            this.onSecurityDebugPacket_(body);\r\n        }\r\n        else {\r\n            error('Unrecognized action received from server: ' +\r\n                stringify(action) +\r\n                '\\nAre you using the latest client?');\r\n        }\r\n    }\r\n    onReady_(timestamp, sessionId) {\r\n        this.log_('connection ready');\r\n        this.connected_ = true;\r\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\r\n        this.handleTimestamp_(timestamp);\r\n        this.lastSessionId = sessionId;\r\n        if (this.firstConnection_) {\r\n            this.sendConnectStats_();\r\n        }\r\n        this.restoreState_();\r\n        this.firstConnection_ = false;\r\n        this.onConnectStatus_(true);\r\n    }\r\n    scheduleConnect_(timeout) {\r\n        assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\r\n        if (this.establishConnectionTimer_) {\r\n            clearTimeout(this.establishConnectionTimer_);\r\n        }\r\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\r\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\r\n        this.establishConnectionTimer_ = setTimeout(() => {\r\n            this.establishConnectionTimer_ = null;\r\n            this.establishConnection_();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(timeout));\r\n    }\r\n    initConnection_() {\r\n        if (!this.realtime_ && this.firstConnection_) {\r\n            this.scheduleConnect_(0);\r\n        }\r\n    }\r\n    onVisible_(visible) {\r\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\r\n        if (visible &&\r\n            !this.visible_ &&\r\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\r\n            this.log_('Window became visible.  Reducing delay.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        this.visible_ = visible;\r\n    }\r\n    onOnline_(online) {\r\n        if (online) {\r\n            this.log_('Browser went online.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        else {\r\n            this.log_('Browser went offline.  Killing connection.');\r\n            if (this.realtime_) {\r\n                this.realtime_.close();\r\n            }\r\n        }\r\n    }\r\n    onRealtimeDisconnect_() {\r\n        this.log_('data client disconnected');\r\n        this.connected_ = false;\r\n        this.realtime_ = null;\r\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\r\n        this.cancelSentTransactions_();\r\n        // Clear out the pending requests.\r\n        this.requestCBHash_ = {};\r\n        if (this.shouldReconnect_()) {\r\n            if (!this.visible_) {\r\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\r\n                this.reconnectDelay_ = this.maxReconnectDelay_;\r\n                this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            }\r\n            else if (this.lastConnectionEstablishedTime_) {\r\n                // If we've been connected long enough, reset reconnect delay to minimum.\r\n                const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\r\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\r\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n                }\r\n                this.lastConnectionEstablishedTime_ = null;\r\n            }\r\n            const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\r\n            let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\r\n            reconnectDelay = Math.random() * reconnectDelay;\r\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\r\n            this.scheduleConnect_(reconnectDelay);\r\n            // Adjust reconnect delay for next time.\r\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\r\n        }\r\n        this.onConnectStatus_(false);\r\n    }\r\n    async establishConnection_() {\r\n        if (this.shouldReconnect_()) {\r\n            this.log_('Making a connection attempt');\r\n            this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            this.lastConnectionEstablishedTime_ = null;\r\n            const onDataMessage = this.onDataMessage_.bind(this);\r\n            const onReady = this.onReady_.bind(this);\r\n            const onDisconnect = this.onRealtimeDisconnect_.bind(this);\r\n            const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\r\n            const lastSessionId = this.lastSessionId;\r\n            let canceled = false;\r\n            let connection = null;\r\n            const closeFn = function () {\r\n                if (connection) {\r\n                    connection.close();\r\n                }\r\n                else {\r\n                    canceled = true;\r\n                    onDisconnect();\r\n                }\r\n            };\r\n            const sendRequestFn = function (msg) {\r\n                assert(connection, \"sendRequest call when we're not connected not allowed.\");\r\n                connection.sendRequest(msg);\r\n            };\r\n            this.realtime_ = {\r\n                close: closeFn,\r\n                sendRequest: sendRequestFn\r\n            };\r\n            const forceRefresh = this.forceTokenRefresh_;\r\n            this.forceTokenRefresh_ = false;\r\n            try {\r\n                // First fetch auth and app check token, and establish connection after\r\n                // fetching the token was successful\r\n                const [authToken, appCheckToken] = await Promise.all([\r\n                    this.authTokenProvider_.getToken(forceRefresh),\r\n                    this.appCheckTokenProvider_.getToken(forceRefresh)\r\n                ]);\r\n                if (!canceled) {\r\n                    log('getToken() completed. Creating connection.');\r\n                    this.authToken_ = authToken && authToken.accessToken;\r\n                    this.appCheckToken_ = appCheckToken && appCheckToken.token;\r\n                    connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect, \r\n                    /* onKill= */ reason => {\r\n                        warn(reason + ' (' + this.repoInfo_.toString() + ')');\r\n                        this.interrupt(SERVER_KILL_INTERRUPT_REASON);\r\n                    }, lastSessionId);\r\n                }\r\n                else {\r\n                    log('getToken() completed but was canceled');\r\n                }\r\n            }\r\n            catch (error) {\r\n                this.log_('Failed to get token: ' + error);\r\n                if (!canceled) {\r\n                    if (this.repoInfo_.nodeAdmin) {\r\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\r\n                        // But getToken() may also just have temporarily failed, so we still want to\r\n                        // continue retrying.\r\n                        warn(error);\r\n                    }\r\n                    closeFn();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    interrupt(reason) {\r\n        log('Interrupting connection for reason: ' + reason);\r\n        this.interruptReasons_[reason] = true;\r\n        if (this.realtime_) {\r\n            this.realtime_.close();\r\n        }\r\n        else {\r\n            if (this.establishConnectionTimer_) {\r\n                clearTimeout(this.establishConnectionTimer_);\r\n                this.establishConnectionTimer_ = null;\r\n            }\r\n            if (this.connected_) {\r\n                this.onRealtimeDisconnect_();\r\n            }\r\n        }\r\n    }\r\n    resume(reason) {\r\n        log('Resuming connection for reason: ' + reason);\r\n        delete this.interruptReasons_[reason];\r\n        if (isEmpty(this.interruptReasons_)) {\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n    }\r\n    handleTimestamp_(timestamp) {\r\n        const delta = timestamp - new Date().getTime();\r\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\r\n    }\r\n    cancelSentTransactions_() {\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            const put = this.outstandingPuts_[i];\r\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\r\n                if (put.onComplete) {\r\n                    put.onComplete('disconnect');\r\n                }\r\n                delete this.outstandingPuts_[i];\r\n                this.outstandingPutCount_--;\r\n            }\r\n        }\r\n        // Clean up array occasionally.\r\n        if (this.outstandingPutCount_ === 0) {\r\n            this.outstandingPuts_ = [];\r\n        }\r\n    }\r\n    onListenRevoked_(pathString, query) {\r\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\r\n        let queryId;\r\n        if (!query) {\r\n            queryId = 'default';\r\n        }\r\n        else {\r\n            queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\r\n        }\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && listen.onComplete) {\r\n            listen.onComplete('permission_denied');\r\n        }\r\n    }\r\n    removeListen_(pathString, queryId) {\r\n        const normalizedPathString = new Path(pathString).toString(); // normalize path.\r\n        let listen;\r\n        if (this.listens.has(normalizedPathString)) {\r\n            const map = this.listens.get(normalizedPathString);\r\n            listen = map.get(queryId);\r\n            map.delete(queryId);\r\n            if (map.size === 0) {\r\n                this.listens.delete(normalizedPathString);\r\n            }\r\n        }\r\n        else {\r\n            // all listens for this path has already been removed\r\n            listen = undefined;\r\n        }\r\n        return listen;\r\n    }\r\n    onAuthRevoked_(statusCode, explanation) {\r\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\r\n        this.authToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        this.realtime_.close();\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAuthTokenCount_++;\r\n            if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                // Set a long reconnect delay because recovery is unlikely\r\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n                // Notify the auth token provider that the token is invalid, which will log\r\n                // a warning\r\n                this.authTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onAppCheckRevoked_(statusCode, explanation) {\r\n        log('App check token revoked: ' + statusCode + '/' + explanation);\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        // Note: We don't close the connection as the developer may not have\r\n        // enforcement enabled. The backend closes connections with enforcements.\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAppCheckTokenCount_++;\r\n            if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                this.appCheckTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onSecurityDebugPacket_(body) {\r\n        if (this.securityDebugCallback_) {\r\n            this.securityDebugCallback_(body);\r\n        }\r\n        else {\r\n            if ('msg' in body) {\r\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\r\n            }\r\n        }\r\n    }\r\n    restoreState_() {\r\n        //Re-authenticate ourselves if we have a credential stored.\r\n        this.tryAuth();\r\n        this.tryAppCheck();\r\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\r\n        // make sure to send listens before puts.\r\n        for (const queries of this.listens.values()) {\r\n            for (const listenSpec of queries.values()) {\r\n                this.sendListen_(listenSpec);\r\n            }\r\n        }\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            if (this.outstandingPuts_[i]) {\r\n                this.sendPut_(i);\r\n            }\r\n        }\r\n        while (this.onDisconnectRequestQueue_.length) {\r\n            const request = this.onDisconnectRequestQueue_.shift();\r\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\r\n        }\r\n        for (let i = 0; i < this.outstandingGets_.length; i++) {\r\n            if (this.outstandingGets_[i]) {\r\n                this.sendGet_(i);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sends client stats for first connection\r\n     */\r\n    sendConnectStats_() {\r\n        const stats = {};\r\n        let clientName = 'js';\r\n        if (isNodeSdk()) {\r\n            if (this.repoInfo_.nodeAdmin) {\r\n                clientName = 'admin_node';\r\n            }\r\n            else {\r\n                clientName = 'node';\r\n            }\r\n        }\r\n        stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\r\n        if (isMobileCordova()) {\r\n            stats['framework.cordova'] = 1;\r\n        }\r\n        else if (isReactNative()) {\r\n            stats['framework.reactnative'] = 1;\r\n        }\r\n        this.reportStats(stats);\r\n    }\r\n    shouldReconnect_() {\r\n        const online = OnlineMonitor.getInstance().currentlyOnline();\r\n        return isEmpty(this.interruptReasons_) && online;\r\n    }\r\n}\r\nPersistentConnection.nextPersistentConnectionId_ = 0;\r\n/**\r\n * Counter for number of connections created. Mainly used for tagging in the logs\r\n */\r\nPersistentConnection.nextConnectionId_ = 0;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass NamedNode {\r\n    constructor(name, node) {\r\n        this.name = name;\r\n        this.node = node;\r\n    }\r\n    static Wrap(name, node) {\r\n        return new NamedNode(name, node);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Index {\r\n    /**\r\n     * @returns A standalone comparison function for\r\n     * this index\r\n     */\r\n    getCompare() {\r\n        return this.compare.bind(this);\r\n    }\r\n    /**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     *\r\n     * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */\r\n    indexedValueChanged(oldNode, newNode) {\r\n        const oldWrapped = new NamedNode(MIN_NAME, oldNode);\r\n        const newWrapped = new NamedNode(MIN_NAME, newNode);\r\n        return this.compare(oldWrapped, newWrapped) !== 0;\r\n    }\r\n    /**\r\n     * @returns a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __EMPTY_NODE;\r\nclass KeyIndex extends Index {\r\n    static get __EMPTY_NODE() {\r\n        return __EMPTY_NODE;\r\n    }\r\n    static set __EMPTY_NODE(val) {\r\n        __EMPTY_NODE = val;\r\n    }\r\n    compare(a, b) {\r\n        return nameCompare(a.name, b.name);\r\n    }\r\n    isDefinedOn(node) {\r\n        // We could probably return true here (since every node has a key), but it's never called\r\n        // so just leaving unimplemented for now.\r\n        throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return false; // The key for a node never changes.\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // TODO: This should really be created once and cached in a static property, but\r\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\r\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\r\n    }\r\n    makePost(indexValue, name) {\r\n        assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\r\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\r\n        return new NamedNode(indexValue, __EMPTY_NODE);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.key';\r\n    }\r\n}\r\nconst KEY_INDEX = new KeyIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An iterator over an LLRBNode.\r\n */\r\nclass SortedMapIterator {\r\n    /**\r\n     * @param node - Node to iterate.\r\n     * @param isReverse_ - Whether or not to iterate in reverse\r\n     */\r\n    constructor(node, startKey, comparator, isReverse_, resultGenerator_ = null) {\r\n        this.isReverse_ = isReverse_;\r\n        this.resultGenerator_ = resultGenerator_;\r\n        this.nodeStack_ = [];\r\n        let cmp = 1;\r\n        while (!node.isEmpty()) {\r\n            node = node;\r\n            cmp = startKey ? comparator(node.key, startKey) : 1;\r\n            // flip the comparison if we're going in reverse\r\n            if (isReverse_) {\r\n                cmp *= -1;\r\n            }\r\n            if (cmp < 0) {\r\n                // This node is less than our start key. ignore it\r\n                if (this.isReverse_) {\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = node.right;\r\n                }\r\n            }\r\n            else if (cmp === 0) {\r\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\r\n                this.nodeStack_.push(node);\r\n                break;\r\n            }\r\n            else {\r\n                // This node is greater than our start key, add it to the stack and move to the next one\r\n                this.nodeStack_.push(node);\r\n                if (this.isReverse_) {\r\n                    node = node.right;\r\n                }\r\n                else {\r\n                    node = node.left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getNext() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        let node = this.nodeStack_.pop();\r\n        let result;\r\n        if (this.resultGenerator_) {\r\n            result = this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            result = { key: node.key, value: node.value };\r\n        }\r\n        if (this.isReverse_) {\r\n            node = node.left;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.right;\r\n            }\r\n        }\r\n        else {\r\n            node = node.right;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.left;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    hasNext() {\r\n        return this.nodeStack_.length > 0;\r\n    }\r\n    peek() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        const node = this.nodeStack_[this.nodeStack_.length - 1];\r\n        if (this.resultGenerator_) {\r\n            return this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            return { key: node.key, value: node.value };\r\n        }\r\n    }\r\n}\r\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\r\nclass LLRBNode {\r\n    /**\r\n     * @param key - Key associated with this node.\r\n     * @param value - Value associated with this node.\r\n     * @param color - Whether this node is red.\r\n     * @param left - Left child.\r\n     * @param right - Right child.\r\n     */\r\n    constructor(key, value, color, left, right) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.color = color != null ? color : LLRBNode.RED;\r\n        this.left =\r\n            left != null ? left : SortedMap.EMPTY_NODE;\r\n        this.right =\r\n            right != null ? right : SortedMap.EMPTY_NODE;\r\n    }\r\n    /**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param key - New key for the node, or null.\r\n     * @param value - New value for the node, or null.\r\n     * @param color - New color for the node, or null.\r\n     * @param left - New left child for the node, or null.\r\n     * @param right - New right child for the node, or null.\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return this.left.count() + 1 + this.right.count();\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return (this.left.inorderTraversal(action) ||\r\n            !!action(this.key, this.value) ||\r\n            this.right.inorderTraversal(action));\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return (this.right.reverseTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.left.reverseTraversal(action));\r\n    }\r\n    /**\r\n     * @returns The minimum node in the tree.\r\n     */\r\n    min_() {\r\n        if (this.left.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.left.min_();\r\n        }\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    minKey() {\r\n        return this.min_().key;\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    maxKey() {\r\n        if (this.right.isEmpty()) {\r\n            return this.key;\r\n        }\r\n        else {\r\n            return this.right.maxKey();\r\n        }\r\n    }\r\n    /**\r\n     * @param key - Key to insert.\r\n     * @param value - Value to insert.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the key/value added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        let n = this;\r\n        const cmp = comparator(key, n.key);\r\n        if (cmp < 0) {\r\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\r\n        }\r\n        else if (cmp === 0) {\r\n            n = n.copy(null, value, null, null, null);\r\n        }\r\n        else {\r\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns New tree, with the minimum key removed.\r\n     */\r\n    removeMin_() {\r\n        if (this.left.isEmpty()) {\r\n            return SortedMap.EMPTY_NODE;\r\n        }\r\n        let n = this;\r\n        if (!n.left.isRed_() && !n.left.left.isRed_()) {\r\n            n = n.moveRedLeft_();\r\n        }\r\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @param key - The key of the item to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the specified item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        let n, smallest;\r\n        n = this;\r\n        if (comparator(key, n.key) < 0) {\r\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\r\n                n = n.moveRedLeft_();\r\n            }\r\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\r\n        }\r\n        else {\r\n            if (n.left.isRed_()) {\r\n                n = n.rotateRight_();\r\n            }\r\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\r\n                n = n.moveRedRight_();\r\n            }\r\n            if (comparator(key, n.key) === 0) {\r\n                if (n.right.isEmpty()) {\r\n                    return SortedMap.EMPTY_NODE;\r\n                }\r\n                else {\r\n                    smallest = n.right.min_();\r\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\r\n                }\r\n            }\r\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns Whether this is a RED node.\r\n     */\r\n    isRed_() {\r\n        return this.color;\r\n    }\r\n    /**\r\n     * @returns New tree after performing any needed rotations.\r\n     */\r\n    fixUp_() {\r\n        let n = this;\r\n        if (n.right.isRed_() && !n.left.isRed_()) {\r\n            n = n.rotateLeft_();\r\n        }\r\n        if (n.left.isRed_() && n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n        }\r\n        if (n.left.isRed_() && n.right.isRed_()) {\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedLeft.\r\n     */\r\n    moveRedLeft_() {\r\n        let n = this.colorFlip_();\r\n        if (n.right.left.isRed_()) {\r\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\r\n            n = n.rotateLeft_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedRight.\r\n     */\r\n    moveRedRight_() {\r\n        let n = this.colorFlip_();\r\n        if (n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateLeft.\r\n     */\r\n    rotateLeft_() {\r\n        const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\r\n        return this.right.copy(null, null, this.color, nl, null);\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateRight.\r\n     */\r\n    rotateRight_() {\r\n        const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\r\n        return this.left.copy(null, null, this.color, null, nr);\r\n    }\r\n    /**\r\n     * @returns Newt ree, after colorFlip.\r\n     */\r\n    colorFlip_() {\r\n        const left = this.left.copy(null, null, !this.left.color, null, null);\r\n        const right = this.right.copy(null, null, !this.right.color, null, null);\r\n        return this.copy(null, null, !this.color, left, right);\r\n    }\r\n    /**\r\n     * For testing.\r\n     *\r\n     * @returns True if all is well.\r\n     */\r\n    checkMaxDepth_() {\r\n        const blackDepth = this.check_();\r\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\r\n    }\r\n    check_() {\r\n        if (this.isRed_() && this.left.isRed_()) {\r\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\r\n        }\r\n        if (this.right.isRed_()) {\r\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\r\n        }\r\n        const blackDepth = this.left.check_();\r\n        if (blackDepth !== this.right.check_()) {\r\n            throw new Error('Black depths differ');\r\n        }\r\n        else {\r\n            return blackDepth + (this.isRed_() ? 0 : 1);\r\n        }\r\n    }\r\n}\r\nLLRBNode.RED = true;\r\nLLRBNode.BLACK = false;\r\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\r\nclass LLRBEmptyNode {\r\n    /**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        return new LLRBNode(key, value, null);\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        return this;\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return true;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    inorderTraversal(action) {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return false;\r\n    }\r\n    minKey() {\r\n        return null;\r\n    }\r\n    maxKey() {\r\n        return null;\r\n    }\r\n    check_() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns Whether this node is red.\r\n     */\r\n    isRed_() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\r\nclass SortedMap {\r\n    /**\r\n     * @param comparator_ - Key comparator.\r\n     * @param root_ - Optional root node for the map.\r\n     */\r\n    constructor(comparator_, root_ = SortedMap.EMPTY_NODE) {\r\n        this.comparator_ = comparator_;\r\n        this.root_ = root_;\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @returns New map, with item added.\r\n     */\r\n    insert(key, value) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .insert(key, value, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @returns New map, with item removed.\r\n     */\r\n    remove(key) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .remove(key, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param key - The key to look up.\r\n     * @returns The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */\r\n    get(key) {\r\n        let cmp;\r\n        let node = this.root_;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                return node.value;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                node = node.right;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param key - The key to find the predecessor of\r\n     * @returns The predecessor key.\r\n     */\r\n    getPredecessorKey(key) {\r\n        let cmp, node = this.root_, rightParent = null;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                if (!node.left.isEmpty()) {\r\n                    node = node.left;\r\n                    while (!node.right.isEmpty()) {\r\n                        node = node.right;\r\n                    }\r\n                    return node.key;\r\n                }\r\n                else if (rightParent) {\r\n                    return rightParent.key;\r\n                }\r\n                else {\r\n                    return null; // first item.\r\n                }\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                rightParent = node;\r\n                node = node.right;\r\n            }\r\n        }\r\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\r\n    }\r\n    /**\r\n     * @returns True if the map is empty.\r\n     */\r\n    isEmpty() {\r\n        return this.root_.isEmpty();\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the map.\r\n     */\r\n    count() {\r\n        return this.root_.count();\r\n    }\r\n    /**\r\n     * @returns The minimum key in the map.\r\n     */\r\n    minKey() {\r\n        return this.root_.minKey();\r\n    }\r\n    /**\r\n     * @returns The maximum key in the map.\r\n     */\r\n    maxKey() {\r\n        return this.root_.maxKey();\r\n    }\r\n    /**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return this.root_.inorderTraversal(action);\r\n    }\r\n    /**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns True if the traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return this.root_.reverseTraversal(action);\r\n    }\r\n    /**\r\n     * Returns an iterator over the SortedMap.\r\n     * @returns The iterator.\r\n     */\r\n    getIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\r\n    }\r\n    getIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\r\n    }\r\n    getReverseIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\r\n    }\r\n    getReverseIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\r\n    }\r\n}\r\n/**\r\n * Always use the same empty node, to reduce memory.\r\n */\r\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction NAME_ONLY_COMPARATOR(left, right) {\r\n    return nameCompare(left.name, right.name);\r\n}\r\nfunction NAME_COMPARATOR(left, right) {\r\n    return nameCompare(left, right);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet MAX_NODE$2;\r\nfunction setMaxNode$1(val) {\r\n    MAX_NODE$2 = val;\r\n}\r\nconst priorityHashText = function (priority) {\r\n    if (typeof priority === 'number') {\r\n        return 'number:' + doubleToIEEE754String(priority);\r\n    }\r\n    else {\r\n        return 'string:' + priority;\r\n    }\r\n};\r\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n */\r\nconst validatePriorityNode = function (priorityNode) {\r\n    if (priorityNode.isLeafNode()) {\r\n        const val = priorityNode.val();\r\n        assert(typeof val === 'string' ||\r\n            typeof val === 'number' ||\r\n            (typeof val === 'object' && contains(val, '.sv')), 'Priority must be a string or number.');\r\n    }\r\n    else {\r\n        assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\r\n    }\r\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\r\n    assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __childrenNodeConstructor;\r\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\r\nclass LeafNode {\r\n    /**\r\n     * @param value_ - The value to store in this leaf node. The object type is\r\n     * possible in the event of a deferred value\r\n     * @param priorityNode_ - The priority of this node.\r\n     */\r\n    constructor(value_, priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n        this.value_ = value_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.lazyHash_ = null;\r\n        assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\r\n        validatePriorityNode(this.priorityNode_);\r\n    }\r\n    static set __childrenNodeConstructor(val) {\r\n        __childrenNodeConstructor = val;\r\n    }\r\n    static get __childrenNodeConstructor() {\r\n        return __childrenNodeConstructor;\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return true;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        return new LeafNode(this.value_, newPriorityNode);\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this;\r\n        }\r\n        else if (pathGetFront(path) === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    hasChild() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode) {\r\n        return null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else if (newChildNode.isEmpty() && front !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return 0;\r\n    }\r\n    /** @inheritDoc */\r\n    forEachChild(index, action) {\r\n        return false;\r\n    }\r\n    val(exportFormat) {\r\n        if (exportFormat && !this.getPriority().isEmpty()) {\r\n            return {\r\n                '.value': this.getValue(),\r\n                '.priority': this.getPriority().val()\r\n            };\r\n        }\r\n        else {\r\n            return this.getValue();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.priorityNode_.isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.priorityNode_.val()) +\r\n                        ':';\r\n            }\r\n            const type = typeof this.value_;\r\n            toHash += type + ':';\r\n            if (type === 'number') {\r\n                toHash += doubleToIEEE754String(this.value_);\r\n            }\r\n            else {\r\n                toHash += this.value_;\r\n            }\r\n            this.lazyHash_ = sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @returns The value of the node.\r\n     */\r\n    getValue() {\r\n        return this.value_;\r\n    }\r\n    compareTo(other) {\r\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n            return 1;\r\n        }\r\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\r\n            return -1;\r\n        }\r\n        else {\r\n            assert(other.isLeafNode(), 'Unknown node type');\r\n            return this.compareToLeafNode_(other);\r\n        }\r\n    }\r\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     */\r\n    compareToLeafNode_(otherLeaf) {\r\n        const otherLeafType = typeof otherLeaf.value_;\r\n        const thisLeafType = typeof this.value_;\r\n        const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\r\n        const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\r\n        assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\r\n        assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\r\n        if (otherIndex === thisIndex) {\r\n            // Same type, compare values\r\n            if (thisLeafType === 'object') {\r\n                // Deferred value nodes are all equal, but we should also never get to this point...\r\n                return 0;\r\n            }\r\n            else {\r\n                // Note that this works because true > false, all others are number or string comparisons\r\n                if (this.value_ < otherLeaf.value_) {\r\n                    return -1;\r\n                }\r\n                else if (this.value_ === otherLeaf.value_) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return thisIndex - otherIndex;\r\n        }\r\n    }\r\n    withIndex() {\r\n        return this;\r\n    }\r\n    isIndexed() {\r\n        return true;\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            const otherLeaf = other;\r\n            return (this.value_ === otherLeaf.value_ &&\r\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n/**\r\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n * the same type, the comparison falls back to their value\r\n */\r\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet nodeFromJSON$1;\r\nlet MAX_NODE$1;\r\nfunction setNodeFromJSON(val) {\r\n    nodeFromJSON$1 = val;\r\n}\r\nfunction setMaxNode(val) {\r\n    MAX_NODE$1 = val;\r\n}\r\nclass PriorityIndex extends Index {\r\n    compare(a, b) {\r\n        const aPriority = a.node.getPriority();\r\n        const bPriority = b.node.getPriority();\r\n        const indexCmp = aPriority.compareTo(bPriority);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getPriority().isEmpty();\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.getPriority().equals(newNode.getPriority());\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\r\n    }\r\n    makePost(indexValue, name) {\r\n        const priorityNode = nodeFromJSON$1(indexValue);\r\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.priority';\r\n    }\r\n}\r\nconst PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_2 = Math.log(2);\r\nclass Base12Num {\r\n    constructor(length) {\r\n        const logBase2 = (num) => \r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        parseInt((Math.log(num) / LOG_2), 10);\r\n        const bitMask = (bits) => parseInt(Array(bits + 1).join('1'), 2);\r\n        this.count = logBase2(length + 1);\r\n        this.current_ = this.count - 1;\r\n        const mask = bitMask(this.count);\r\n        this.bits_ = (length + 1) & mask;\r\n    }\r\n    nextBitIsOne() {\r\n        //noinspection JSBitwiseOperatorUsage\r\n        const result = !(this.bits_ & (0x1 << this.current_));\r\n        this.current_--;\r\n        return result;\r\n    }\r\n}\r\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @param childList - Unsorted list of children\r\n * @param cmp - The comparison method to be used\r\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\r\n * type is not NamedNode\r\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\r\n */\r\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\r\n    childList.sort(cmp);\r\n    const buildBalancedTree = function (low, high) {\r\n        const length = high - low;\r\n        let namedNode;\r\n        let key;\r\n        if (length === 0) {\r\n            return null;\r\n        }\r\n        else if (length === 1) {\r\n            namedNode = childList[low];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\r\n        }\r\n        else {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const middle = parseInt((length / 2), 10) + low;\r\n            const left = buildBalancedTree(low, middle);\r\n            const right = buildBalancedTree(middle + 1, high);\r\n            namedNode = childList[middle];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\r\n        }\r\n    };\r\n    const buildFrom12Array = function (base12) {\r\n        let node = null;\r\n        let root = null;\r\n        let index = childList.length;\r\n        const buildPennant = function (chunkSize, color) {\r\n            const low = index - chunkSize;\r\n            const high = index;\r\n            index -= chunkSize;\r\n            const childTree = buildBalancedTree(low + 1, high);\r\n            const namedNode = childList[low];\r\n            const key = keyFn ? keyFn(namedNode) : namedNode;\r\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\r\n        };\r\n        const attachPennant = function (pennant) {\r\n            if (node) {\r\n                node.left = pennant;\r\n                node = pennant;\r\n            }\r\n            else {\r\n                root = pennant;\r\n                node = pennant;\r\n            }\r\n        };\r\n        for (let i = 0; i < base12.count; ++i) {\r\n            const isOne = base12.nextBitIsOne();\r\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\r\n            const chunkSize = Math.pow(2, base12.count - (i + 1));\r\n            if (isOne) {\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n            }\r\n            else {\r\n                // current == 2\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n                buildPennant(chunkSize, LLRBNode.RED);\r\n            }\r\n        }\r\n        return root;\r\n    };\r\n    const base12 = new Base12Num(childList.length);\r\n    const root = buildFrom12Array(base12);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    return new SortedMap(mapSortFn || cmp, root);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet _defaultIndexMap;\r\nconst fallbackObject = {};\r\nclass IndexMap {\r\n    constructor(indexes_, indexSet_) {\r\n        this.indexes_ = indexes_;\r\n        this.indexSet_ = indexSet_;\r\n    }\r\n    /**\r\n     * The default IndexMap for nodes without a priority\r\n     */\r\n    static get Default() {\r\n        assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\r\n        _defaultIndexMap =\r\n            _defaultIndexMap ||\r\n                new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\r\n        return _defaultIndexMap;\r\n    }\r\n    get(indexKey) {\r\n        const sortedMap = safeGet(this.indexes_, indexKey);\r\n        if (!sortedMap) {\r\n            throw new Error('No index defined for ' + indexKey);\r\n        }\r\n        if (sortedMap instanceof SortedMap) {\r\n            return sortedMap;\r\n        }\r\n        else {\r\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\r\n            // regular child map\r\n            return null;\r\n        }\r\n    }\r\n    hasIndex(indexDefinition) {\r\n        return contains(this.indexSet_, indexDefinition.toString());\r\n    }\r\n    addIndex(indexDefinition, existingChildren) {\r\n        assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\r\n        const childList = [];\r\n        let sawIndexedValue = false;\r\n        const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n        let next = iter.getNext();\r\n        while (next) {\r\n            sawIndexedValue =\r\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\r\n            childList.push(next);\r\n            next = iter.getNext();\r\n        }\r\n        let newIndex;\r\n        if (sawIndexedValue) {\r\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\r\n        }\r\n        else {\r\n            newIndex = fallbackObject;\r\n        }\r\n        const indexName = indexDefinition.toString();\r\n        const newIndexSet = Object.assign({}, this.indexSet_);\r\n        newIndexSet[indexName] = indexDefinition;\r\n        const newIndexes = Object.assign({}, this.indexes_);\r\n        newIndexes[indexName] = newIndex;\r\n        return new IndexMap(newIndexes, newIndexSet);\r\n    }\r\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     */\r\n    addToIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {\r\n            const index = safeGet(this.indexSet_, indexName);\r\n            assert(index, 'Missing index implementation for ' + indexName);\r\n            if (indexedChildren === fallbackObject) {\r\n                // Check to see if we need to index everything\r\n                if (index.isDefinedOn(namedNode.node)) {\r\n                    // We need to build this index\r\n                    const childList = [];\r\n                    const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n                    let next = iter.getNext();\r\n                    while (next) {\r\n                        if (next.name !== namedNode.name) {\r\n                            childList.push(next);\r\n                        }\r\n                        next = iter.getNext();\r\n                    }\r\n                    childList.push(namedNode);\r\n                    return buildChildSet(childList, index.getCompare());\r\n                }\r\n                else {\r\n                    // No change, this remains a fallback\r\n                    return fallbackObject;\r\n                }\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                let newChildren = indexedChildren;\r\n                if (existingSnap) {\r\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                return newChildren.insert(namedNode, namedNode.node);\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     */\r\n    removeFromIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren) => {\r\n            if (indexedChildren === fallbackObject) {\r\n                // This is the fallback. Just return it, nothing to do in this case\r\n                return indexedChildren;\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                if (existingSnap) {\r\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                else {\r\n                    // No record of this child\r\n                    return indexedChildren;\r\n                }\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\r\nlet EMPTY_NODE;\r\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n */\r\nclass ChildrenNode {\r\n    /**\r\n     * @param children_ - List of children of this node..\r\n     * @param priorityNode_ - The priority of this node (as a snapshot node).\r\n     */\r\n    constructor(children_, priorityNode_, indexMap_) {\r\n        this.children_ = children_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.indexMap_ = indexMap_;\r\n        this.lazyHash_ = null;\r\n        /**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */\r\n        if (this.priorityNode_) {\r\n            validatePriorityNode(this.priorityNode_);\r\n        }\r\n        if (this.children_.isEmpty()) {\r\n            assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\r\n        }\r\n    }\r\n    static get EMPTY_NODE() {\r\n        return (EMPTY_NODE ||\r\n            (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_ || EMPTY_NODE;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        if (this.children_.isEmpty()) {\r\n            // Don't allow priorities on empty nodes\r\n            return this;\r\n        }\r\n        else {\r\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.getPriority();\r\n        }\r\n        else {\r\n            const child = this.children_.get(childName);\r\n            return child === null ? EMPTY_NODE : child;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return this;\r\n        }\r\n        return this.getImmediateChild(front).getChild(pathPopFront(path));\r\n    }\r\n    /** @inheritDoc */\r\n    hasChild(childName) {\r\n        return this.children_.get(childName) !== null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        assert(newChildNode, 'We should always be passing snapshot nodes');\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else {\r\n            const namedNode = new NamedNode(childName, newChildNode);\r\n            let newChildren, newIndexMap;\r\n            if (newChildNode.isEmpty()) {\r\n                newChildren = this.children_.remove(childName);\r\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\r\n            }\r\n            else {\r\n                newChildren = this.children_.insert(childName, newChildNode);\r\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\r\n            }\r\n            const newPriority = newChildren.isEmpty()\r\n                ? EMPTY_NODE\r\n                : this.priorityNode_;\r\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else {\r\n            assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\r\n            return this.updateImmediateChild(front, newImmediateChild);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return this.children_.isEmpty();\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return this.children_.count();\r\n    }\r\n    /** @inheritDoc */\r\n    val(exportFormat) {\r\n        if (this.isEmpty()) {\r\n            return null;\r\n        }\r\n        const obj = {};\r\n        let numKeys = 0, maxKey = 0, allIntegerKeys = true;\r\n        this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            obj[key] = childNode.val(exportFormat);\r\n            numKeys++;\r\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\r\n                maxKey = Math.max(maxKey, Number(key));\r\n            }\r\n            else {\r\n                allIntegerKeys = false;\r\n            }\r\n        });\r\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\r\n            // convert to array.\r\n            const array = [];\r\n            // eslint-disable-next-line guard-for-in\r\n            for (const key in obj) {\r\n                array[key] = obj[key];\r\n            }\r\n            return array;\r\n        }\r\n        else {\r\n            if (exportFormat && !this.getPriority().isEmpty()) {\r\n                obj['.priority'] = this.getPriority().val();\r\n            }\r\n            return obj;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.getPriority().isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.getPriority().val()) +\r\n                        ':';\r\n            }\r\n            this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                const childHash = childNode.hash();\r\n                if (childHash !== '') {\r\n                    toHash += ':' + key + ':' + childHash;\r\n                }\r\n            });\r\n            this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode, index) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\r\n            return predecessor ? predecessor.name : null;\r\n        }\r\n        else {\r\n            return this.children_.getPredecessorKey(childName);\r\n        }\r\n    }\r\n    getFirstChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const minKey = idx.minKey();\r\n            return minKey && minKey.name;\r\n        }\r\n        else {\r\n            return this.children_.minKey();\r\n        }\r\n    }\r\n    getFirstChild(indexDefinition) {\r\n        const minKey = this.getFirstChildName(indexDefinition);\r\n        if (minKey) {\r\n            return new NamedNode(minKey, this.children_.get(minKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     */\r\n    getLastChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const maxKey = idx.maxKey();\r\n            return maxKey && maxKey.name;\r\n        }\r\n        else {\r\n            return this.children_.maxKey();\r\n        }\r\n    }\r\n    getLastChild(indexDefinition) {\r\n        const maxKey = this.getLastChildName(indexDefinition);\r\n        if (maxKey) {\r\n            return new NamedNode(maxKey, this.children_.get(maxKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    forEachChild(index, action) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            return idx.inorderTraversal(wrappedNode => {\r\n                return action(wrappedNode.name, wrappedNode.node);\r\n            });\r\n        }\r\n        else {\r\n            return this.children_.inorderTraversal(action);\r\n        }\r\n    }\r\n    getIterator(indexDefinition) {\r\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\r\n    }\r\n    getIteratorFrom(startPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getIteratorFrom(startPost, key => key);\r\n        }\r\n        else {\r\n            const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    getReverseIterator(indexDefinition) {\r\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\r\n    }\r\n    getReverseIteratorFrom(endPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getReverseIteratorFrom(endPost, key => {\r\n                return key;\r\n            });\r\n        }\r\n        else {\r\n            const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    compareTo(other) {\r\n        if (this.isEmpty()) {\r\n            if (other.isEmpty()) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (other.isLeafNode() || other.isEmpty()) {\r\n            return 1;\r\n        }\r\n        else if (other === MAX_NODE) {\r\n            return -1;\r\n        }\r\n        else {\r\n            // Must be another node with children.\r\n            return 0;\r\n        }\r\n    }\r\n    withIndex(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX ||\r\n            this.indexMap_.hasIndex(indexDefinition)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\r\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\r\n        }\r\n    }\r\n    isIndexed(index) {\r\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            const otherChildrenNode = other;\r\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\r\n                return false;\r\n            }\r\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\r\n                const thisIter = this.getIterator(PRIORITY_INDEX);\r\n                const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\r\n                let thisCurrent = thisIter.getNext();\r\n                let otherCurrent = otherIter.getNext();\r\n                while (thisCurrent && otherCurrent) {\r\n                    if (thisCurrent.name !== otherCurrent.name ||\r\n                        !thisCurrent.node.equals(otherCurrent.node)) {\r\n                        return false;\r\n                    }\r\n                    thisCurrent = thisIter.getNext();\r\n                    otherCurrent = otherIter.getNext();\r\n                }\r\n                return thisCurrent === null && otherCurrent === null;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     */\r\n    resolveIndex_(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this.indexMap_.get(indexDefinition.toString());\r\n        }\r\n    }\r\n}\r\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\r\nclass MaxNode extends ChildrenNode {\r\n    constructor() {\r\n        super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\r\n    }\r\n    compareTo(other) {\r\n        if (other === this) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    }\r\n    equals(other) {\r\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\r\n        return other === this;\r\n    }\r\n    getPriority() {\r\n        return this;\r\n    }\r\n    getImmediateChild(childName) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n */\r\nconst MAX_NODE = new MaxNode();\r\nObject.defineProperties(NamedNode, {\r\n    MIN: {\r\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\r\n    },\r\n    MAX: {\r\n        value: new NamedNode(MAX_NAME, MAX_NODE)\r\n    }\r\n});\r\n/**\r\n * Reference Extensions\r\n */\r\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\r\nLeafNode.__childrenNodeConstructor = ChildrenNode;\r\nsetMaxNode$1(MAX_NODE);\r\nsetMaxNode(MAX_NODE);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst USE_HINZE = true;\r\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param json - JSON to create a node for.\r\n * @param priority - Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n */\r\nfunction nodeFromJSON(json, priority = null) {\r\n    if (json === null) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    if (typeof json === 'object' && '.priority' in json) {\r\n        priority = json['.priority'];\r\n    }\r\n    assert(priority === null ||\r\n        typeof priority === 'string' ||\r\n        typeof priority === 'number' ||\r\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\r\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\r\n        json = json['.value'];\r\n    }\r\n    // Valid leaf nodes include non-objects or server-value wrapper objects\r\n    if (typeof json !== 'object' || '.sv' in json) {\r\n        const jsonLeaf = json;\r\n        return new LeafNode(jsonLeaf, nodeFromJSON(priority));\r\n    }\r\n    if (!(json instanceof Array) && USE_HINZE) {\r\n        const children = [];\r\n        let childrenHavePriority = false;\r\n        const hinzeJsonObj = json;\r\n        each(hinzeJsonObj, (key, child) => {\r\n            if (key.substring(0, 1) !== '.') {\r\n                // Ignore metadata nodes\r\n                const childNode = nodeFromJSON(child);\r\n                if (!childNode.isEmpty()) {\r\n                    childrenHavePriority =\r\n                        childrenHavePriority || !childNode.getPriority().isEmpty();\r\n                    children.push(new NamedNode(key, childNode));\r\n                }\r\n            }\r\n        });\r\n        if (children.length === 0) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\r\n        if (childrenHavePriority) {\r\n            const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\r\n        }\r\n        else {\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\r\n        }\r\n    }\r\n    else {\r\n        let node = ChildrenNode.EMPTY_NODE;\r\n        each(json, (key, childData) => {\r\n            if (contains(json, key)) {\r\n                if (key.substring(0, 1) !== '.') {\r\n                    // ignore metadata nodes.\r\n                    const childNode = nodeFromJSON(childData);\r\n                    if (childNode.isLeafNode() || !childNode.isEmpty()) {\r\n                        node = node.updateImmediateChild(key, childNode);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return node.updatePriority(nodeFromJSON(priority));\r\n    }\r\n}\r\nsetNodeFromJSON(nodeFromJSON);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PathIndex extends Index {\r\n    constructor(indexPath_) {\r\n        super();\r\n        this.indexPath_ = indexPath_;\r\n        assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\r\n    }\r\n    extractChild(snap) {\r\n        return snap.getChild(this.indexPath_);\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getChild(this.indexPath_).isEmpty();\r\n    }\r\n    compare(a, b) {\r\n        const aChild = this.extractChild(a.node);\r\n        const bChild = this.extractChild(b.node);\r\n        const indexCmp = aChild.compareTo(bChild);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\r\n        return new NamedNode(name, node);\r\n    }\r\n    maxPost() {\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\r\n        return new NamedNode(MAX_NAME, node);\r\n    }\r\n    toString() {\r\n        return pathSlice(this.indexPath_, 0).join('/');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ValueIndex extends Index {\r\n    compare(a, b) {\r\n        const indexCmp = a.node.compareTo(b.node);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return true;\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.equals(newNode);\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MAX;\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        return new NamedNode(name, valueNode);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.value';\r\n    }\r\n}\r\nconst VALUE_INDEX = new ValueIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Modeled after base64 web-safe chars, but ordered by ASCII.\r\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\nconst MIN_PUSH_CHAR = '-';\r\nconst MAX_PUSH_CHAR = 'z';\r\nconst MAX_KEY_LEN = 786;\r\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\r\nconst nextPushId = (function () {\r\n    // Timestamp of last push, used to prevent local collisions if you push twice\r\n    // in one ms.\r\n    let lastPushTime = 0;\r\n    // We generate 72-bits of randomness which get turned into 12 characters and\r\n    // appended to the timestamp to prevent collisions with other clients. We\r\n    // store the last characters we generated because in the event of a collision,\r\n    // we'll use those same characters except \"incremented\" by one.\r\n    const lastRandChars = [];\r\n    return function (now) {\r\n        const duplicateTime = now === lastPushTime;\r\n        lastPushTime = now;\r\n        let i;\r\n        const timeStampChars = new Array(8);\r\n        for (i = 7; i >= 0; i--) {\r\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n            // NOTE: Can't use << here because javascript will convert to int and lose\r\n            // the upper bits.\r\n            now = Math.floor(now / 64);\r\n        }\r\n        assert(now === 0, 'Cannot push at time == 0');\r\n        let id = timeStampChars.join('');\r\n        if (!duplicateTime) {\r\n            for (i = 0; i < 12; i++) {\r\n                lastRandChars[i] = Math.floor(Math.random() * 64);\r\n            }\r\n        }\r\n        else {\r\n            // If the timestamp hasn't changed since last push, use the same random\r\n            // number, except incremented by 1.\r\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\r\n                lastRandChars[i] = 0;\r\n            }\r\n            lastRandChars[i]++;\r\n        }\r\n        for (i = 0; i < 12; i++) {\r\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n        }\r\n        assert(id.length === 20, 'nextPushId: Length should be 20.');\r\n        return id;\r\n    };\r\n})();\r\nconst successor = function (key) {\r\n    if (key === '' + INTEGER_32_MAX) {\r\n        // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\r\n        return MIN_PUSH_CHAR;\r\n    }\r\n    const keyAsInt = tryParseInt(key);\r\n    if (keyAsInt != null) {\r\n        return '' + (keyAsInt + 1);\r\n    }\r\n    const next = new Array(key.length);\r\n    for (let i = 0; i < next.length; i++) {\r\n        next[i] = key.charAt(i);\r\n    }\r\n    if (next.length < MAX_KEY_LEN) {\r\n        next.push(MIN_PUSH_CHAR);\r\n        return next.join('');\r\n    }\r\n    let i = next.length - 1;\r\n    while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\r\n        i--;\r\n    }\r\n    // `successor` was called on the largest possible key, so return the\r\n    // MAX_NAME, which sorts larger than all keys.\r\n    if (i === -1) {\r\n        return MAX_NAME;\r\n    }\r\n    const source = next[i];\r\n    const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\r\n    next[i] = sourcePlusOne;\r\n    return next.slice(0, i + 1).join('');\r\n};\r\n// `key` is assumed to be non-empty.\r\nconst predecessor = function (key) {\r\n    if (key === '' + INTEGER_32_MIN) {\r\n        return MIN_NAME;\r\n    }\r\n    const keyAsInt = tryParseInt(key);\r\n    if (keyAsInt != null) {\r\n        return '' + (keyAsInt - 1);\r\n    }\r\n    const next = new Array(key.length);\r\n    for (let i = 0; i < next.length; i++) {\r\n        next[i] = key.charAt(i);\r\n    }\r\n    // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\r\n    // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\r\n    // than that, `predecessor(predecessor(key))`, is\r\n    //\r\n    // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\r\n    //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\r\n    //\r\n    // analogous to increment/decrement for base-10 integers.\r\n    //\r\n    // This works because lexigographic comparison works character-by-character,\r\n    // using length as a tie-breaker if one key is a prefix of the other.\r\n    if (next[next.length - 1] === MIN_PUSH_CHAR) {\r\n        if (next.length === 1) {\r\n            // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\r\n            return '' + INTEGER_32_MAX;\r\n        }\r\n        delete next[next.length - 1];\r\n        return next.join('');\r\n    }\r\n    // Replace the last character with it's immediate predecessor, and\r\n    // fill the suffix of the key with MAX_PUSH_CHAR. This is the\r\n    // lexicographically largest possible key smaller than `key`.\r\n    next[next.length - 1] = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(next[next.length - 1]) - 1);\r\n    return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction changeValue(snapshotNode) {\r\n    return { type: \"value\" /* VALUE */, snapshotNode };\r\n}\r\nfunction changeChildAdded(childName, snapshotNode) {\r\n    return { type: \"child_added\" /* CHILD_ADDED */, snapshotNode, childName };\r\n}\r\nfunction changeChildRemoved(childName, snapshotNode) {\r\n    return { type: \"child_removed\" /* CHILD_REMOVED */, snapshotNode, childName };\r\n}\r\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\r\n    return {\r\n        type: \"child_changed\" /* CHILD_CHANGED */,\r\n        snapshotNode,\r\n        childName,\r\n        oldSnap\r\n    };\r\n}\r\nfunction changeChildMoved(childName, snapshotNode) {\r\n    return { type: \"child_moved\" /* CHILD_MOVED */, snapshotNode, childName };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n */\r\nclass IndexedFilter {\r\n    constructor(index_) {\r\n        this.index_ = index_;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\r\n        const oldChild = snap.getImmediateChild(key);\r\n        // Check if anything actually changed.\r\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\r\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\r\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\r\n            // to avoid treating these cases as \"nothing changed.\"\r\n            if (oldChild.isEmpty() === newChild.isEmpty()) {\r\n                // Nothing changed.\r\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\r\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\r\n                return snap;\r\n            }\r\n        }\r\n        if (optChangeAccumulator != null) {\r\n            if (newChild.isEmpty()) {\r\n                if (snap.hasChild(key)) {\r\n                    optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\r\n                }\r\n                else {\r\n                    assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\r\n                }\r\n            }\r\n            else if (oldChild.isEmpty()) {\r\n                optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\r\n            }\r\n            else {\r\n                optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\r\n            }\r\n        }\r\n        if (snap.isLeafNode() && newChild.isEmpty()) {\r\n            return snap;\r\n        }\r\n        else {\r\n            // Make sure the node is indexed\r\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (optChangeAccumulator != null) {\r\n            if (!oldSnap.isLeafNode()) {\r\n                oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (!newSnap.hasChild(key)) {\r\n                        optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n            if (!newSnap.isLeafNode()) {\r\n                newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (oldSnap.hasChild(key)) {\r\n                        const oldChild = oldSnap.getImmediateChild(key);\r\n                        if (!oldChild.equals(childNode)) {\r\n                            optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\r\n                        }\r\n                    }\r\n                    else {\r\n                        optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return newSnap.withIndex(this.index_);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        if (oldSnap.isEmpty()) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        else {\r\n            return oldSnap.updatePriority(newPriority);\r\n        }\r\n    }\r\n    filtersNodes() {\r\n        return false;\r\n    }\r\n    getIndexedFilter() {\r\n        return this;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n */\r\nclass RangedFilter {\r\n    constructor(params) {\r\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\r\n        this.index_ = params.getIndex();\r\n        this.startPost_ = RangedFilter.getStartPost_(params);\r\n        this.endPost_ = RangedFilter.getEndPost_(params);\r\n    }\r\n    getStartPost() {\r\n        return this.startPost_;\r\n    }\r\n    getEndPost() {\r\n        return this.endPost_;\r\n    }\r\n    matches(node) {\r\n        return (this.index_.compare(this.getStartPost(), node) <= 0 &&\r\n            this.index_.compare(node, this.getEndPost()) <= 0);\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (newSnap.isLeafNode()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            newSnap = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        let filtered = newSnap.withIndex(this.index_);\r\n        // Don't support priorities on queries\r\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n        const self = this;\r\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            if (!self.matches(new NamedNode(key, childNode))) {\r\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\r\n            }\r\n        });\r\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.indexedFilter_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    static getStartPost_(params) {\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\r\n        }\r\n        else {\r\n            return params.getIndex().minPost();\r\n        }\r\n    }\r\n    static getEndPost_(params) {\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\r\n        }\r\n        else {\r\n            return params.getIndex().maxPost();\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n */\r\nclass LimitedFilter {\r\n    constructor(params) {\r\n        this.rangedFilter_ = new RangedFilter(params);\r\n        this.index_ = params.getIndex();\r\n        this.limit_ = params.getLimit();\r\n        this.reverse_ = !params.isViewFromLeft();\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        if (snap.getImmediateChild(key).equals(newChild)) {\r\n            // No change\r\n            return snap;\r\n        }\r\n        else if (snap.numChildren() < this.limit_) {\r\n            return this.rangedFilter_\r\n                .getIndexedFilter()\r\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n        }\r\n        else {\r\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        let filtered;\r\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n        }\r\n        else {\r\n            if (this.limit_ * 2 < newSnap.numChildren() &&\r\n                newSnap.isIndexed(this.index_)) {\r\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\r\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n                // anchor to the startPost, endPost, or last element as appropriate\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\r\n                }\r\n                else {\r\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\r\n                }\r\n                let count = 0;\r\n                while (iterator.hasNext() && count < this.limit_) {\r\n                    const next = iterator.getNext();\r\n                    let inRange;\r\n                    if (this.reverse_) {\r\n                        inRange =\r\n                            this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\r\n                    }\r\n                    else {\r\n                        inRange =\r\n                            this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\r\n                    }\r\n                    if (inRange) {\r\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        // if we have reached the end post, we cannot keep adding elemments\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\r\n                filtered = newSnap.withIndex(this.index_);\r\n                // Don't support priorities on queries\r\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n                let startPost;\r\n                let endPost;\r\n                let cmp;\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = filtered.getReverseIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getEndPost();\r\n                    endPost = this.rangedFilter_.getStartPost();\r\n                    const indexCompare = this.index_.getCompare();\r\n                    cmp = (a, b) => indexCompare(b, a);\r\n                }\r\n                else {\r\n                    iterator = filtered.getIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getStartPost();\r\n                    endPost = this.rangedFilter_.getEndPost();\r\n                    cmp = this.index_.getCompare();\r\n                }\r\n                let count = 0;\r\n                let foundStartPost = false;\r\n                while (iterator.hasNext()) {\r\n                    const next = iterator.getNext();\r\n                    if (!foundStartPost && cmp(startPost, next) <= 0) {\r\n                        // start adding\r\n                        foundStartPost = true;\r\n                    }\r\n                    const inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\r\n                    if (inRange) {\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.rangedFilter_\r\n            .getIndexedFilter()\r\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.rangedFilter_.getIndexedFilter();\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\r\n        // TODO: rename all cache stuff etc to general snap terminology\r\n        let cmp;\r\n        if (this.reverse_) {\r\n            const indexCmp = this.index_.getCompare();\r\n            cmp = (a, b) => indexCmp(b, a);\r\n        }\r\n        else {\r\n            cmp = this.index_.getCompare();\r\n        }\r\n        const oldEventCache = snap;\r\n        assert(oldEventCache.numChildren() === this.limit_, '');\r\n        const newChildNamedNode = new NamedNode(childKey, childSnap);\r\n        const windowBoundary = this.reverse_\r\n            ? oldEventCache.getFirstChild(this.index_)\r\n            : oldEventCache.getLastChild(this.index_);\r\n        const inRange = this.rangedFilter_.matches(newChildNamedNode);\r\n        if (oldEventCache.hasChild(childKey)) {\r\n            const oldChildSnap = oldEventCache.getImmediateChild(childKey);\r\n            let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\r\n            while (nextChild != null &&\r\n                (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\r\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\r\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\r\n                // the limited filter...\r\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\r\n            }\r\n            const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\r\n            const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\r\n            if (remainsInWindow) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\r\n                }\r\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\r\n            }\r\n            else {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\r\n                }\r\n                const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\r\n                const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\r\n                if (nextChildInRange) {\r\n                    if (changeAccumulator != null) {\r\n                        changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\r\n                    }\r\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\r\n                }\r\n                else {\r\n                    return newEventCache;\r\n                }\r\n            }\r\n        }\r\n        else if (childSnap.isEmpty()) {\r\n            // we're deleting a node, but it was not in the window, so ignore it\r\n            return snap;\r\n        }\r\n        else if (inRange) {\r\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\r\n                    changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\r\n                }\r\n                return oldEventCache\r\n                    .updateImmediateChild(childKey, childSnap)\r\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\r\n            }\r\n            else {\r\n                return snap;\r\n            }\r\n        }\r\n        else {\r\n            return snap;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n *\r\n * @internal\r\n */\r\nclass QueryParams {\r\n    constructor() {\r\n        this.limitSet_ = false;\r\n        this.startSet_ = false;\r\n        this.startNameSet_ = false;\r\n        this.startAfterSet_ = false;\r\n        this.endSet_ = false;\r\n        this.endNameSet_ = false;\r\n        this.endBeforeSet_ = false;\r\n        this.limit_ = 0;\r\n        this.viewFrom_ = '';\r\n        this.indexStartValue_ = null;\r\n        this.indexStartName_ = '';\r\n        this.indexEndValue_ = null;\r\n        this.indexEndName_ = '';\r\n        this.index_ = PRIORITY_INDEX;\r\n    }\r\n    hasStart() {\r\n        return this.startSet_;\r\n    }\r\n    hasStartAfter() {\r\n        return this.startAfterSet_;\r\n    }\r\n    hasEndBefore() {\r\n        return this.endBeforeSet_;\r\n    }\r\n    /**\r\n     * @returns True if it would return from left.\r\n     */\r\n    isViewFromLeft() {\r\n        if (this.viewFrom_ === '') {\r\n            // limit(), rather than limitToFirst or limitToLast was called.\r\n            // This means that only one of startSet_ and endSet_ is true. Use them\r\n            // to calculate which side of the view to anchor to. If neither is set,\r\n            // anchor to the end.\r\n            return this.startSet_;\r\n        }\r\n        else {\r\n            return this.viewFrom_ === \"l\" /* VIEW_FROM_LEFT */;\r\n        }\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true\r\n     */\r\n    getIndexStartValue() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        return this.indexStartValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     */\r\n    getIndexStartName() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        if (this.startNameSet_) {\r\n            return this.indexStartName_;\r\n        }\r\n        else {\r\n            return MIN_NAME;\r\n        }\r\n    }\r\n    hasEnd() {\r\n        return this.endSet_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     */\r\n    getIndexEndValue() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        return this.indexEndValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     */\r\n    getIndexEndName() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        if (this.endNameSet_) {\r\n            return this.indexEndName_;\r\n        }\r\n        else {\r\n            return MAX_NAME;\r\n        }\r\n    }\r\n    hasLimit() {\r\n        return this.limitSet_;\r\n    }\r\n    /**\r\n     * @returns True if a limit has been set and it has been explicitly anchored\r\n     */\r\n    hasAnchoredLimit() {\r\n        return this.limitSet_ && this.viewFrom_ !== '';\r\n    }\r\n    /**\r\n     * Only valid to call if hasLimit() returns true\r\n     */\r\n    getLimit() {\r\n        assert(this.limitSet_, 'Only valid if limit has been set');\r\n        return this.limit_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    loadsAllData() {\r\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\r\n    }\r\n    isDefault() {\r\n        return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\r\n    }\r\n    copy() {\r\n        const copy = new QueryParams();\r\n        copy.limitSet_ = this.limitSet_;\r\n        copy.limit_ = this.limit_;\r\n        copy.startSet_ = this.startSet_;\r\n        copy.indexStartValue_ = this.indexStartValue_;\r\n        copy.startNameSet_ = this.startNameSet_;\r\n        copy.indexStartName_ = this.indexStartName_;\r\n        copy.endSet_ = this.endSet_;\r\n        copy.indexEndValue_ = this.indexEndValue_;\r\n        copy.endNameSet_ = this.endNameSet_;\r\n        copy.indexEndName_ = this.indexEndName_;\r\n        copy.index_ = this.index_;\r\n        copy.viewFrom_ = this.viewFrom_;\r\n        return copy;\r\n    }\r\n}\r\nfunction queryParamsGetNodeFilter(queryParams) {\r\n    if (queryParams.loadsAllData()) {\r\n        return new IndexedFilter(queryParams.getIndex());\r\n    }\r\n    else if (queryParams.hasLimit()) {\r\n        return new LimitedFilter(queryParams);\r\n    }\r\n    else {\r\n        return new RangedFilter(queryParams);\r\n    }\r\n}\r\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"l\" /* VIEW_FROM_LEFT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsLimitToLast(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"r\" /* VIEW_FROM_RIGHT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.startSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexStartValue_ = indexValue;\r\n    if (key != null) {\r\n        newParams.startNameSet_ = true;\r\n        newParams.indexStartName_ = key;\r\n    }\r\n    else {\r\n        newParams.startNameSet_ = false;\r\n        newParams.indexStartName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX) {\r\n        if (typeof indexValue === 'string') {\r\n            indexValue = successor(indexValue);\r\n        }\r\n        params = queryParamsStartAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        let childKey;\r\n        if (key == null) {\r\n            childKey = MAX_NAME;\r\n        }\r\n        else {\r\n            childKey = successor(key);\r\n        }\r\n        params = queryParamsStartAt(queryParams, indexValue, childKey);\r\n    }\r\n    params.startAfterSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsEndAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.endSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexEndValue_ = indexValue;\r\n    if (key !== undefined) {\r\n        newParams.endNameSet_ = true;\r\n        newParams.indexEndName_ = key;\r\n    }\r\n    else {\r\n        newParams.endNameSet_ = false;\r\n        newParams.indexEndName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\r\n    let childKey;\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX) {\r\n        if (typeof indexValue === 'string') {\r\n            indexValue = predecessor(indexValue);\r\n        }\r\n        params = queryParamsEndAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        if (key == null) {\r\n            childKey = MIN_NAME;\r\n        }\r\n        else {\r\n            childKey = predecessor(key);\r\n        }\r\n        params = queryParamsEndAt(queryParams, indexValue, childKey);\r\n    }\r\n    params.endBeforeSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsOrderBy(queryParams, index) {\r\n    const newParams = queryParams.copy();\r\n    newParams.index_ = index;\r\n    return newParams;\r\n}\r\n/**\r\n * Returns a set of REST query string parameters representing this query.\r\n *\r\n * @returns query string parameters\r\n */\r\nfunction queryParamsToRestQueryStringParameters(queryParams) {\r\n    const qs = {};\r\n    if (queryParams.isDefault()) {\r\n        return qs;\r\n    }\r\n    let orderBy;\r\n    if (queryParams.index_ === PRIORITY_INDEX) {\r\n        orderBy = \"$priority\" /* PRIORITY_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === VALUE_INDEX) {\r\n        orderBy = \"$value\" /* VALUE_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === KEY_INDEX) {\r\n        orderBy = \"$key\" /* KEY_INDEX */;\r\n    }\r\n    else {\r\n        assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\r\n        orderBy = queryParams.index_.toString();\r\n    }\r\n    qs[\"orderBy\" /* ORDER_BY */] = stringify(orderBy);\r\n    if (queryParams.startSet_) {\r\n        qs[\"startAt\" /* START_AT */] = stringify(queryParams.indexStartValue_);\r\n        if (queryParams.startNameSet_) {\r\n            qs[\"startAt\" /* START_AT */] +=\r\n                ',' + stringify(queryParams.indexStartName_);\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        qs[\"endAt\" /* END_AT */] = stringify(queryParams.indexEndValue_);\r\n        if (queryParams.endNameSet_) {\r\n            qs[\"endAt\" /* END_AT */] +=\r\n                ',' + stringify(queryParams.indexEndName_);\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        if (queryParams.isViewFromLeft()) {\r\n            qs[\"limitToFirst\" /* LIMIT_TO_FIRST */] = queryParams.limit_;\r\n        }\r\n        else {\r\n            qs[\"limitToLast\" /* LIMIT_TO_LAST */] = queryParams.limit_;\r\n        }\r\n    }\r\n    return qs;\r\n}\r\nfunction queryParamsGetQueryObject(queryParams) {\r\n    const obj = {};\r\n    if (queryParams.startSet_) {\r\n        obj[\"sp\" /* INDEX_START_VALUE */] =\r\n            queryParams.indexStartValue_;\r\n        if (queryParams.startNameSet_) {\r\n            obj[\"sn\" /* INDEX_START_NAME */] =\r\n                queryParams.indexStartName_;\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        obj[\"ep\" /* INDEX_END_VALUE */] = queryParams.indexEndValue_;\r\n        if (queryParams.endNameSet_) {\r\n            obj[\"en\" /* INDEX_END_NAME */] = queryParams.indexEndName_;\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        obj[\"l\" /* LIMIT */] = queryParams.limit_;\r\n        let viewFrom = queryParams.viewFrom_;\r\n        if (viewFrom === '') {\r\n            if (queryParams.isViewFromLeft()) {\r\n                viewFrom = \"l\" /* VIEW_FROM_LEFT */;\r\n            }\r\n            else {\r\n                viewFrom = \"r\" /* VIEW_FROM_RIGHT */;\r\n            }\r\n        }\r\n        obj[\"vf\" /* VIEW_FROM */] = viewFrom;\r\n    }\r\n    // For now, priority index is the default, so we only specify if it's some other index\r\n    if (queryParams.index_ !== PRIORITY_INDEX) {\r\n        obj[\"i\" /* INDEX */] = queryParams.index_.toString();\r\n    }\r\n    return obj;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\r\nclass ReadonlyRestClient extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        /** @private {function(...[*])} */\r\n        this.log_ = logWrapper('p:rest:');\r\n        /**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         */\r\n        this.listens_ = {};\r\n    }\r\n    reportStats(stats) {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    static getListenId_(query, tag) {\r\n        if (tag !== undefined) {\r\n            return 'tag$' + tag;\r\n        }\r\n        else {\r\n            assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\r\n            return query._path.toString();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\r\n        // Mark this listener so we can tell if it's removed.\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        const thisListen = {};\r\n        this.listens_[listenId] = thisListen;\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\r\n            }\r\n            if (safeGet(this.listens_, listenId) === thisListen) {\r\n                let status;\r\n                if (!error) {\r\n                    status = 'ok';\r\n                }\r\n                else if (error === 401) {\r\n                    status = 'permission_denied';\r\n                }\r\n                else {\r\n                    status = 'rest_error:' + error;\r\n                }\r\n                onComplete(status, null);\r\n            }\r\n        });\r\n    }\r\n    /** @inheritDoc */\r\n    unlisten(query, tag) {\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        delete this.listens_[listenId];\r\n    }\r\n    get(query) {\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        const pathString = query._path.toString();\r\n        const deferred = new Deferred();\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, \r\n                /*isMerge=*/ false, \r\n                /*tag=*/ null);\r\n                deferred.resolve(data);\r\n            }\r\n            else {\r\n                deferred.reject(new Error(data));\r\n            }\r\n        });\r\n        return deferred.promise;\r\n    }\r\n    /** @inheritDoc */\r\n    refreshAuthToken(token) {\r\n        // no-op since we just always call getToken.\r\n    }\r\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     */\r\n    restRequest_(pathString, queryStringParameters = {}, callback) {\r\n        queryStringParameters['format'] = 'export';\r\n        return Promise.all([\r\n            this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\r\n            this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            if (authToken && authToken.accessToken) {\r\n                queryStringParameters['auth'] = authToken.accessToken;\r\n            }\r\n            if (appCheckToken && appCheckToken.token) {\r\n                queryStringParameters['ac'] = appCheckToken.token;\r\n            }\r\n            const url = (this.repoInfo_.secure ? 'https://' : 'http://') +\r\n                this.repoInfo_.host +\r\n                pathString +\r\n                '?' +\r\n                'ns=' +\r\n                this.repoInfo_.namespace +\r\n                querystring(queryStringParameters);\r\n            this.log_('Sending REST request for ' + url);\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.onreadystatechange = () => {\r\n                if (callback && xhr.readyState === 4) {\r\n                    this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\r\n                    let res = null;\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        try {\r\n                            res = jsonEval(xhr.responseText);\r\n                        }\r\n                        catch (e) {\r\n                            warn('Failed to parse JSON response for ' +\r\n                                url +\r\n                                ': ' +\r\n                                xhr.responseText);\r\n                        }\r\n                        callback(null, res);\r\n                    }\r\n                    else {\r\n                        // 401 and 404 are expected.\r\n                        if (xhr.status !== 401 && xhr.status !== 404) {\r\n                            warn('Got unsuccessful REST response for ' +\r\n                                url +\r\n                                ' Status: ' +\r\n                                xhr.status);\r\n                        }\r\n                        callback(xhr.status);\r\n                    }\r\n                    callback = null;\r\n                }\r\n            };\r\n            xhr.open('GET', url, /*asynchronous=*/ true);\r\n            xhr.send();\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n */\r\nclass SnapshotHolder {\r\n    constructor() {\r\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\r\n    }\r\n    getNode(path) {\r\n        return this.rootNode_.getChild(path);\r\n    }\r\n    updateSnapshot(path, newSnapshotNode) {\r\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newSparseSnapshotTree() {\r\n    return {\r\n        value: null,\r\n        children: new Map()\r\n    };\r\n}\r\n/**\r\n * Stores the given node at the specified path. If there is already a node\r\n * at a shallower path, it merges the new data into that snapshot node.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @param data - The new data, or null.\r\n */\r\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = data;\r\n        sparseSnapshotTree.children.clear();\r\n    }\r\n    else if (sparseSnapshotTree.value !== null) {\r\n        sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(path);\r\n        if (!sparseSnapshotTree.children.has(childKey)) {\r\n            sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\r\n        }\r\n        const child = sparseSnapshotTree.children.get(childKey);\r\n        path = pathPopFront(path);\r\n        sparseSnapshotTreeRemember(child, path, data);\r\n    }\r\n}\r\n/**\r\n * Purge the data at path from the cache.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @returns True if this node should now be removed.\r\n */\r\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = null;\r\n        sparseSnapshotTree.children.clear();\r\n        return true;\r\n    }\r\n    else {\r\n        if (sparseSnapshotTree.value !== null) {\r\n            if (sparseSnapshotTree.value.isLeafNode()) {\r\n                // We're trying to forget a node that doesn't exist\r\n                return false;\r\n            }\r\n            else {\r\n                const value = sparseSnapshotTree.value;\r\n                sparseSnapshotTree.value = null;\r\n                value.forEachChild(PRIORITY_INDEX, (key, tree) => {\r\n                    sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\r\n                });\r\n                return sparseSnapshotTreeForget(sparseSnapshotTree, path);\r\n            }\r\n        }\r\n        else if (sparseSnapshotTree.children.size > 0) {\r\n            const childKey = pathGetFront(path);\r\n            path = pathPopFront(path);\r\n            if (sparseSnapshotTree.children.has(childKey)) {\r\n                const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\r\n                if (safeToRemove) {\r\n                    sparseSnapshotTree.children.delete(childKey);\r\n                }\r\n            }\r\n            return sparseSnapshotTree.children.size === 0;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Recursively iterates through all of the stored tree and calls the\r\n * callback on each one.\r\n *\r\n * @param prefixPath - Path to look up node for.\r\n * @param func - The function to invoke for each tree.\r\n */\r\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\r\n    if (sparseSnapshotTree.value !== null) {\r\n        func(prefixPath, sparseSnapshotTree.value);\r\n    }\r\n    else {\r\n        sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\r\n            const path = new Path(prefixPath.toString() + '/' + key);\r\n            sparseSnapshotTreeForEachTree(tree, path, func);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Iterates through each immediate child and triggers the callback.\r\n * Only seems to be used in tests.\r\n *\r\n * @param func - The function to invoke for each child.\r\n */\r\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\r\n    sparseSnapshotTree.children.forEach((tree, key) => {\r\n        func(key, tree);\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ - The collection to \"listen\" to.\r\n */\r\nclass StatsListener {\r\n    constructor(collection_) {\r\n        this.collection_ = collection_;\r\n        this.last_ = null;\r\n    }\r\n    get() {\r\n        const newStats = this.collection_.get();\r\n        const delta = Object.assign({}, newStats);\r\n        if (this.last_) {\r\n            each(this.last_, (stat, value) => {\r\n                delta[stat] = delta[stat] - value;\r\n            });\r\n        }\r\n        this.last_ = newStats;\r\n        return delta;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\r\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\r\n// seconds to try to ensure the Firebase connection is established / settled.\r\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\r\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\r\n// We'll continue to report stats on average every 5 minutes.\r\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\r\nclass StatsReporter {\r\n    constructor(collection, server_) {\r\n        this.server_ = server_;\r\n        this.statsToReport_ = {};\r\n        this.statsListener_ = new StatsListener(collection);\r\n        const timeout = FIRST_STATS_MIN_TIME +\r\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\r\n    }\r\n    reportStats_() {\r\n        const stats = this.statsListener_.get();\r\n        const reportedStats = {};\r\n        let haveStatsToReport = false;\r\n        each(stats, (stat, value) => {\r\n            if (value > 0 && contains(this.statsToReport_, stat)) {\r\n                reportedStats[stat] = value;\r\n                haveStatsToReport = true;\r\n            }\r\n        });\r\n        if (haveStatsToReport) {\r\n            this.server_.reportStats(reportedStats);\r\n        }\r\n        // queue our next run.\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @enum\r\n */\r\nvar OperationType;\r\n(function (OperationType) {\r\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\r\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\r\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\r\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\r\n})(OperationType || (OperationType = {}));\r\nfunction newOperationSourceUser() {\r\n    return {\r\n        fromUser: true,\r\n        fromServer: false,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServer() {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServerTaggedQuery(queryId) {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId,\r\n        tagged: true\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass AckUserWrite {\r\n    /**\r\n     * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\r\n     */\r\n    constructor(\r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ affectedTree, \r\n    /** @inheritDoc */ revert) {\r\n        this.path = path;\r\n        this.affectedTree = affectedTree;\r\n        this.revert = revert;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.ACK_USER_WRITE;\r\n        /** @inheritDoc */\r\n        this.source = newOperationSourceUser();\r\n    }\r\n    operationForChild(childName) {\r\n        if (!pathIsEmpty(this.path)) {\r\n            assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\r\n            return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\r\n        }\r\n        else if (this.affectedTree.value != null) {\r\n            assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\r\n            // All child locations are affected as well; just return same operation.\r\n            return this;\r\n        }\r\n        else {\r\n            const childTree = this.affectedTree.subtree(new Path(childName));\r\n            return new AckUserWrite(newEmptyPath(), childTree, this.revert);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ListenComplete {\r\n    constructor(source, path) {\r\n        this.source = source;\r\n        this.path = path;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.LISTEN_COMPLETE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new ListenComplete(this.source, newEmptyPath());\r\n        }\r\n        else {\r\n            return new ListenComplete(this.source, pathPopFront(this.path));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Overwrite {\r\n    constructor(source, path, snap) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.snap = snap;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.OVERWRITE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\r\n        }\r\n        else {\r\n            return new Overwrite(this.source, pathPopFront(this.path), this.snap);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Merge {\r\n    constructor(\r\n    /** @inheritDoc */ source, \r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ children) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.children = children;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.MERGE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            const childTree = this.children.subtree(new Path(childName));\r\n            if (childTree.isEmpty()) {\r\n                // This child is unaffected\r\n                return null;\r\n            }\r\n            else if (childTree.value) {\r\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\r\n                return new Overwrite(this.source, newEmptyPath(), childTree.value);\r\n            }\r\n            else {\r\n                // This is a merge at a deeper level\r\n                return new Merge(this.source, newEmptyPath(), childTree);\r\n            }\r\n        }\r\n        else {\r\n            assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\r\n            return new Merge(this.source, pathPopFront(this.path), this.children);\r\n        }\r\n    }\r\n    toString() {\r\n        return ('Operation(' +\r\n            this.path +\r\n            ': ' +\r\n            this.source.toString() +\r\n            ' merge: ' +\r\n            this.children.toString() +\r\n            ')');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\r\nclass CacheNode {\r\n    constructor(node_, fullyInitialized_, filtered_) {\r\n        this.node_ = node_;\r\n        this.fullyInitialized_ = fullyInitialized_;\r\n        this.filtered_ = filtered_;\r\n    }\r\n    /**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     */\r\n    isFullyInitialized() {\r\n        return this.fullyInitialized_;\r\n    }\r\n    /**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     */\r\n    isFiltered() {\r\n        return this.filtered_;\r\n    }\r\n    isCompleteForPath(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this.isFullyInitialized() && !this.filtered_;\r\n        }\r\n        const childKey = pathGetFront(path);\r\n        return this.isCompleteForChild(childKey);\r\n    }\r\n    isCompleteForChild(key) {\r\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\r\n    }\r\n    getNode() {\r\n        return this.node_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n */\r\nclass EventGenerator {\r\n    constructor(query_) {\r\n        this.query_ = query_;\r\n        this.index_ = this.query_._queryParams.getIndex();\r\n    }\r\n}\r\n/**\r\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n *\r\n * Notes:\r\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n *    our index.\r\n *  - prevName will be calculated based on the index ordering.\r\n */\r\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\r\n    const events = [];\r\n    const moves = [];\r\n    changes.forEach(change => {\r\n        if (change.type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n            eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\r\n            moves.push(changeChildMoved(change.childName, change.snapshotNode));\r\n        }\r\n    });\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\" /* CHILD_REMOVED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\" /* CHILD_ADDED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\" /* CHILD_MOVED */, moves, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\" /* CHILD_CHANGED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\" /* VALUE */, changes, eventRegistrations, eventCache);\r\n    return events;\r\n}\r\n/**\r\n * Given changes of a single change type, generate the corresponding events.\r\n */\r\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\r\n    const filteredChanges = changes.filter(change => change.type === eventType);\r\n    filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\r\n    filteredChanges.forEach(change => {\r\n        const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\r\n        registrations.forEach(registration => {\r\n            if (registration.respondsTo(change.type)) {\r\n                events.push(registration.createEvent(materializedChange, eventGenerator.query_));\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\r\n    if (change.type === 'value' || change.type === 'child_removed') {\r\n        return change;\r\n    }\r\n    else {\r\n        change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\r\n        return change;\r\n    }\r\n}\r\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\r\n    if (a.childName == null || b.childName == null) {\r\n        throw assertionError('Should only compare child_ events.');\r\n    }\r\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\r\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\r\n    return eventGenerator.index_.compare(aWrapped, bWrapped);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewCache(eventCache, serverCache) {\r\n    return { eventCache, serverCache };\r\n}\r\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\r\n    return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\r\n}\r\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\r\n    return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\r\n}\r\nfunction viewCacheGetCompleteEventSnap(viewCache) {\r\n    return viewCache.eventCache.isFullyInitialized()\r\n        ? viewCache.eventCache.getNode()\r\n        : null;\r\n}\r\nfunction viewCacheGetCompleteServerSnap(viewCache) {\r\n    return viewCache.serverCache.isFullyInitialized()\r\n        ? viewCache.serverCache.getNode()\r\n        : null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet emptyChildrenSingleton;\r\n/**\r\n * Singleton empty children collection.\r\n *\r\n */\r\nconst EmptyChildren = () => {\r\n    if (!emptyChildrenSingleton) {\r\n        emptyChildrenSingleton = new SortedMap(stringCompare);\r\n    }\r\n    return emptyChildrenSingleton;\r\n};\r\n/**\r\n * A tree with immutable elements.\r\n */\r\nclass ImmutableTree {\r\n    constructor(value, children = EmptyChildren()) {\r\n        this.value = value;\r\n        this.children = children;\r\n    }\r\n    static fromObject(obj) {\r\n        let tree = new ImmutableTree(null);\r\n        each(obj, (childPath, childSnap) => {\r\n            tree = tree.set(new Path(childPath), childSnap);\r\n        });\r\n        return tree;\r\n    }\r\n    /**\r\n     * True if the value is empty and there are no children\r\n     */\r\n    isEmpty() {\r\n        return this.value === null && this.children.isEmpty();\r\n    }\r\n    /**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\r\n     * objects on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param relativePath - The remainder of the path\r\n     * @param predicate - The predicate to satisfy to return a node\r\n     */\r\n    findRootMostMatchingPathAndValue(relativePath, predicate) {\r\n        if (this.value != null && predicate(this.value)) {\r\n            return { path: newEmptyPath(), value: this.value };\r\n        }\r\n        else {\r\n            if (pathIsEmpty(relativePath)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(relativePath);\r\n                const child = this.children.get(front);\r\n                if (child !== null) {\r\n                    const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\r\n                    if (childExistingPathAndValue != null) {\r\n                        const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\r\n                        return { path: fullPath, value: childExistingPathAndValue.value };\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     */\r\n    findRootMostValueAndPath(relativePath) {\r\n        return this.findRootMostMatchingPathAndValue(relativePath, () => true);\r\n    }\r\n    /**\r\n     * @returns The subtree at the given path\r\n     */\r\n    subtree(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const childTree = this.children.get(front);\r\n            if (childTree !== null) {\r\n                return childTree.subtree(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param relativePath - Path to set value at.\r\n     * @param toSet - Value to set.\r\n     * @returns Resulting tree.\r\n     */\r\n    set(relativePath, toSet) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return new ImmutableTree(toSet, this.children);\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.set(pathPopFront(relativePath), toSet);\r\n            const newChildren = this.children.insert(front, newChild);\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param relativePath - Path to value to remove.\r\n     * @returns Resulting tree.\r\n     */\r\n    remove(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            if (this.children.isEmpty()) {\r\n                return new ImmutableTree(null);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null, this.children);\r\n            }\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                const newChild = child.remove(pathPopFront(relativePath));\r\n                let newChildren;\r\n                if (newChild.isEmpty()) {\r\n                    newChildren = this.children.remove(front);\r\n                }\r\n                else {\r\n                    newChildren = this.children.insert(front, newChild);\r\n                }\r\n                if (this.value === null && newChildren.isEmpty()) {\r\n                    return new ImmutableTree(null);\r\n                }\r\n                else {\r\n                    return new ImmutableTree(this.value, newChildren);\r\n                }\r\n            }\r\n            else {\r\n                return this;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param relativePath - Path to get value for.\r\n     * @returns Value at path, or null.\r\n     */\r\n    get(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this.value;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                return child.get(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param relativePath - Path to replace subtree for.\r\n     * @param newTree - New tree.\r\n     * @returns Resulting tree.\r\n     */\r\n    setTree(relativePath, newTree) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return newTree;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.setTree(pathPopFront(relativePath), newTree);\r\n            let newChildren;\r\n            if (newChild.isEmpty()) {\r\n                newChildren = this.children.remove(front);\r\n            }\r\n            else {\r\n                newChildren = this.children.insert(front, newChild);\r\n            }\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     */\r\n    fold(fn) {\r\n        return this.fold_(newEmptyPath(), fn);\r\n    }\r\n    /**\r\n     * Recursive helper for public-facing fold() method\r\n     */\r\n    fold_(pathSoFar, fn) {\r\n        const accum = {};\r\n        this.children.inorderTraversal((childKey, childTree) => {\r\n            accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\r\n        });\r\n        return fn(pathSoFar, this.value, accum);\r\n    }\r\n    /**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     */\r\n    findOnPath(path, f) {\r\n        return this.findOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    findOnPath_(pathToFollow, pathSoFar, f) {\r\n        const result = this.value ? f(pathSoFar, this.value) : false;\r\n        if (result) {\r\n            return result;\r\n        }\r\n        else {\r\n            if (pathIsEmpty(pathToFollow)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(pathToFollow);\r\n                const nextChild = this.children.get(front);\r\n                if (nextChild) {\r\n                    return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    foreachOnPath(path, f) {\r\n        return this.foreachOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    foreachOnPath_(pathToFollow, currentRelativePath, f) {\r\n        if (pathIsEmpty(pathToFollow)) {\r\n            return this;\r\n        }\r\n        else {\r\n            if (this.value) {\r\n                f(currentRelativePath, this.value);\r\n            }\r\n            const front = pathGetFront(pathToFollow);\r\n            const nextChild = this.children.get(front);\r\n            if (nextChild) {\r\n                return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param f - A function to be called with the path from the root of the tree to\r\n     * a node, and the value at that node. Called in depth-first order.\r\n     */\r\n    foreach(f) {\r\n        this.foreach_(newEmptyPath(), f);\r\n    }\r\n    foreach_(currentRelativePath, f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            childTree.foreach_(pathChild(currentRelativePath, childName), f);\r\n        });\r\n        if (this.value) {\r\n            f(currentRelativePath, this.value);\r\n        }\r\n    }\r\n    foreachChild(f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value) {\r\n                f(childName, childTree.value);\r\n            }\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\r\nclass CompoundWrite {\r\n    constructor(writeTree_) {\r\n        this.writeTree_ = writeTree_;\r\n    }\r\n    static empty() {\r\n        return new CompoundWrite(new ImmutableTree(null));\r\n    }\r\n}\r\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\r\n    if (pathIsEmpty(path)) {\r\n        return new CompoundWrite(new ImmutableTree(node));\r\n    }\r\n    else {\r\n        const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n        if (rootmost != null) {\r\n            const rootMostPath = rootmost.path;\r\n            let value = rootmost.value;\r\n            const relativePath = newRelativePath(rootMostPath, path);\r\n            value = value.updateChild(relativePath, node);\r\n            return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\r\n        }\r\n        else {\r\n            const subtree = new ImmutableTree(node);\r\n            const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\r\n            return new CompoundWrite(newWriteTree);\r\n        }\r\n    }\r\n}\r\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\r\n    let newWrite = compoundWrite;\r\n    each(updates, (childKey, node) => {\r\n        newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\r\n    });\r\n    return newWrite;\r\n}\r\n/**\r\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n * location, which must be removed by calling this method with that path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to remove.\r\n * @param path - The path at which a write and all deeper writes should be removed\r\n * @returns The new CompoundWrite with the removed path\r\n */\r\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return CompoundWrite.empty();\r\n    }\r\n    else {\r\n        const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\r\n        return new CompoundWrite(newWriteTree);\r\n    }\r\n}\r\n/**\r\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n * considered \"complete\".\r\n *\r\n * @param compoundWrite - The CompoundWrite to check.\r\n * @param path - The path to check for\r\n * @returns Whether there is a complete write at that path\r\n */\r\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\r\n    return compoundWriteGetCompleteNode(compoundWrite, path) != null;\r\n}\r\n/**\r\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n * writes from deeper paths, but will return child nodes from a more shallow path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get the node from.\r\n * @param path - The path to get a complete write\r\n * @returns The node if complete at that path, or null otherwise.\r\n */\r\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\r\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n    if (rootmost != null) {\r\n        return compoundWrite.writeTree_\r\n            .get(rootmost.path)\r\n            .getChild(newRelativePath(rootmost.path, path));\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Returns all children that are guaranteed to be a complete overwrite.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get children from.\r\n * @returns A list of all complete children.\r\n */\r\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\r\n    const children = [];\r\n    const node = compoundWrite.writeTree_.value;\r\n    if (node != null) {\r\n        // If it's a leaf node, it has no children; so nothing to do.\r\n        if (!node.isLeafNode()) {\r\n            node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n                children.push(new NamedNode(childName, childNode));\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value != null) {\r\n                children.push(new NamedNode(childName, childTree.value));\r\n            }\r\n        });\r\n    }\r\n    return children;\r\n}\r\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return compoundWrite;\r\n    }\r\n    else {\r\n        const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\r\n        if (shadowingNode != null) {\r\n            return new CompoundWrite(new ImmutableTree(shadowingNode));\r\n        }\r\n        else {\r\n            return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n * @returns Whether this CompoundWrite is empty\r\n */\r\nfunction compoundWriteIsEmpty(compoundWrite) {\r\n    return compoundWrite.writeTree_.isEmpty();\r\n}\r\n/**\r\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n * node\r\n * @param node - The node to apply this CompoundWrite to\r\n * @returns The node with all writes applied\r\n */\r\nfunction compoundWriteApply(compoundWrite, node) {\r\n    return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\r\n}\r\nfunction applySubtreeWrite(relativePath, writeTree, node) {\r\n    if (writeTree.value != null) {\r\n        // Since there a write is always a leaf, we're done here\r\n        return node.updateChild(relativePath, writeTree.value);\r\n    }\r\n    else {\r\n        let priorityWrite = null;\r\n        writeTree.children.inorderTraversal((childKey, childTree) => {\r\n            if (childKey === '.priority') {\r\n                // Apply priorities at the end so we don't update priorities for either empty nodes or forget\r\n                // to apply priorities to empty nodes that are later filled\r\n                assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\r\n                priorityWrite = childTree.value;\r\n            }\r\n            else {\r\n                node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\r\n            }\r\n        });\r\n        // If there was a priority write, we only apply it if the node is not empty\r\n        if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\r\n            node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\r\n        }\r\n        return node;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n *\r\n */\r\nfunction writeTreeChildWrites(writeTree, path) {\r\n    return newWriteTreeRef(path, writeTree);\r\n}\r\n/**\r\n * Record a new overwrite from user code.\r\n *\r\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\r\n */\r\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\r\n    if (visible === undefined) {\r\n        visible = true;\r\n    }\r\n    writeTree.allWrites.push({\r\n        path,\r\n        snap,\r\n        writeId,\r\n        visible\r\n    });\r\n    if (visible) {\r\n        writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\r\n    }\r\n    writeTree.lastWriteId = writeId;\r\n}\r\n/**\r\n * Record a new merge from user code.\r\n */\r\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\r\n    writeTree.allWrites.push({\r\n        path,\r\n        children: changedChildren,\r\n        writeId,\r\n        visible: true\r\n    });\r\n    writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\r\n    writeTree.lastWriteId = writeId;\r\n}\r\nfunction writeTreeGetWrite(writeTree, writeId) {\r\n    for (let i = 0; i < writeTree.allWrites.length; i++) {\r\n        const record = writeTree.allWrites[i];\r\n        if (record.writeId === writeId) {\r\n            return record;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n *\r\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n * events as a result).\r\n */\r\nfunction writeTreeRemoveWrite(writeTree, writeId) {\r\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\r\n    // out of order.\r\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\r\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\r\n    const idx = writeTree.allWrites.findIndex(s => {\r\n        return s.writeId === writeId;\r\n    });\r\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\r\n    const writeToRemove = writeTree.allWrites[idx];\r\n    writeTree.allWrites.splice(idx, 1);\r\n    let removedWriteWasVisible = writeToRemove.visible;\r\n    let removedWriteOverlapsWithOtherWrites = false;\r\n    let i = writeTree.allWrites.length - 1;\r\n    while (removedWriteWasVisible && i >= 0) {\r\n        const currentWrite = writeTree.allWrites[i];\r\n        if (currentWrite.visible) {\r\n            if (i >= idx &&\r\n                writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\r\n                // The removed write was completely shadowed by a subsequent write.\r\n                removedWriteWasVisible = false;\r\n            }\r\n            else if (pathContains(writeToRemove.path, currentWrite.path)) {\r\n                // Either we're covering some writes or they're covering part of us (depending on which came first).\r\n                removedWriteOverlapsWithOtherWrites = true;\r\n            }\r\n        }\r\n        i--;\r\n    }\r\n    if (!removedWriteWasVisible) {\r\n        return false;\r\n    }\r\n    else if (removedWriteOverlapsWithOtherWrites) {\r\n        // There's some shadowing going on. Just rebuild the visible writes from scratch.\r\n        writeTreeResetTree_(writeTree);\r\n        return true;\r\n    }\r\n    else {\r\n        // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\r\n        if (writeToRemove.snap) {\r\n            writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\r\n        }\r\n        else {\r\n            const children = writeToRemove.children;\r\n            each(children, (childName) => {\r\n                writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\r\n            });\r\n        }\r\n        return true;\r\n    }\r\n}\r\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\r\n    if (writeRecord.snap) {\r\n        return pathContains(writeRecord.path, path);\r\n    }\r\n    else {\r\n        for (const childName in writeRecord.children) {\r\n            if (writeRecord.children.hasOwnProperty(childName) &&\r\n                pathContains(pathChild(writeRecord.path, childName), path)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n */\r\nfunction writeTreeResetTree_(writeTree) {\r\n    writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\r\n    if (writeTree.allWrites.length > 0) {\r\n        writeTree.lastWriteId =\r\n            writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\r\n    }\r\n    else {\r\n        writeTree.lastWriteId = -1;\r\n    }\r\n}\r\n/**\r\n * The default filter used when constructing the tree. Keep everything that's visible.\r\n */\r\nfunction writeTreeDefaultFilter_(write) {\r\n    return write.visible;\r\n}\r\n/**\r\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n * event data at that path.\r\n */\r\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\r\n    let compoundWrite = CompoundWrite.empty();\r\n    for (let i = 0; i < writes.length; ++i) {\r\n        const write = writes[i];\r\n        // Theory, a later set will either:\r\n        // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\r\n        // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\r\n        if (filter(write)) {\r\n            const writePath = write.path;\r\n            let relativePath;\r\n            if (write.snap) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\r\n                }\r\n                else ;\r\n            }\r\n            else if (write.children) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    if (pathIsEmpty(relativePath)) {\r\n                        compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\r\n                    }\r\n                    else {\r\n                        const child = safeGet(write.children, pathGetFront(relativePath));\r\n                        if (child) {\r\n                            // There exists a child in this node that matches the root path\r\n                            const deepNode = child.getChild(pathPopFront(relativePath));\r\n                            compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\r\n                        }\r\n                    }\r\n                }\r\n                else ;\r\n            }\r\n            else {\r\n                throw assertionError('WriteRecord should have .snap or .children');\r\n            }\r\n        }\r\n    }\r\n    return compoundWrite;\r\n}\r\n/**\r\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n * writes), attempt to calculate a complete snapshot for the given path\r\n *\r\n * @param writeIdsToExclude - An optional set to be excluded\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    if (!writeIdsToExclude && !includeHiddenWrites) {\r\n        const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n        if (shadowingNode != null) {\r\n            return shadowingNode;\r\n        }\r\n        else {\r\n            const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n            if (compoundWriteIsEmpty(subMerge)) {\r\n                return completeServerCache;\r\n            }\r\n            else if (completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\r\n                // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\r\n                return null;\r\n            }\r\n            else {\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(subMerge, layeredCache);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\r\n            return completeServerCache;\r\n        }\r\n        else {\r\n            // If the server cache is null, and we don't have a complete cache, we need to return null\r\n            if (!includeHiddenWrites &&\r\n                completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\r\n                return null;\r\n            }\r\n            else {\r\n                const filter = function (write) {\r\n                    return ((write.visible || includeHiddenWrites) &&\r\n                        (!writeIdsToExclude ||\r\n                            !~writeIdsToExclude.indexOf(write.writeId)) &&\r\n                        (pathContains(write.path, treePath) ||\r\n                            pathContains(treePath, write.path)));\r\n                };\r\n                const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(mergeAtPath, layeredCache);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n * Used when creating new views, to pre-fill their complete event children snapshot.\r\n */\r\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\r\n    let completeChildren = ChildrenNode.EMPTY_NODE;\r\n    const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n    if (topLevelSet) {\r\n        if (!topLevelSet.isLeafNode()) {\r\n            // we're shadowing everything. Return the children.\r\n            topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\r\n                completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\r\n            });\r\n        }\r\n        return completeChildren;\r\n    }\r\n    else if (completeServerChildren) {\r\n        // Layer any children we have on top of this\r\n        // We know we don't have a top-level set, so just enumerate existing children\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\r\n            completeChildren = completeChildren.updateImmediateChild(childName, node);\r\n        });\r\n        // Add any complete children we have from the set\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n    else {\r\n        // We don't have anything to layer on top of. Layer on any children we have\r\n        // Note that we can return an empty snap if we have a defined delete\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n}\r\n/**\r\n * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n * applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist\r\n */\r\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\r\n    assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\r\n    const path = pathChild(treePath, childPath);\r\n    if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\r\n        // At this point we can probably guarantee that we're in case 2, meaning no events\r\n        // May need to check visibility while doing the findRootMostValueAndPath call\r\n        return null;\r\n    }\r\n    else {\r\n        // No complete shadowing. We're either partially shadowing or not shadowing at all.\r\n        const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n        if (compoundWriteIsEmpty(childMerge)) {\r\n            // We're not shadowing at all. Case 1\r\n            return existingServerSnap.getChild(childPath);\r\n        }\r\n        else {\r\n            // This could be more efficient if the serverNode + updates doesn't change the eventSnap\r\n            // However this is tricky to find out, since user updates don't necessary change the server\r\n            // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\r\n            // adds nodes, but doesn't change any existing writes. It is therefore not enough to\r\n            // only check if the updates change the serverNode.\r\n            // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\r\n            return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\r\n    const path = pathChild(treePath, childKey);\r\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n    if (shadowingNode != null) {\r\n        return shadowingNode;\r\n    }\r\n    else {\r\n        if (existingServerSnap.isCompleteForChild(childKey)) {\r\n            const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n            return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n */\r\nfunction writeTreeShadowingWrite(writeTree, path) {\r\n    return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window.\r\n */\r\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\r\n    let toIterate;\r\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n    const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\r\n    if (shadowingNode != null) {\r\n        toIterate = shadowingNode;\r\n    }\r\n    else if (completeServerData != null) {\r\n        toIterate = compoundWriteApply(merge, completeServerData);\r\n    }\r\n    else {\r\n        // no children to iterate on\r\n        return [];\r\n    }\r\n    toIterate = toIterate.withIndex(index);\r\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\r\n        const nodes = [];\r\n        const cmp = index.getCompare();\r\n        const iter = reverse\r\n            ? toIterate.getReverseIteratorFrom(startPost, index)\r\n            : toIterate.getIteratorFrom(startPost, index);\r\n        let next = iter.getNext();\r\n        while (next && nodes.length < count) {\r\n            if (cmp(next, startPost) !== 0) {\r\n                nodes.push(next);\r\n            }\r\n            next = iter.getNext();\r\n        }\r\n        return nodes;\r\n    }\r\n    else {\r\n        return [];\r\n    }\r\n}\r\nfunction newWriteTree() {\r\n    return {\r\n        visibleWrites: CompoundWrite.empty(),\r\n        allWrites: [],\r\n        lastWriteId: -1\r\n    };\r\n}\r\n/**\r\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n * can lead to a more expensive calculation.\r\n *\r\n * @param writeIdsToExclude - Optional writes to exclude.\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\r\n}\r\n/**\r\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n * mix of the given server data and write data.\r\n *\r\n */\r\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\r\n    return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\r\n}\r\n/**\r\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n * if anything, needs to be applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events should be raised\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n *\r\n *\r\n */\r\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\r\n    return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n *\r\n */\r\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\r\n    return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window\r\n */\r\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\r\n    return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\r\n    return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\r\n}\r\n/**\r\n * Return a WriteTreeRef for a child.\r\n */\r\nfunction writeTreeRefChild(writeTreeRef, childName) {\r\n    return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\r\n}\r\nfunction newWriteTreeRef(path, writeTree) {\r\n    return {\r\n        treePath: path,\r\n        writeTree\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ChildChangeAccumulator {\r\n    constructor() {\r\n        this.changeMap = new Map();\r\n    }\r\n    trackChildChange(change) {\r\n        const type = change.type;\r\n        const childKey = change.childName;\r\n        assert(type === \"child_added\" /* CHILD_ADDED */ ||\r\n            type === \"child_changed\" /* CHILD_CHANGED */ ||\r\n            type === \"child_removed\" /* CHILD_REMOVED */, 'Only child changes supported for tracking');\r\n        assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\r\n        const oldChange = this.changeMap.get(childKey);\r\n        if (oldChange) {\r\n            const oldType = oldChange.type;\r\n            if (type === \"child_added\" /* CHILD_ADDED */ &&\r\n                oldType === \"child_removed\" /* CHILD_REMOVED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\r\n            }\r\n            else if (type === \"child_removed\" /* CHILD_REMOVED */ &&\r\n                oldType === \"child_added\" /* CHILD_ADDED */) {\r\n                this.changeMap.delete(childKey);\r\n            }\r\n            else if (type === \"child_removed\" /* CHILD_REMOVED */ &&\r\n                oldType === \"child_changed\" /* CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\r\n            }\r\n            else if (type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n                oldType === \"child_added\" /* CHILD_ADDED */) {\r\n                this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\r\n            }\r\n            else if (type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n                oldType === \"child_changed\" /* CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\r\n            }\r\n            else {\r\n                throw assertionError('Illegal combination of changes: ' +\r\n                    change +\r\n                    ' occurred after ' +\r\n                    oldChange);\r\n            }\r\n        }\r\n        else {\r\n            this.changeMap.set(childKey, change);\r\n        }\r\n    }\r\n    getChanges() {\r\n        return Array.from(this.changeMap.values());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nclass NoCompleteChildSource_ {\r\n    getCompleteChild(childKey) {\r\n        return null;\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Singleton instance.\r\n */\r\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\r\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n */\r\nclass WriteTreeCompleteChildSource {\r\n    constructor(writes_, viewCache_, optCompleteServerCache_ = null) {\r\n        this.writes_ = writes_;\r\n        this.viewCache_ = viewCache_;\r\n        this.optCompleteServerCache_ = optCompleteServerCache_;\r\n    }\r\n    getCompleteChild(childKey) {\r\n        const node = this.viewCache_.eventCache;\r\n        if (node.isCompleteForChild(childKey)) {\r\n            return node.getNode().getImmediateChild(childKey);\r\n        }\r\n        else {\r\n            const serverNode = this.optCompleteServerCache_ != null\r\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\r\n                : this.viewCache_.serverCache;\r\n            return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\r\n        }\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        const completeServerData = this.optCompleteServerCache_ != null\r\n            ? this.optCompleteServerCache_\r\n            : viewCacheGetCompleteServerSnap(this.viewCache_);\r\n        const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\r\n        if (nodes.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return nodes[0];\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewProcessor(filter) {\r\n    return { filter };\r\n}\r\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\r\n    assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\r\n    assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\r\n}\r\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\r\n    const accumulator = new ChildChangeAccumulator();\r\n    let newViewCache, filterServerNode;\r\n    if (operation.type === OperationType.OVERWRITE) {\r\n        const overwrite = operation;\r\n        if (overwrite.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(overwrite.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered  and the\r\n            // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\r\n            // again\r\n            filterServerNode =\r\n                overwrite.source.tagged ||\r\n                    (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\r\n            newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.MERGE) {\r\n        const merge = operation;\r\n        if (merge.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(merge.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered\r\n            filterServerNode =\r\n                merge.source.tagged || oldViewCache.serverCache.isFiltered();\r\n            newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.ACK_USER_WRITE) {\r\n        const ackUserWrite = operation;\r\n        if (!ackUserWrite.revert) {\r\n            newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.LISTEN_COMPLETE) {\r\n        newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\r\n    }\r\n    else {\r\n        throw assertionError('Unknown operation type: ' + operation.type);\r\n    }\r\n    const changes = accumulator.getChanges();\r\n    viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\r\n    return { viewCache: newViewCache, changes };\r\n}\r\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\r\n    const eventSnap = newViewCache.eventCache;\r\n    if (eventSnap.isFullyInitialized()) {\r\n        const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\r\n        const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\r\n        if (accumulator.length > 0 ||\r\n            !oldViewCache.eventCache.isFullyInitialized() ||\r\n            (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\r\n            !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\r\n            accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\r\n        }\r\n    }\r\n}\r\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\r\n    const oldEventSnap = viewCache.eventCache;\r\n    if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\r\n        // we have a shadowing write, ignore changes\r\n        return viewCache;\r\n    }\r\n    else {\r\n        let newEventCache, serverNode;\r\n        if (pathIsEmpty(changePath)) {\r\n            // TODO: figure out how this plays with \"sliding ack windows\"\r\n            assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\r\n            if (viewCache.serverCache.isFiltered()) {\r\n                // We need to special case this, because we need to only apply writes to complete children, or\r\n                // we might end up raising events for incomplete children. If the server data is filtered deep\r\n                // writes cannot be guaranteed to be complete\r\n                const serverCache = viewCacheGetCompleteServerSnap(viewCache);\r\n                const completeChildren = serverCache instanceof ChildrenNode\r\n                    ? serverCache\r\n                    : ChildrenNode.EMPTY_NODE;\r\n                const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\r\n            }\r\n            else {\r\n                const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\r\n            }\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(changePath);\r\n            if (childKey === '.priority') {\r\n                assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\r\n                const oldEventNode = oldEventSnap.getNode();\r\n                serverNode = viewCache.serverCache.getNode();\r\n                // we might have overwrites for this priority\r\n                const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\r\n                if (updatedPriority != null) {\r\n                    newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\r\n                }\r\n                else {\r\n                    // priority didn't change, keep old node\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n            else {\r\n                const childChangePath = pathPopFront(changePath);\r\n                // update child\r\n                let newEventChild;\r\n                if (oldEventSnap.isCompleteForChild(childKey)) {\r\n                    serverNode = viewCache.serverCache.getNode();\r\n                    const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\r\n                    if (eventChildUpdate != null) {\r\n                        newEventChild = oldEventSnap\r\n                            .getNode()\r\n                            .getImmediateChild(childKey)\r\n                            .updateChild(childChangePath, eventChildUpdate);\r\n                    }\r\n                    else {\r\n                        // Nothing changed, just keep the old child\r\n                        newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n                    }\r\n                }\r\n                else {\r\n                    newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n                }\r\n                if (newEventChild != null) {\r\n                    newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\r\n                }\r\n                else {\r\n                    // no complete child available or no change\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n        }\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\r\n    }\r\n}\r\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\r\n    const oldServerSnap = oldViewCache.serverCache;\r\n    let newServerCache;\r\n    const serverFilter = filterServerNode\r\n        ? viewProcessor.filter\r\n        : viewProcessor.filter.getIndexedFilter();\r\n    if (pathIsEmpty(changePath)) {\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\r\n    }\r\n    else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\r\n        // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\r\n        const newServerNode = oldServerSnap\r\n            .getNode()\r\n            .updateChild(changePath, changedSnap);\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (!oldServerSnap.isCompleteForPath(changePath) &&\r\n            pathGetLength(changePath) > 1) {\r\n            // We don't update incomplete nodes with updates intended for other listeners\r\n            return oldViewCache;\r\n        }\r\n        const childChangePath = pathPopFront(changePath);\r\n        const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\r\n        const newChildNode = childNode.updateChild(childChangePath, changedSnap);\r\n        if (childKey === '.priority') {\r\n            newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\r\n        }\r\n        else {\r\n            newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\r\n        }\r\n    }\r\n    const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\r\n    const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\r\n}\r\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\r\n    const oldEventSnap = oldViewCache.eventCache;\r\n    let newViewCache, newEventCache;\r\n    const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\r\n    if (pathIsEmpty(changePath)) {\r\n        newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\r\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (childKey === '.priority') {\r\n            newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\r\n            newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\r\n        }\r\n        else {\r\n            const childChangePath = pathPopFront(changePath);\r\n            const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n            let newChild;\r\n            if (pathIsEmpty(childChangePath)) {\r\n                // Child overwrite, we can replace the child\r\n                newChild = changedSnap;\r\n            }\r\n            else {\r\n                const childNode = source.getCompleteChild(childKey);\r\n                if (childNode != null) {\r\n                    if (pathGetBack(childChangePath) === '.priority' &&\r\n                        childNode.getChild(pathParent(childChangePath)).isEmpty()) {\r\n                        // This is a priority update on an empty node. If this node exists on the server, the\r\n                        // server will send down the priority in the update, so ignore for now\r\n                        newChild = childNode;\r\n                    }\r\n                    else {\r\n                        newChild = childNode.updateChild(childChangePath, changedSnap);\r\n                    }\r\n                }\r\n                else {\r\n                    // There is no complete child node available\r\n                    newChild = ChildrenNode.EMPTY_NODE;\r\n                }\r\n            }\r\n            if (!oldChild.equals(newChild)) {\r\n                const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\r\n                newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\r\n            }\r\n            else {\r\n                newViewCache = oldViewCache;\r\n            }\r\n        }\r\n    }\r\n    return newViewCache;\r\n}\r\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\r\n    return viewCache.eventCache.isCompleteForChild(childKey);\r\n}\r\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\r\n    merge.foreach((relativePath, childNode) => {\r\n        node = node.updateChild(relativePath, childNode);\r\n    });\r\n    return node;\r\n}\r\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\r\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\r\n    // wait for the complete data update coming soon.\r\n    if (viewCache.serverCache.getNode().isEmpty() &&\r\n        !viewCache.serverCache.isFullyInitialized()) {\r\n        return viewCache;\r\n    }\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    let viewMergeTree;\r\n    if (pathIsEmpty(path)) {\r\n        viewMergeTree = changedChildren;\r\n    }\r\n    else {\r\n        viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\r\n    }\r\n    const serverNode = viewCache.serverCache.getNode();\r\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\r\n        if (serverNode.hasChild(childKey)) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\r\n        const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) &&\r\n            childMergeTree.value === undefined;\r\n        if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\r\n    if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\r\n        return viewCache;\r\n    }\r\n    // Only filter server node if it is currently filtered\r\n    const filterServerNode = viewCache.serverCache.isFiltered();\r\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\r\n    // now that it won't be shadowed.\r\n    const serverCache = viewCache.serverCache;\r\n    if (affectedTree.value != null) {\r\n        // This is an overwrite.\r\n        if ((pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\r\n            serverCache.isCompleteForPath(ackPath)) {\r\n            return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else if (pathIsEmpty(ackPath)) {\r\n            // This is a goofy edge case where we are acking data at this location but don't have full data.  We\r\n            // should just re-apply whatever we have in our cache as a merge.\r\n            let changedChildren = new ImmutableTree(null);\r\n            serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\r\n                changedChildren = changedChildren.set(new Path(name), node);\r\n            });\r\n            return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else {\r\n            return viewCache;\r\n        }\r\n    }\r\n    else {\r\n        // This is a merge.\r\n        let changedChildren = new ImmutableTree(null);\r\n        affectedTree.foreach((mergePath, value) => {\r\n            const serverCachePath = pathChild(ackPath, mergePath);\r\n            if (serverCache.isCompleteForPath(serverCachePath)) {\r\n                changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\r\n            }\r\n        });\r\n        return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n    }\r\n}\r\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\r\n    const oldServerNode = viewCache.serverCache;\r\n    const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\r\n}\r\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\r\n    let complete;\r\n    if (writeTreeRefShadowingWrite(writesCache, path) != null) {\r\n        return viewCache;\r\n    }\r\n    else {\r\n        const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\r\n        const oldEventCache = viewCache.eventCache.getNode();\r\n        let newEventCache;\r\n        if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\r\n            let newNode;\r\n            if (viewCache.serverCache.isFullyInitialized()) {\r\n                newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n            }\r\n            else {\r\n                const serverChildren = viewCache.serverCache.getNode();\r\n                assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\r\n                newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\r\n            }\r\n            newNode = newNode;\r\n            newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(path);\r\n            let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n            if (newChild == null &&\r\n                viewCache.serverCache.isCompleteForChild(childKey)) {\r\n                newChild = oldEventCache.getImmediateChild(childKey);\r\n            }\r\n            if (newChild != null) {\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\r\n            }\r\n            else if (viewCache.eventCache.getNode().hasChild(childKey)) {\r\n                // No complete child available, delete the existing one, if any\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\r\n            }\r\n            else {\r\n                newEventCache = oldEventCache;\r\n            }\r\n            if (newEventCache.isEmpty() &&\r\n                viewCache.serverCache.isFullyInitialized()) {\r\n                // We might have reverted all child writes. Maybe the old event was a leaf node\r\n                complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                if (complete.isLeafNode()) {\r\n                    newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\r\n                }\r\n            }\r\n        }\r\n        complete =\r\n            viewCache.serverCache.isFullyInitialized() ||\r\n                writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n */\r\nclass View {\r\n    constructor(query_, initialViewCache) {\r\n        this.query_ = query_;\r\n        this.eventRegistrations_ = [];\r\n        const params = this.query_._queryParams;\r\n        const indexFilter = new IndexedFilter(params.getIndex());\r\n        const filter = queryParamsGetNodeFilter(params);\r\n        this.processor_ = newViewProcessor(filter);\r\n        const initialServerCache = initialViewCache.serverCache;\r\n        const initialEventCache = initialViewCache.eventCache;\r\n        // Don't filter server node with other filter than index, wait for tagged listen\r\n        const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\r\n        const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\r\n        const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\r\n        const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\r\n        this.viewCache_ = newViewCache(newEventCache, newServerCache);\r\n        this.eventGenerator_ = new EventGenerator(this.query_);\r\n    }\r\n    get query() {\r\n        return this.query_;\r\n    }\r\n}\r\nfunction viewGetServerCache(view) {\r\n    return view.viewCache_.serverCache.getNode();\r\n}\r\nfunction viewGetCompleteNode(view) {\r\n    return viewCacheGetCompleteEventSnap(view.viewCache_);\r\n}\r\nfunction viewGetCompleteServerCache(view, path) {\r\n    const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\r\n    if (cache) {\r\n        // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\r\n        // we need to see if it contains the child we're interested in.\r\n        if (view.query._queryParams.loadsAllData() ||\r\n            (!pathIsEmpty(path) &&\r\n                !cache.getImmediateChild(pathGetFront(path)).isEmpty())) {\r\n            return cache.getChild(path);\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction viewIsEmpty(view) {\r\n    return view.eventRegistrations_.length === 0;\r\n}\r\nfunction viewAddEventRegistration(view, eventRegistration) {\r\n    view.eventRegistrations_.push(eventRegistration);\r\n}\r\n/**\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\r\n    const cancelEvents = [];\r\n    if (cancelError) {\r\n        assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\r\n        const path = view.query._path;\r\n        view.eventRegistrations_.forEach(registration => {\r\n            const maybeEvent = registration.createCancelEvent(cancelError, path);\r\n            if (maybeEvent) {\r\n                cancelEvents.push(maybeEvent);\r\n            }\r\n        });\r\n    }\r\n    if (eventRegistration) {\r\n        let remaining = [];\r\n        for (let i = 0; i < view.eventRegistrations_.length; ++i) {\r\n            const existing = view.eventRegistrations_[i];\r\n            if (!existing.matches(eventRegistration)) {\r\n                remaining.push(existing);\r\n            }\r\n            else if (eventRegistration.hasAnyCallback()) {\r\n                // We're removing just this one\r\n                remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\r\n                break;\r\n            }\r\n        }\r\n        view.eventRegistrations_ = remaining;\r\n    }\r\n    else {\r\n        view.eventRegistrations_ = [];\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n */\r\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\r\n    if (operation.type === OperationType.MERGE &&\r\n        operation.source.queryId !== null) {\r\n        assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\r\n        assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\r\n    }\r\n    const oldViewCache = view.viewCache_;\r\n    const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\r\n    viewProcessorAssertIndexed(view.processor_, result.viewCache);\r\n    assert(result.viewCache.serverCache.isFullyInitialized() ||\r\n        !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\r\n    view.viewCache_ = result.viewCache;\r\n    return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\r\n}\r\nfunction viewGetInitialEvents(view, registration) {\r\n    const eventSnap = view.viewCache_.eventCache;\r\n    const initialChanges = [];\r\n    if (!eventSnap.getNode().isLeafNode()) {\r\n        const eventNode = eventSnap.getNode();\r\n        eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            initialChanges.push(changeChildAdded(key, childNode));\r\n        });\r\n    }\r\n    if (eventSnap.isFullyInitialized()) {\r\n        initialChanges.push(changeValue(eventSnap.getNode()));\r\n    }\r\n    return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\r\n}\r\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\r\n    const registrations = eventRegistration\r\n        ? [eventRegistration]\r\n        : view.eventRegistrations_;\r\n    return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor$1;\r\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\r\nclass SyncPoint {\r\n    constructor() {\r\n        /**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         */\r\n        this.views = new Map();\r\n    }\r\n}\r\nfunction syncPointSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\r\n    referenceConstructor$1 = val;\r\n}\r\nfunction syncPointGetReferenceConstructor() {\r\n    assert(referenceConstructor$1, 'Reference.ts has not been loaded');\r\n    return referenceConstructor$1;\r\n}\r\nfunction syncPointIsEmpty(syncPoint) {\r\n    return syncPoint.views.size === 0;\r\n}\r\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\r\n    const queryId = operation.source.queryId;\r\n    if (queryId !== null) {\r\n        const view = syncPoint.views.get(queryId);\r\n        assert(view != null, 'SyncTree gave us an op for an invalid query.');\r\n        return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\r\n    }\r\n    else {\r\n        let events = [];\r\n        for (const view of syncPoint.views.values()) {\r\n            events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Get a view for the specified query.\r\n *\r\n * @param query - The query to return a view for\r\n * @param writesCache\r\n * @param serverCache\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\r\n    const queryId = query._queryIdentifier;\r\n    const view = syncPoint.views.get(queryId);\r\n    if (!view) {\r\n        // TODO: make writesCache take flag for complete server node\r\n        let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\r\n        let eventCacheComplete = false;\r\n        if (eventCache) {\r\n            eventCacheComplete = true;\r\n        }\r\n        else if (serverCache instanceof ChildrenNode) {\r\n            eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\r\n            eventCacheComplete = false;\r\n        }\r\n        else {\r\n            eventCache = ChildrenNode.EMPTY_NODE;\r\n            eventCacheComplete = false;\r\n        }\r\n        const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\r\n        return new View(query, viewCache);\r\n    }\r\n    return view;\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @param query\r\n * @param eventRegistration\r\n * @param writesCache\r\n * @param serverCache - Complete server cache, if we have it.\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\r\n    if (!syncPoint.views.has(query._queryIdentifier)) {\r\n        syncPoint.views.set(query._queryIdentifier, view);\r\n    }\r\n    // This is guaranteed to exist now, we just created anything that was missing\r\n    viewAddEventRegistration(view, eventRegistration);\r\n    return viewGetInitialEvents(view, eventRegistration);\r\n}\r\n/**\r\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n *\r\n * If query is the default query, we'll check all views for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n *\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns removed queries and any cancel events\r\n */\r\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\r\n    const queryId = query._queryIdentifier;\r\n    const removed = [];\r\n    let cancelEvents = [];\r\n    const hadCompleteView = syncPointHasCompleteView(syncPoint);\r\n    if (queryId === 'default') {\r\n        // When you do ref.off(...), we search all views for the registration to remove.\r\n        for (const [viewQueryId, view] of syncPoint.views.entries()) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(viewQueryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // remove the callback from the specific view.\r\n        const view = syncPoint.views.get(queryId);\r\n        if (view) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(queryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\r\n        // We removed our last complete view.\r\n        removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\r\n    }\r\n    return { removed, events: cancelEvents };\r\n}\r\nfunction syncPointGetQueryViews(syncPoint) {\r\n    const result = [];\r\n    for (const view of syncPoint.views.values()) {\r\n        if (!view.query._queryParams.loadsAllData()) {\r\n            result.push(view);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * @param path - The path to the desired complete snapshot\r\n * @returns A complete cache, if it exists\r\n */\r\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\r\n    let serverCache = null;\r\n    for (const view of syncPoint.views.values()) {\r\n        serverCache = serverCache || viewGetCompleteServerCache(view, path);\r\n    }\r\n    return serverCache;\r\n}\r\nfunction syncPointViewForQuery(syncPoint, query) {\r\n    const params = query._queryParams;\r\n    if (params.loadsAllData()) {\r\n        return syncPointGetCompleteView(syncPoint);\r\n    }\r\n    else {\r\n        const queryId = query._queryIdentifier;\r\n        return syncPoint.views.get(queryId);\r\n    }\r\n}\r\nfunction syncPointViewExistsForQuery(syncPoint, query) {\r\n    return syncPointViewForQuery(syncPoint, query) != null;\r\n}\r\nfunction syncPointHasCompleteView(syncPoint) {\r\n    return syncPointGetCompleteView(syncPoint) != null;\r\n}\r\nfunction syncPointGetCompleteView(syncPoint) {\r\n    for (const view of syncPoint.views.values()) {\r\n        if (view.query._queryParams.loadsAllData()) {\r\n            return view;\r\n        }\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor;\r\nfunction syncTreeSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor, '__referenceConstructor has already been defined');\r\n    referenceConstructor = val;\r\n}\r\nfunction syncTreeGetReferenceConstructor() {\r\n    assert(referenceConstructor, 'Reference.ts has not been loaded');\r\n    return referenceConstructor;\r\n}\r\n/**\r\n * Static tracker for next query tag.\r\n */\r\nlet syncTreeNextQueryTag_ = 1;\r\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n */\r\nclass SyncTree {\r\n    /**\r\n     * @param listenProvider_ - Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */\r\n    constructor(listenProvider_) {\r\n        this.listenProvider_ = listenProvider_;\r\n        /**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         */\r\n        this.syncPointTree_ = new ImmutableTree(null);\r\n        /**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         */\r\n        this.pendingWriteTree_ = newWriteTree();\r\n        this.tagToQueryMap = new Map();\r\n        this.queryToTagMap = new Map();\r\n    }\r\n}\r\n/**\r\n * Apply the data changes for a user-generated set() or transaction() call.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\r\n    // Record pending write.\r\n    writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\r\n    if (!visible) {\r\n        return [];\r\n    }\r\n    else {\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\r\n    }\r\n}\r\n/**\r\n * Apply the data from a user-generated update() call\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\r\n    // Record pending merge.\r\n    writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\r\n}\r\n/**\r\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n *\r\n * @param revert - True if the given write failed and needs to be reverted\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAckUserWrite(syncTree, writeId, revert = false) {\r\n    const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\r\n    const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\r\n    if (!needToReevaluate) {\r\n        return [];\r\n    }\r\n    else {\r\n        let affectedTree = new ImmutableTree(null);\r\n        if (write.snap != null) {\r\n            // overwrite\r\n            affectedTree = affectedTree.set(newEmptyPath(), true);\r\n        }\r\n        else {\r\n            each(write.children, (pathString) => {\r\n                affectedTree = affectedTree.set(new Path(pathString), true);\r\n            });\r\n        }\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\r\n    }\r\n}\r\n/**\r\n * Apply new server data for the specified path..\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\r\n}\r\n/**\r\n * Apply new server data to be merged in at the specified path.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\r\n}\r\n/**\r\n * Apply a listen complete for a query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyListenComplete(syncTree, path) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\r\n}\r\n/**\r\n * Apply a listen complete for a tagged query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Remove event callback(s).\r\n *\r\n * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n *\r\n * @param eventRegistration - If null, all callbacks are removed.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError) {\r\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\r\n    const path = query._path;\r\n    const maybeSyncPoint = syncTree.syncPointTree_.get(path);\r\n    let cancelEvents = [];\r\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\r\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\r\n    // not loadsAllData().\r\n    if (maybeSyncPoint &&\r\n        (query._queryIdentifier === 'default' ||\r\n            syncPointViewExistsForQuery(maybeSyncPoint, query))) {\r\n        const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\r\n        if (syncPointIsEmpty(maybeSyncPoint)) {\r\n            syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\r\n        }\r\n        const removed = removedAndEvents.removed;\r\n        cancelEvents = removedAndEvents.events;\r\n        // We may have just removed one of many listeners and can short-circuit this whole process\r\n        // We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n        // properly set up.\r\n        //\r\n        // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\r\n        // queryId === 'default'\r\n        const removingDefault = -1 !==\r\n            removed.findIndex(query => {\r\n                return query._queryParams.loadsAllData();\r\n            });\r\n        const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\r\n        if (removingDefault && !covered) {\r\n            const subtree = syncTree.syncPointTree_.subtree(path);\r\n            // There are potentially child listeners. Determine what if any listens we need to send before executing the\r\n            // removal\r\n            if (!subtree.isEmpty()) {\r\n                // We need to fold over our subtree and collect the listeners to send\r\n                const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\r\n                // Ok, we've collected all the listens we need. Set them up.\r\n                for (let i = 0; i < newViews.length; ++i) {\r\n                    const view = newViews[i], newQuery = view.query;\r\n                    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n                    syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery_(syncTree, newQuery), listener.hashFn, listener.onComplete);\r\n                }\r\n            }\r\n        }\r\n        // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\r\n        // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\r\n        // Also, note that if we have a cancelError, it's already been removed at the provider level.\r\n        if (!covered && removed.length > 0 && !cancelError) {\r\n            // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\r\n            // default. Otherwise, we need to iterate through and cancel each individual query\r\n            if (removingDefault) {\r\n                // We don't tag default listeners\r\n                const defaultTag = null;\r\n                syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\r\n            }\r\n            else {\r\n                removed.forEach((queryToRemove) => {\r\n                    const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\r\n                    syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\r\n                });\r\n            }\r\n        }\r\n        // Now, clear all of the tags we're tracking for the removed listens\r\n        syncTreeRemoveTags_(syncTree, removed);\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Apply new server data for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey != null) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // Query must have been removed already\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Apply server data to be merged in for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const changeTree = ImmutableTree.fromObject(changedChildren);\r\n        const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    let foundAncestorDefaultView = false;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(sp);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let serverCacheComplete;\r\n    if (serverCache != null) {\r\n        serverCacheComplete = true;\r\n    }\r\n    else {\r\n        serverCacheComplete = false;\r\n        serverCache = ChildrenNode.EMPTY_NODE;\r\n        const subtree = syncTree.syncPointTree_.subtree(path);\r\n        subtree.foreachChild((childName, childSyncPoint) => {\r\n            const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\r\n            if (completeCache) {\r\n                serverCache = serverCache.updateImmediateChild(childName, completeCache);\r\n            }\r\n        });\r\n    }\r\n    const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\r\n    if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\r\n        // We need to track a tag for this query\r\n        const queryKey = syncTreeMakeQueryKey_(query);\r\n        assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\r\n        const tag = syncTreeGetNextQueryTag_();\r\n        syncTree.queryToTagMap.set(queryKey, tag);\r\n        syncTree.tagToQueryMap.set(tag, queryKey);\r\n    }\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\r\n    let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\r\n    if (!viewAlreadyExists && !foundAncestorDefaultView) {\r\n        const view = syncPointViewForQuery(syncPoint, query);\r\n        events = events.concat(syncTreeSetupListener_(syncTree, query, view));\r\n    }\r\n    return events;\r\n}\r\n/**\r\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n *\r\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n *\r\n * @param path - The path to the data we want\r\n * @param writeIdsToExclude - A specific set to be excluded\r\n */\r\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\r\n    const includeHiddenSets = true;\r\n    const writeTree = syncTree.pendingWriteTree_;\r\n    const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\r\n        const relativePath = newRelativePath(pathSoFar, path);\r\n        const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\r\n        if (serverCache) {\r\n            return serverCache;\r\n        }\r\n    });\r\n    return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\r\n}\r\nfunction syncTreeGetServerValue(syncTree, query) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    const serverCacheComplete = serverCache != null;\r\n    const serverCacheNode = serverCacheComplete\r\n        ? new CacheNode(serverCache, true, false)\r\n        : null;\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\r\n    return viewGetCompleteNode(view);\r\n}\r\n/**\r\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n *\r\n * NOTES:\r\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n *\r\n * - We call applyOperation() on each SyncPoint passing three things:\r\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n *   3. A snapshot Node with cached server data, if we have it.\r\n *\r\n * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n */\r\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\r\n    return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, \r\n    /*serverCache=*/ null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    if (pathIsEmpty(operation.path)) {\r\n        return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\r\n    }\r\n    else {\r\n        const syncPoint = syncPointTree.get(newEmptyPath());\r\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n        if (serverCache == null && syncPoint != null) {\r\n            serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n        }\r\n        let events = [];\r\n        const childName = pathGetFront(operation.path);\r\n        const childOperation = operation.operationForChild(childName);\r\n        const childTree = syncPointTree.children.get(childName);\r\n        if (childTree && childOperation) {\r\n            const childServerCache = serverCache\r\n                ? serverCache.getImmediateChild(childName)\r\n                : null;\r\n            const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n            events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n        if (syncPoint) {\r\n            events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    const syncPoint = syncPointTree.get(newEmptyPath());\r\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n    if (serverCache == null && syncPoint != null) {\r\n        serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let events = [];\r\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\r\n        const childServerCache = serverCache\r\n            ? serverCache.getImmediateChild(childName)\r\n            : null;\r\n        const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n        const childOperation = operation.operationForChild(childName);\r\n        if (childOperation) {\r\n            events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n    });\r\n    if (syncPoint) {\r\n        events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n    }\r\n    return events;\r\n}\r\nfunction syncTreeCreateListenerForView_(syncTree, view) {\r\n    const query = view.query;\r\n    const tag = syncTreeTagForQuery_(syncTree, query);\r\n    return {\r\n        hashFn: () => {\r\n            const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\r\n            return cache.hash();\r\n        },\r\n        onComplete: (status) => {\r\n            if (status === 'ok') {\r\n                if (tag) {\r\n                    return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\r\n                }\r\n                else {\r\n                    return syncTreeApplyListenComplete(syncTree, query._path);\r\n                }\r\n            }\r\n            else {\r\n                // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\r\n                // Note that this may need to be scoped to just this listener if we change permissions on filtered children\r\n                const error = errorForServerCode(status, query);\r\n                return syncTreeRemoveEventRegistration(syncTree, query, \r\n                /*eventRegistration*/ null, error);\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * Return the tag associated with the given query.\r\n */\r\nfunction syncTreeTagForQuery_(syncTree, query) {\r\n    const queryKey = syncTreeMakeQueryKey_(query);\r\n    return syncTree.queryToTagMap.get(queryKey);\r\n}\r\n/**\r\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n */\r\nfunction syncTreeMakeQueryKey_(query) {\r\n    return query._path.toString() + '$' + query._queryIdentifier;\r\n}\r\n/**\r\n * Return the query associated with the given tag, if we have one\r\n */\r\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\r\n    return syncTree.tagToQueryMap.get(tag);\r\n}\r\n/**\r\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n */\r\nfunction syncTreeParseQueryKey_(queryKey) {\r\n    const splitIndex = queryKey.indexOf('$');\r\n    assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\r\n    return {\r\n        queryId: queryKey.substr(splitIndex + 1),\r\n        path: new Path(queryKey.substr(0, splitIndex))\r\n    };\r\n}\r\n/**\r\n * A helper method to apply tagged operations\r\n */\r\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\r\n    const syncPoint = syncTree.syncPointTree_.get(queryPath);\r\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\r\n    return syncPointApplyOperation(syncPoint, operation, writesCache, null);\r\n}\r\n/**\r\n * This collapses multiple unfiltered views into a single view, since we only need a single\r\n * listener for them.\r\n */\r\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\r\n    return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n        if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n            const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\r\n            return [completeView];\r\n        }\r\n        else {\r\n            // No complete view here, flatten any deeper listens into an array\r\n            let views = [];\r\n            if (maybeChildSyncPoint) {\r\n                views = syncPointGetQueryViews(maybeChildSyncPoint);\r\n            }\r\n            each(childMap, (_key, childViews) => {\r\n                views = views.concat(childViews);\r\n            });\r\n            return views;\r\n        }\r\n    });\r\n}\r\n/**\r\n * Normalizes a query to a query we send the server for listening\r\n *\r\n * @returns The normalized query\r\n */\r\nfunction syncTreeQueryForListening_(query) {\r\n    if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\r\n        // We treat queries that load all data as default queries\r\n        // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\r\n        // from Query\r\n        return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\r\n    }\r\n    else {\r\n        return query;\r\n    }\r\n}\r\nfunction syncTreeRemoveTags_(syncTree, queries) {\r\n    for (let j = 0; j < queries.length; ++j) {\r\n        const removedQuery = queries[j];\r\n        if (!removedQuery._queryParams.loadsAllData()) {\r\n            // We should have a tag for this\r\n            const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\r\n            const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\r\n            syncTree.queryToTagMap.delete(removedQueryKey);\r\n            syncTree.tagToQueryMap.delete(removedQueryTag);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Static accessor for query tags.\r\n */\r\nfunction syncTreeGetNextQueryTag_() {\r\n    return syncTreeNextQueryTag_++;\r\n}\r\n/**\r\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n *\r\n * @returns This method can return events to support synchronous data sources\r\n */\r\nfunction syncTreeSetupListener_(syncTree, query, view) {\r\n    const path = query._path;\r\n    const tag = syncTreeTagForQuery_(syncTree, query);\r\n    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n    const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\r\n    const subtree = syncTree.syncPointTree_.subtree(path);\r\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\r\n    // may need to shadow other listens as well.\r\n    if (tag) {\r\n        assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\r\n    }\r\n    else {\r\n        // Shadow everything at or below this location, this is a default listener.\r\n        const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n            if (!pathIsEmpty(relativePath) &&\r\n                maybeChildSyncPoint &&\r\n                syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n                return [syncPointGetCompleteView(maybeChildSyncPoint).query];\r\n            }\r\n            else {\r\n                // No default listener here, flatten any deeper queries into an array\r\n                let queries = [];\r\n                if (maybeChildSyncPoint) {\r\n                    queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\r\n                }\r\n                each(childMap, (_key, childQueries) => {\r\n                    queries = queries.concat(childQueries);\r\n                });\r\n                return queries;\r\n            }\r\n        });\r\n        for (let i = 0; i < queriesToStop.length; ++i) {\r\n            const queryToStop = queriesToStop[i];\r\n            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery_(syncTree, queryToStop));\r\n        }\r\n    }\r\n    return events;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ExistingValueProvider {\r\n    constructor(node_) {\r\n        this.node_ = node_;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const child = this.node_.getImmediateChild(childName);\r\n        return new ExistingValueProvider(child);\r\n    }\r\n    node() {\r\n        return this.node_;\r\n    }\r\n}\r\nclass DeferredValueProvider {\r\n    constructor(syncTree, path) {\r\n        this.syncTree_ = syncTree;\r\n        this.path_ = path;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const childPath = pathChild(this.path_, childName);\r\n        return new DeferredValueProvider(this.syncTree_, childPath);\r\n    }\r\n    node() {\r\n        return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\r\n    }\r\n}\r\n/**\r\n * Generate placeholders for deferred values.\r\n */\r\nconst generateWithValues = function (values) {\r\n    values = values || {};\r\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\r\n    return values;\r\n};\r\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n */\r\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\r\n    if (!value || typeof value !== 'object') {\r\n        return value;\r\n    }\r\n    assert('.sv' in value, 'Unexpected leaf node or priority contents');\r\n    if (typeof value['.sv'] === 'string') {\r\n        return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\r\n    }\r\n    else if (typeof value['.sv'] === 'object') {\r\n        return resolveComplexDeferredValue(value['.sv'], existingVal);\r\n    }\r\n    else {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\r\n    }\r\n};\r\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\r\n    switch (op) {\r\n        case 'timestamp':\r\n            return serverValues['timestamp'];\r\n        default:\r\n            assert(false, 'Unexpected server value: ' + op);\r\n    }\r\n};\r\nconst resolveComplexDeferredValue = function (op, existing, unused) {\r\n    if (!op.hasOwnProperty('increment')) {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\r\n    }\r\n    const delta = op['increment'];\r\n    if (typeof delta !== 'number') {\r\n        assert(false, 'Unexpected increment value: ' + delta);\r\n    }\r\n    const existingNode = existing.node();\r\n    assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\r\n    // Incrementing a non-number sets the value to the incremented amount\r\n    if (!existingNode.isLeafNode()) {\r\n        return delta;\r\n    }\r\n    const leaf = existingNode;\r\n    const existingVal = leaf.getValue();\r\n    if (typeof existingVal !== 'number') {\r\n        return delta;\r\n    }\r\n    // No need to do over/underflow arithmetic here because JS only handles floats under the covers\r\n    return existingVal + delta;\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param path - path to which write is relative\r\n * @param node - new data written at path\r\n * @param syncTree - current data\r\n */\r\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\r\n    return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n */\r\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\r\n    return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\r\n};\r\nfunction resolveDeferredValue(node, existingVal, serverValues) {\r\n    const rawPri = node.getPriority().val();\r\n    const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\r\n    let newNode;\r\n    if (node.isLeafNode()) {\r\n        const leafNode = node;\r\n        const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\r\n        if (value !== leafNode.getValue() ||\r\n            priority !== leafNode.getPriority().val()) {\r\n            return new LeafNode(value, nodeFromJSON(priority));\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n    else {\r\n        const childrenNode = node;\r\n        newNode = childrenNode;\r\n        if (priority !== childrenNode.getPriority().val()) {\r\n            newNode = newNode.updatePriority(new LeafNode(priority));\r\n        }\r\n        childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\r\n            if (newChildNode !== childNode) {\r\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\r\n            }\r\n        });\r\n        return newNode;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\r\nclass Tree {\r\n    /**\r\n     * @param name - Optional name of the node.\r\n     * @param parent - Optional parent node.\r\n     * @param node - Optional node to wrap.\r\n     */\r\n    constructor(name = '', parent = null, node = { children: {}, childCount: 0 }) {\r\n        this.name = name;\r\n        this.parent = parent;\r\n        this.node = node;\r\n    }\r\n}\r\n/**\r\n * Returns a sub-Tree for the given path.\r\n *\r\n * @param pathObj - Path to look up.\r\n * @returns Tree for path.\r\n */\r\nfunction treeSubTree(tree, pathObj) {\r\n    // TODO: Require pathObj to be Path?\r\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\r\n    let child = tree, next = pathGetFront(path);\r\n    while (next !== null) {\r\n        const childNode = safeGet(child.node.children, next) || {\r\n            children: {},\r\n            childCount: 0\r\n        };\r\n        child = new Tree(next, child, childNode);\r\n        path = pathPopFront(path);\r\n        next = pathGetFront(path);\r\n    }\r\n    return child;\r\n}\r\n/**\r\n * Returns the data associated with this tree node.\r\n *\r\n * @returns The data or null if no data exists.\r\n */\r\nfunction treeGetValue(tree) {\r\n    return tree.node.value;\r\n}\r\n/**\r\n * Sets data to this tree node.\r\n *\r\n * @param value - Value to set.\r\n */\r\nfunction treeSetValue(tree, value) {\r\n    tree.node.value = value;\r\n    treeUpdateParents(tree);\r\n}\r\n/**\r\n * @returns Whether the tree has any children.\r\n */\r\nfunction treeHasChildren(tree) {\r\n    return tree.node.childCount > 0;\r\n}\r\n/**\r\n * @returns Whethe rthe tree is empty (no value or children).\r\n */\r\nfunction treeIsEmpty(tree) {\r\n    return treeGetValue(tree) === undefined && !treeHasChildren(tree);\r\n}\r\n/**\r\n * Calls action for each child of this tree node.\r\n *\r\n * @param action - Action to be called for each child.\r\n */\r\nfunction treeForEachChild(tree, action) {\r\n    each(tree.node.children, (child, childTree) => {\r\n        action(new Tree(child, tree, childTree));\r\n    });\r\n}\r\n/**\r\n * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n *\r\n * @param action - Action to be called for each child.\r\n * @param includeSelf - Whether to call action on this node as well. Defaults to\r\n *   false.\r\n * @param childrenFirst - Whether to call action on children before calling it on\r\n *   parent.\r\n */\r\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\r\n    if (includeSelf && !childrenFirst) {\r\n        action(tree);\r\n    }\r\n    treeForEachChild(tree, child => {\r\n        treeForEachDescendant(child, action, true, childrenFirst);\r\n    });\r\n    if (includeSelf && childrenFirst) {\r\n        action(tree);\r\n    }\r\n}\r\n/**\r\n * Calls action on each ancestor node.\r\n *\r\n * @param action - Action to be called on each parent; return\r\n *   true to abort.\r\n * @param includeSelf - Whether to call action on this node as well.\r\n * @returns true if the action callback returned true.\r\n */\r\nfunction treeForEachAncestor(tree, action, includeSelf) {\r\n    let node = includeSelf ? tree : tree.parent;\r\n    while (node !== null) {\r\n        if (action(node)) {\r\n            return true;\r\n        }\r\n        node = node.parent;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @returns The path of this tree node, as a Path.\r\n */\r\nfunction treeGetPath(tree) {\r\n    return new Path(tree.parent === null\r\n        ? tree.name\r\n        : treeGetPath(tree.parent) + '/' + tree.name);\r\n}\r\n/**\r\n * Adds or removes this child from its parent based on whether it's empty or not.\r\n */\r\nfunction treeUpdateParents(tree) {\r\n    if (tree.parent !== null) {\r\n        treeUpdateChild(tree.parent, tree.name, tree);\r\n    }\r\n}\r\n/**\r\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n *\r\n * @param childName - The name of the child to update.\r\n * @param child - The child to update.\r\n */\r\nfunction treeUpdateChild(tree, childName, child) {\r\n    const childEmpty = treeIsEmpty(child);\r\n    const childExists = contains(tree.node.children, childName);\r\n    if (childEmpty && childExists) {\r\n        delete tree.node.children[childName];\r\n        tree.node.childCount--;\r\n        treeUpdateParents(tree);\r\n    }\r\n    else if (!childEmpty && !childExists) {\r\n        tree.node.children[childName] = child.node;\r\n        tree.node.childCount++;\r\n        treeUpdateParents(tree);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * True for invalid Firebase keys\r\n */\r\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */\r\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * Maximum number of characters to allow in leaf value\r\n */\r\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\r\nconst isValidKey = function (key) {\r\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\r\n};\r\nconst isValidPathString = function (pathString) {\r\n    return (typeof pathString === 'string' &&\r\n        pathString.length !== 0 &&\r\n        !INVALID_PATH_REGEX_.test(pathString));\r\n};\r\nconst isValidRootPathString = function (pathString) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    return isValidPathString(pathString);\r\n};\r\nconst isValidPriority = function (priority) {\r\n    return (priority === null ||\r\n        typeof priority === 'string' ||\r\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\r\n        (priority &&\r\n            typeof priority === 'object' &&\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            contains(priority, '.sv')));\r\n};\r\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */\r\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\r\n    if (optional && value === undefined) {\r\n        return;\r\n    }\r\n    validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\r\n};\r\n/**\r\n * Validate a data object client-side before sending to server.\r\n */\r\nconst validateFirebaseData = function (errorPrefix, data, path_) {\r\n    const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\r\n    if (data === undefined) {\r\n        throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\r\n    }\r\n    if (typeof data === 'function') {\r\n        throw new Error(errorPrefix +\r\n            'contains a function ' +\r\n            validationPathToErrorString(path) +\r\n            ' with contents = ' +\r\n            data.toString());\r\n    }\r\n    if (isInvalidJSONNumber(data)) {\r\n        throw new Error(errorPrefix +\r\n            'contains ' +\r\n            data.toString() +\r\n            ' ' +\r\n            validationPathToErrorString(path));\r\n    }\r\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\r\n    if (typeof data === 'string' &&\r\n        data.length > MAX_LEAF_SIZE_ / 3 &&\r\n        stringLength(data) > MAX_LEAF_SIZE_) {\r\n        throw new Error(errorPrefix +\r\n            'contains a string greater than ' +\r\n            MAX_LEAF_SIZE_ +\r\n            ' utf8 bytes ' +\r\n            validationPathToErrorString(path) +\r\n            \" ('\" +\r\n            data.substring(0, 50) +\r\n            \"...')\");\r\n    }\r\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\r\n    // to save extra walking of large objects.\r\n    if (data && typeof data === 'object') {\r\n        let hasDotValue = false;\r\n        let hasActualChild = false;\r\n        each(data, (key, value) => {\r\n            if (key === '.value') {\r\n                hasDotValue = true;\r\n            }\r\n            else if (key !== '.priority' && key !== '.sv') {\r\n                hasActualChild = true;\r\n                if (!isValidKey(key)) {\r\n                    throw new Error(errorPrefix +\r\n                        ' contains an invalid key (' +\r\n                        key +\r\n                        ') ' +\r\n                        validationPathToErrorString(path) +\r\n                        '.  Keys must be non-empty strings ' +\r\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n                }\r\n            }\r\n            validationPathPush(path, key);\r\n            validateFirebaseData(errorPrefix, value, path);\r\n            validationPathPop(path);\r\n        });\r\n        if (hasDotValue && hasActualChild) {\r\n            throw new Error(errorPrefix +\r\n                ' contains \".value\" child ' +\r\n                validationPathToErrorString(path) +\r\n                ' in addition to actual children.');\r\n        }\r\n    }\r\n};\r\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n */\r\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\r\n    let i, curPath;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        const keys = pathSlice(curPath);\r\n        for (let j = 0; j < keys.length; j++) {\r\n            if (keys[j] === '.priority' && j === keys.length - 1) ;\r\n            else if (!isValidKey(keys[j])) {\r\n                throw new Error(errorPrefix +\r\n                    'contains an invalid key (' +\r\n                    keys[j] +\r\n                    ') in path ' +\r\n                    curPath.toString() +\r\n                    '. Keys must be non-empty strings ' +\r\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n            }\r\n        }\r\n    }\r\n    // Check that update keys are not descendants of each other.\r\n    // We rely on the property that sorting guarantees that ancestors come\r\n    // right before descendants.\r\n    mergePaths.sort(pathCompare);\r\n    let prevPath = null;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        if (prevPath !== null && pathContains(prevPath, curPath)) {\r\n            throw new Error(errorPrefix +\r\n                'contains a path ' +\r\n                prevPath.toString() +\r\n                ' that is ancestor of another path ' +\r\n                curPath.toString());\r\n        }\r\n        prevPath = curPath;\r\n    }\r\n};\r\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */\r\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\r\n    if (optional && data === undefined) {\r\n        return;\r\n    }\r\n    const errorPrefix$1 = errorPrefix(fnName, 'values');\r\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\r\n        throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\r\n    }\r\n    const mergePaths = [];\r\n    each(data, (key, value) => {\r\n        const curPath = new Path(key);\r\n        validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\r\n        if (pathGetBack(curPath) === '.priority') {\r\n            if (!isValidPriority(value)) {\r\n                throw new Error(errorPrefix$1 +\r\n                    \"contains an invalid value for '\" +\r\n                    curPath.toString() +\r\n                    \"', which must be a valid \" +\r\n                    'Firebase priority (a string, finite number, server value, or null).');\r\n            }\r\n        }\r\n        mergePaths.push(curPath);\r\n    });\r\n    validateFirebaseMergePaths(errorPrefix$1, mergePaths);\r\n};\r\nconst validatePriority = function (fnName, priority, optional) {\r\n    if (optional && priority === undefined) {\r\n        return;\r\n    }\r\n    if (isInvalidJSONNumber(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'is ' +\r\n            priority.toString() +\r\n            ', but must be a valid Firebase priority (a string, finite number, ' +\r\n            'server value, or null).');\r\n    }\r\n    // Special case to allow importing data with a .sv.\r\n    if (!isValidPriority(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'must be a valid Firebase priority ' +\r\n            '(a string, finite number, server value, or null).');\r\n    }\r\n};\r\nconst validateKey = function (fnName, argumentName, key, optional) {\r\n    if (optional && key === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidKey(key)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid key = \"' +\r\n            key +\r\n            '\".  Firebase keys must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\r\n    }\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\r\n    if (optional && pathString === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidPathString(pathString)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid path = \"' +\r\n            pathString +\r\n            '\". Paths must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\r\n    }\r\n};\r\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    validatePathString(fnName, argumentName, pathString, optional);\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validateWritablePath = function (fnName, path) {\r\n    if (pathGetFront(path) === '.info') {\r\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\r\n    }\r\n};\r\nconst validateUrl = function (fnName, parsedUrl) {\r\n    // TODO = Validate server better.\r\n    const pathString = parsedUrl.path.toString();\r\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\r\n        parsedUrl.repoInfo.host.length === 0 ||\r\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\r\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\r\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\r\n        throw new Error(errorPrefix(fnName, 'url') +\r\n            'must be a valid firebase URL and ' +\r\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */\r\nclass EventQueue {\r\n    constructor() {\r\n        this.eventLists_ = [];\r\n        /**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         */\r\n        this.recursionDepth_ = 0;\r\n    }\r\n}\r\n/**\r\n * @param eventDataList - The new events to queue.\r\n */\r\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\r\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\r\n    let currList = null;\r\n    for (let i = 0; i < eventDataList.length; i++) {\r\n        const data = eventDataList[i];\r\n        const path = data.getPath();\r\n        if (currList !== null && !pathEquals(path, currList.path)) {\r\n            eventQueue.eventLists_.push(currList);\r\n            currList = null;\r\n        }\r\n        if (currList === null) {\r\n            currList = { events: [], path };\r\n        }\r\n        currList.events.push(data);\r\n    }\r\n    if (currList) {\r\n        eventQueue.eventLists_.push(currList);\r\n    }\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */\r\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */\r\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) ||\r\n        pathContains(changedPath, eventPath));\r\n}\r\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\r\n    eventQueue.recursionDepth_++;\r\n    let sentAll = true;\r\n    for (let i = 0; i < eventQueue.eventLists_.length; i++) {\r\n        const eventList = eventQueue.eventLists_[i];\r\n        if (eventList) {\r\n            const eventPath = eventList.path;\r\n            if (predicate(eventPath)) {\r\n                eventListRaise(eventQueue.eventLists_[i]);\r\n                eventQueue.eventLists_[i] = null;\r\n            }\r\n            else {\r\n                sentAll = false;\r\n            }\r\n        }\r\n    }\r\n    if (sentAll) {\r\n        eventQueue.eventLists_ = [];\r\n    }\r\n    eventQueue.recursionDepth_--;\r\n}\r\n/**\r\n * Iterates through the list and raises each event\r\n */\r\nfunction eventListRaise(eventList) {\r\n    for (let i = 0; i < eventList.events.length; i++) {\r\n        const eventData = eventList.events[i];\r\n        if (eventData !== null) {\r\n            eventList.events[i] = null;\r\n            const eventFn = eventData.getEventRunner();\r\n            if (logger) {\r\n                log('event: ' + eventData.toString());\r\n            }\r\n            exceptionGuard(eventFn);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst INTERRUPT_REASON = 'repo_interrupt';\r\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it. Among other\r\n * things this ensure that if there's ever a bug causing a mismatch between\r\n * client / server hashes for some data, we won't retry indefinitely.\r\n */\r\nconst MAX_TRANSACTION_RETRIES = 25;\r\n/**\r\n * A connection to a single data repository.\r\n */\r\nclass Repo {\r\n    constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\r\n        this.repoInfo_ = repoInfo_;\r\n        this.forceRestClient_ = forceRestClient_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckProvider_ = appCheckProvider_;\r\n        this.dataUpdateCount = 0;\r\n        this.statsListener_ = null;\r\n        this.eventQueue_ = new EventQueue();\r\n        this.nextWriteId_ = 1;\r\n        this.interceptServerDataCallback_ = null;\r\n        /** A list of data pieces and paths to be set when this client disconnects. */\r\n        this.onDisconnect_ = newSparseSnapshotTree();\r\n        /** Stores queues of outstanding transactions for Firebase locations. */\r\n        this.transactionQueueTree_ = new Tree();\r\n        // TODO: This should be @private but it's used by test_access.js and internal.js\r\n        this.persistentConnection_ = null;\r\n        // This key is intentionally not updated if RepoInfo is later changed or replaced\r\n        this.key = this.repoInfo_.toURLString();\r\n    }\r\n    /**\r\n     * @returns The URL corresponding to the root of this Firebase.\r\n     */\r\n    toString() {\r\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\r\n    }\r\n}\r\nfunction repoStart(repo, appId, authOverride) {\r\n    repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\r\n    if (repo.forceRestClient_ || beingCrawled()) {\r\n        repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_);\r\n        // Minor hack: Fire onConnect immediately, since there's no actual connection.\r\n        setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\r\n    }\r\n    else {\r\n        // Validate authOverride\r\n        if (typeof authOverride !== 'undefined' && authOverride !== null) {\r\n            if (typeof authOverride !== 'object') {\r\n                throw new Error('Only objects are supported for option databaseAuthVariableOverride');\r\n            }\r\n            try {\r\n                stringify(authOverride);\r\n            }\r\n            catch (e) {\r\n                throw new Error('Invalid authOverride provided: ' + e);\r\n            }\r\n        }\r\n        repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, (connectStatus) => {\r\n            repoOnConnectStatus(repo, connectStatus);\r\n        }, (updates) => {\r\n            repoOnServerInfoUpdate(repo, updates);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\r\n        repo.server_ = repo.persistentConnection_;\r\n    }\r\n    repo.authTokenProvider_.addTokenChangeListener(token => {\r\n        repo.server_.refreshAuthToken(token);\r\n    });\r\n    repo.appCheckProvider_.addTokenChangeListener(result => {\r\n        repo.server_.refreshAppCheckToken(result.token);\r\n    });\r\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\r\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\r\n    repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));\r\n    // Used for .info.\r\n    repo.infoData_ = new SnapshotHolder();\r\n    repo.infoSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            let infoEvents = [];\r\n            const node = repo.infoData_.getNode(query._path);\r\n            // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\r\n            // on initial data...\r\n            if (!node.isEmpty()) {\r\n                infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\r\n                setTimeout(() => {\r\n                    onComplete('ok');\r\n                }, 0);\r\n            }\r\n            return infoEvents;\r\n        },\r\n        stopListening: () => { }\r\n    });\r\n    repoUpdateInfo(repo, 'connected', false);\r\n    repo.serverSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            repo.server_.listen(query, currentHashFn, tag, (status, data) => {\r\n                const events = onComplete(status, data);\r\n                eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\r\n            });\r\n            // No synchronous events for network-backed sync trees\r\n            return [];\r\n        },\r\n        stopListening: (query, tag) => {\r\n            repo.server_.unlisten(query, tag);\r\n        }\r\n    });\r\n}\r\n/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */\r\nfunction repoServerTime(repo) {\r\n    const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\r\n    const offset = offsetNode.val() || 0;\r\n    return new Date().getTime() + offset;\r\n}\r\n/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */\r\nfunction repoGenerateServerValues(repo) {\r\n    return generateWithValues({\r\n        timestamp: repoServerTime(repo)\r\n    });\r\n}\r\n/**\r\n * Called by realtime when we get new messages from the server.\r\n */\r\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\r\n    // For testing.\r\n    repo.dataUpdateCount++;\r\n    const path = new Path(pathString);\r\n    data = repo.interceptServerDataCallback_\r\n        ? repo.interceptServerDataCallback_(pathString, data)\r\n        : data;\r\n    let events = [];\r\n    if (tag) {\r\n        if (isMerge) {\r\n            const taggedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n            events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\r\n        }\r\n        else {\r\n            const taggedSnap = nodeFromJSON(data);\r\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\r\n        }\r\n    }\r\n    else if (isMerge) {\r\n        const changedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n        events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\r\n    }\r\n    else {\r\n        const snap = nodeFromJSON(data);\r\n        events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\r\n    }\r\n    let affectedPath = path;\r\n    if (events.length > 0) {\r\n        // Since we have a listener outstanding for each transaction, receiving any events\r\n        // is a proxy for some change having occurred.\r\n        affectedPath = repoRerunTransactions(repo, path);\r\n    }\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\r\n}\r\nfunction repoOnConnectStatus(repo, connectStatus) {\r\n    repoUpdateInfo(repo, 'connected', connectStatus);\r\n    if (connectStatus === false) {\r\n        repoRunOnDisconnectEvents(repo);\r\n    }\r\n}\r\nfunction repoOnServerInfoUpdate(repo, updates) {\r\n    each(updates, (key, value) => {\r\n        repoUpdateInfo(repo, key, value);\r\n    });\r\n}\r\nfunction repoUpdateInfo(repo, pathString, value) {\r\n    const path = new Path('/.info/' + pathString);\r\n    const newNode = nodeFromJSON(value);\r\n    repo.infoData_.updateSnapshot(path, newNode);\r\n    const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n}\r\nfunction repoGetNextWriteId(repo) {\r\n    return repo.nextWriteId_++;\r\n}\r\n/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will try to\r\n * establish a connection and request the value for `query`. If\r\n * the client is not able to retrieve the query result, it reports\r\n * an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */\r\nfunction repoGetValue(repo, query) {\r\n    // Only active queries are cached. There is no persisted cache.\r\n    const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\r\n    if (cached != null) {\r\n        return Promise.resolve(cached);\r\n    }\r\n    return repo.server_.get(query).then(payload => {\r\n        const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\r\n        const events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\r\n        eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n        return Promise.resolve(node);\r\n    }, err => {\r\n        repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\r\n        return Promise.reject(new Error(err));\r\n    });\r\n}\r\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\r\n    repoLog(repo, 'set', {\r\n        path: path.toString(),\r\n        value: newVal,\r\n        priority: newPriority\r\n    });\r\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\r\n    // (b) store unresolved paths on JSON parse\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\r\n    const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\r\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\r\n    const writeId = repoGetNextWriteId(repo);\r\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\r\n    eventQueueQueueEvents(repo.eventQueue_, events);\r\n    repo.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), (status, errorReason) => {\r\n        const success = status === 'ok';\r\n        if (!success) {\r\n            warn('set at ' + path + ' failed: ' + status);\r\n        }\r\n        const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n    const affectedPath = repoAbortTransactions(repo, path);\r\n    repoRerunTransactions(repo, affectedPath);\r\n    // We queued the events above, so just flush the queue here\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\r\n}\r\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\r\n    repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\r\n    // Start with our existing data and merge each child into it.\r\n    let empty = true;\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const changedChildren = {};\r\n    each(childrenToMerge, (changedKey, changedValue) => {\r\n        empty = false;\r\n        changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\r\n    });\r\n    if (!empty) {\r\n        const writeId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\r\n        eventQueueQueueEvents(repo.eventQueue_, events);\r\n        repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n            const success = status === 'ok';\r\n            if (!success) {\r\n                warn('update at ' + path + ' failed: ' + status);\r\n            }\r\n            const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n            const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\r\n            repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n        });\r\n        each(childrenToMerge, (changedPath) => {\r\n            const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\r\n            repoRerunTransactions(repo, affectedPath);\r\n        });\r\n        // We queued the events above, so just flush the queue here\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\r\n    }\r\n    else {\r\n        log(\"update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n    }\r\n}\r\n/**\r\n * Applies all of the changes stored up in the onDisconnect_ tree.\r\n */\r\nfunction repoRunOnDisconnectEvents(repo) {\r\n    repoLog(repo, 'onDisconnectEvents');\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const resolvedOnDisconnectTree = newSparseSnapshotTree();\r\n    sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\r\n        const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\r\n        sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\r\n    });\r\n    let events = [];\r\n    sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\r\n        events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\r\n        const affectedPath = repoAbortTransactions(repo, path);\r\n        repoRerunTransactions(repo, affectedPath);\r\n    });\r\n    repo.onDisconnect_ = newSparseSnapshotTree();\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\r\n}\r\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\r\n    repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeForget(repo.onDisconnect_, path);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\r\n    const newNode = nodeFromJSON(value);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\r\n    const newNode = nodeFromJSON(value, priority);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\r\n    if (isEmpty(childrenToMerge)) {\r\n        log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n        return;\r\n    }\r\n    repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            each(childrenToMerge, (childName, childNode) => {\r\n                const newChildNode = nodeFromJSON(childNode);\r\n                sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\r\n            });\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\r\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\r\n    // a little bit by handling the return values anyways.\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoInterrupt(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.interrupt(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoResume(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.resume(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoLog(repo, ...varArgs) {\r\n    let prefix = '';\r\n    if (repo.persistentConnection_) {\r\n        prefix = repo.persistentConnection_.id + ':';\r\n    }\r\n    log(prefix, ...varArgs);\r\n}\r\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\r\n    if (callback) {\r\n        exceptionGuard(() => {\r\n            if (status === 'ok') {\r\n                callback(null);\r\n            }\r\n            else {\r\n                const code = (status || 'error').toUpperCase();\r\n                let message = code;\r\n                if (errorReason) {\r\n                    message += ': ' + errorReason;\r\n                }\r\n                const error = new Error(message);\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                error.code = code;\r\n                callback(error);\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */\r\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\r\n    repoLog(repo, 'transaction on ' + path);\r\n    // Initialize transaction.\r\n    const transaction = {\r\n        path,\r\n        update: transactionUpdate,\r\n        onComplete,\r\n        // One of TransactionStatus enums.\r\n        status: null,\r\n        // Used when combining transactions at different locations to figure out\r\n        // which one goes first.\r\n        order: LUIDGenerator(),\r\n        // Whether to raise local events for this transaction.\r\n        applyLocally,\r\n        // Count of how many times we've retried the transaction.\r\n        retryCount: 0,\r\n        // Function to call to clean up our .on() listener.\r\n        unwatcher,\r\n        // Stores why a transaction was aborted.\r\n        abortReason: null,\r\n        currentWriteId: null,\r\n        currentInputSnapshot: null,\r\n        currentOutputSnapshotRaw: null,\r\n        currentOutputSnapshotResolved: null\r\n    };\r\n    // Run transaction initially.\r\n    const currentState = repoGetLatestState(repo, path, undefined);\r\n    transaction.currentInputSnapshot = currentState;\r\n    const newVal = transaction.update(currentState.val());\r\n    if (newVal === undefined) {\r\n        // Abort transaction.\r\n        transaction.unwatcher();\r\n        transaction.currentOutputSnapshotRaw = null;\r\n        transaction.currentOutputSnapshotResolved = null;\r\n        if (transaction.onComplete) {\r\n            transaction.onComplete(null, false, transaction.currentInputSnapshot);\r\n        }\r\n    }\r\n    else {\r\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\r\n        // Mark as run and add to our queue.\r\n        transaction.status = 0 /* RUN */;\r\n        const queueNode = treeSubTree(repo.transactionQueueTree_, path);\r\n        const nodeQueue = treeGetValue(queueNode) || [];\r\n        nodeQueue.push(transaction);\r\n        treeSetValue(queueNode, nodeQueue);\r\n        // Update visibleData and raise events\r\n        // Note: We intentionally raise events after updating all of our\r\n        // transaction state, since the user could start new transactions from the\r\n        // event callbacks.\r\n        let priorityForNode;\r\n        if (typeof newVal === 'object' &&\r\n            newVal !== null &&\r\n            contains(newVal, '.priority')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            priorityForNode = safeGet(newVal, '.priority');\r\n            assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\r\n                'Priority must be a valid string, finite number, server value, or null.');\r\n        }\r\n        else {\r\n            const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\r\n                ChildrenNode.EMPTY_NODE;\r\n            priorityForNode = currentNode.getPriority().val();\r\n        }\r\n        const serverValues = repoGenerateServerValues(repo);\r\n        const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\r\n        const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\r\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\r\n        transaction.currentOutputSnapshotResolved = newNode;\r\n        transaction.currentWriteId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n    }\r\n}\r\n/**\r\n * @param excludeSets - A specific set to exclude\r\n */\r\nfunction repoGetLatestState(repo, path, excludeSets) {\r\n    return (syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\r\n        ChildrenNode.EMPTY_NODE);\r\n}\r\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding\r\n * transactions to complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively\r\n * with a particular transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param node - transactionQueueTree node to start at.\r\n */\r\nfunction repoSendReadyTransactions(repo, node = repo.transactionQueueTree_) {\r\n    // Before recursing, make sure any completed transactions are removed.\r\n    if (!node) {\r\n        repoPruneCompletedTransactionsBelowNode(repo, node);\r\n    }\r\n    if (treeGetValue(node)) {\r\n        const queue = repoBuildTransactionQueue(repo, node);\r\n        assert(queue.length > 0, 'Sending zero length transaction queue');\r\n        const allRun = queue.every((transaction) => transaction.status === 0 /* RUN */);\r\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\r\n        if (allRun) {\r\n            repoSendTransactionQueue(repo, treeGetPath(node), queue);\r\n        }\r\n    }\r\n    else if (treeHasChildren(node)) {\r\n        treeForEachChild(node, childNode => {\r\n            repoSendReadyTransactions(repo, childNode);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Given a list of run transactions, send them to the server and then handle\r\n * the result (success or failure).\r\n *\r\n * @param path - The location of the queue.\r\n * @param queue - Queue of transactions under the specified location.\r\n */\r\nfunction repoSendTransactionQueue(repo, path, queue) {\r\n    // Mark transactions as sent and increment retry count!\r\n    const setsToIgnore = queue.map(txn => {\r\n        return txn.currentWriteId;\r\n    });\r\n    const latestState = repoGetLatestState(repo, path, setsToIgnore);\r\n    let snapToSend = latestState;\r\n    const latestHash = latestState.hash();\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const txn = queue[i];\r\n        assert(txn.status === 0 /* RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');\r\n        txn.status = 1 /* SENT */;\r\n        txn.retryCount++;\r\n        const relativePath = newRelativePath(path, txn.path);\r\n        // If we've gotten to this point, the output snapshot must be defined.\r\n        snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\r\n    }\r\n    const dataToSend = snapToSend.val(true);\r\n    const pathToSend = path;\r\n    // Send the put.\r\n    repo.server_.put(pathToSend.toString(), dataToSend, (status) => {\r\n        repoLog(repo, 'transaction put response', {\r\n            path: pathToSend.toString(),\r\n            status\r\n        });\r\n        let events = [];\r\n        if (status === 'ok') {\r\n            // Queue up the callbacks and fire them after cleaning up all of our\r\n            // transaction state, since the callback could trigger more\r\n            // transactions or sets.\r\n            const callbacks = [];\r\n            for (let i = 0; i < queue.length; i++) {\r\n                queue[i].status = 2 /* COMPLETED */;\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\r\n                if (queue[i].onComplete) {\r\n                    // We never unset the output snapshot, and given that this\r\n                    // transaction is complete, it should be set\r\n                    callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\r\n                }\r\n                queue[i].unwatcher();\r\n            }\r\n            // Now remove the completed transactions.\r\n            repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));\r\n            // There may be pending transactions that we can now send.\r\n            repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n            // Finally, trigger onComplete callbacks.\r\n            for (let i = 0; i < callbacks.length; i++) {\r\n                exceptionGuard(callbacks[i]);\r\n            }\r\n        }\r\n        else {\r\n            // transactions are no longer sent.  Update their status appropriately.\r\n            if (status === 'datastale') {\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) {\r\n                        queue[i].status = 4 /* NEEDS_ABORT */;\r\n                    }\r\n                    else {\r\n                        queue[i].status = 0 /* RUN */;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    queue[i].status = 4 /* NEEDS_ABORT */;\r\n                    queue[i].abortReason = status;\r\n                }\r\n            }\r\n            repoRerunTransactions(repo, path);\r\n        }\r\n    }, latestHash);\r\n}\r\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions. This\r\n * is the path at which events need to be raised for.\r\n *\r\n * @param changedPath - The path in mergedData that changed.\r\n * @returns The rootmost path that was affected by rerunning transactions.\r\n */\r\nfunction repoRerunTransactions(repo, changedPath) {\r\n    const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\r\n    const path = treeGetPath(rootMostTransactionNode);\r\n    const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\r\n    repoRerunTransactionQueue(repo, queue, path);\r\n    return path;\r\n}\r\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted\r\n * transactions and whatnot).\r\n *\r\n * @param queue - The queue of transactions to run.\r\n * @param path - The path the queue is for.\r\n */\r\nfunction repoRerunTransactionQueue(repo, queue, path) {\r\n    if (queue.length === 0) {\r\n        return; // Nothing to do!\r\n    }\r\n    // Queue up the callbacks and fire them after cleaning up all of our\r\n    // transaction state, since the callback could trigger more transactions or\r\n    // sets.\r\n    const callbacks = [];\r\n    let events = [];\r\n    // Ignore all of the sets we're going to re-run.\r\n    const txnsToRerun = queue.filter(q => {\r\n        return q.status === 0 /* RUN */;\r\n    });\r\n    const setsToIgnore = txnsToRerun.map(q => {\r\n        return q.currentWriteId;\r\n    });\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const transaction = queue[i];\r\n        const relativePath = newRelativePath(path, transaction.path);\r\n        let abortTransaction = false, abortReason;\r\n        assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\r\n        if (transaction.status === 4 /* NEEDS_ABORT */) {\r\n            abortTransaction = true;\r\n            abortReason = transaction.abortReason;\r\n            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n        }\r\n        else if (transaction.status === 0 /* RUN */) {\r\n            if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\r\n                abortTransaction = true;\r\n                abortReason = 'maxretry';\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n            }\r\n            else {\r\n                // This code reruns a transaction\r\n                const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\r\n                transaction.currentInputSnapshot = currentNode;\r\n                const newData = queue[i].update(currentNode.val());\r\n                if (newData !== undefined) {\r\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\r\n                    let newDataNode = nodeFromJSON(newData);\r\n                    const hasExplicitPriority = typeof newData === 'object' &&\r\n                        newData != null &&\r\n                        contains(newData, '.priority');\r\n                    if (!hasExplicitPriority) {\r\n                        // Keep the old priority if there wasn't a priority explicitly specified.\r\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\r\n                    }\r\n                    const oldWriteId = transaction.currentWriteId;\r\n                    const serverValues = repoGenerateServerValues(repo);\r\n                    const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\r\n                    transaction.currentOutputSnapshotRaw = newDataNode;\r\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\r\n                    transaction.currentWriteId = repoGetNextWriteId(repo);\r\n                    // Mutates setsToIgnore in place\r\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\r\n                    events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\r\n                }\r\n                else {\r\n                    abortTransaction = true;\r\n                    abortReason = 'nodata';\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n                }\r\n            }\r\n        }\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        events = [];\r\n        if (abortTransaction) {\r\n            // Abort.\r\n            queue[i].status = 2 /* COMPLETED */;\r\n            // Removing a listener can trigger pruning which can muck with\r\n            // mergedData/visibleData (as it prunes data). So defer the unwatcher\r\n            // until we're done.\r\n            (function (unwatcher) {\r\n                setTimeout(unwatcher, Math.floor(0));\r\n            })(queue[i].unwatcher);\r\n            if (queue[i].onComplete) {\r\n                if (abortReason === 'nodata') {\r\n                    callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\r\n                }\r\n                else {\r\n                    callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Clean up completed transactions.\r\n    repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\r\n    // Now fire callbacks, now that we're in a good, known state.\r\n    for (let i = 0; i < callbacks.length; i++) {\r\n        exceptionGuard(callbacks[i]);\r\n    }\r\n    // Try to send the transaction result to the server.\r\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n}\r\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending\r\n * transaction on it, or just returns the node for the given path if there are\r\n * no pending transactions on any ancestor.\r\n *\r\n * @param path - The location to start at.\r\n * @returns The rootmost node with a transaction.\r\n */\r\nfunction repoGetAncestorTransactionNode(repo, path) {\r\n    let front;\r\n    // Start at the root and walk deeper into the tree towards path until we\r\n    // find a node with pending transactions.\r\n    let transactionNode = repo.transactionQueueTree_;\r\n    front = pathGetFront(path);\r\n    while (front !== null && treeGetValue(transactionNode) === undefined) {\r\n        transactionNode = treeSubTree(transactionNode, front);\r\n        path = pathPopFront(path);\r\n        front = pathGetFront(path);\r\n    }\r\n    return transactionNode;\r\n}\r\n/**\r\n * Builds the queue of all transactions at or below the specified\r\n * transactionNode.\r\n *\r\n * @param transactionNode\r\n * @returns The generated queue.\r\n */\r\nfunction repoBuildTransactionQueue(repo, transactionNode) {\r\n    // Walk any child transaction queues and aggregate them into a single queue.\r\n    const transactionQueue = [];\r\n    repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);\r\n    // Sort them by the order the transactions were created.\r\n    transactionQueue.sort((a, b) => a.order - b.order);\r\n    return transactionQueue;\r\n}\r\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\r\n    const nodeQueue = treeGetValue(node);\r\n    if (nodeQueue) {\r\n        for (let i = 0; i < nodeQueue.length; i++) {\r\n            queue.push(nodeQueue[i]);\r\n        }\r\n    }\r\n    treeForEachChild(node, child => {\r\n        repoAggregateTransactionQueuesForNode(repo, child, queue);\r\n    });\r\n}\r\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n */\r\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        let to = 0;\r\n        for (let from = 0; from < queue.length; from++) {\r\n            if (queue[from].status !== 2 /* COMPLETED */) {\r\n                queue[to] = queue[from];\r\n                to++;\r\n            }\r\n        }\r\n        queue.length = to;\r\n        treeSetValue(node, queue.length > 0 ? queue : undefined);\r\n    }\r\n    treeForEachChild(node, childNode => {\r\n        repoPruneCompletedTransactionsBelowNode(repo, childNode);\r\n    });\r\n}\r\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.\r\n * Called when doing a set() or update() since we consider them incompatible\r\n * with transactions.\r\n *\r\n * @param path - Path for which we want to abort related transactions.\r\n */\r\nfunction repoAbortTransactions(repo, path) {\r\n    const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\r\n    const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\r\n    treeForEachAncestor(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    repoAbortTransactionsOnNode(repo, transactionNode);\r\n    treeForEachDescendant(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    return affectedPath;\r\n}\r\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param node - Node to abort transactions for.\r\n */\r\nfunction repoAbortTransactionsOnNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        // Queue up the callbacks and fire them after cleaning up all of our\r\n        // transaction state, since the callback could trigger more transactions\r\n        // or sets.\r\n        const callbacks = [];\r\n        // Go through queue.  Any already-sent transactions must be marked for\r\n        // abort, while the unsent ones can be immediately aborted and removed.\r\n        let events = [];\r\n        let lastSent = -1;\r\n        for (let i = 0; i < queue.length; i++) {\r\n            if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) ;\r\n            else if (queue[i].status === 1 /* SENT */) {\r\n                assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\r\n                lastSent = i;\r\n                // Mark transaction for abort when it comes back.\r\n                queue[i].status = 3 /* SENT_NEEDS_ABORT */;\r\n                queue[i].abortReason = 'set';\r\n            }\r\n            else {\r\n                assert(queue[i].status === 0 /* RUN */, 'Unexpected transaction status in abort');\r\n                // We can abort it immediately.\r\n                queue[i].unwatcher();\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\r\n                if (queue[i].onComplete) {\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\r\n                }\r\n            }\r\n        }\r\n        if (lastSent === -1) {\r\n            // We're not waiting for any sent transactions.  We can clear the queue.\r\n            treeSetValue(node, undefined);\r\n        }\r\n        else {\r\n            // Remove the transactions we aborted.\r\n            queue.length = lastSent + 1;\r\n        }\r\n        // Now fire the callbacks.\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\r\n        for (let i = 0; i < callbacks.length; i++) {\r\n            exceptionGuard(callbacks[i]);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction decodePath(pathString) {\r\n    let pathStringDecoded = '';\r\n    const pieces = pathString.split('/');\r\n    for (let i = 0; i < pieces.length; i++) {\r\n        if (pieces[i].length > 0) {\r\n            let piece = pieces[i];\r\n            try {\r\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\r\n            }\r\n            catch (e) { }\r\n            pathStringDecoded += '/' + piece;\r\n        }\r\n    }\r\n    return pathStringDecoded;\r\n}\r\n/**\r\n * @returns key value hash\r\n */\r\nfunction decodeQuery(queryString) {\r\n    const results = {};\r\n    if (queryString.charAt(0) === '?') {\r\n        queryString = queryString.substring(1);\r\n    }\r\n    for (const segment of queryString.split('&')) {\r\n        if (segment.length === 0) {\r\n            continue;\r\n        }\r\n        const kv = segment.split('=');\r\n        if (kv.length === 2) {\r\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\r\n        }\r\n        else {\r\n            warn(`Invalid query segment '${segment}' in query '${queryString}'`);\r\n        }\r\n    }\r\n    return results;\r\n}\r\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\r\n    const parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;\r\n    if (parsedUrl.domain === 'firebase.com') {\r\n        fatal(parsedUrl.host +\r\n            ' is no longer supported. ' +\r\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\r\n    }\r\n    // Catch common error of uninitialized namespace value.\r\n    if ((!namespace || namespace === 'undefined') &&\r\n        parsedUrl.domain !== 'localhost') {\r\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\r\n    }\r\n    if (!parsedUrl.secure) {\r\n        warnIfPageIsSecure();\r\n    }\r\n    const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\r\n    return {\r\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, nodeAdmin, webSocketOnly, \r\n        /*persistenceKey=*/ '', \r\n        /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),\r\n        path: new Path(parsedUrl.pathString)\r\n    };\r\n};\r\nconst parseDatabaseURL = function (dataURL) {\r\n    // Default to empty strings in the event of a malformed string.\r\n    let host = '', domain = '', subdomain = '', pathString = '', namespace = '';\r\n    // Always default to SSL, unless otherwise specified.\r\n    let secure = true, scheme = 'https', port = 443;\r\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\r\n    if (typeof dataURL === 'string') {\r\n        // Parse scheme.\r\n        let colonInd = dataURL.indexOf('//');\r\n        if (colonInd >= 0) {\r\n            scheme = dataURL.substring(0, colonInd - 1);\r\n            dataURL = dataURL.substring(colonInd + 2);\r\n        }\r\n        // Parse host, path, and query string.\r\n        let slashInd = dataURL.indexOf('/');\r\n        if (slashInd === -1) {\r\n            slashInd = dataURL.length;\r\n        }\r\n        let questionMarkInd = dataURL.indexOf('?');\r\n        if (questionMarkInd === -1) {\r\n            questionMarkInd = dataURL.length;\r\n        }\r\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\r\n        if (slashInd < questionMarkInd) {\r\n            // For pathString, questionMarkInd will always come after slashInd\r\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\r\n        }\r\n        const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\r\n        // If we have a port, use scheme for determining if it's secure.\r\n        colonInd = host.indexOf(':');\r\n        if (colonInd >= 0) {\r\n            secure = scheme === 'https' || scheme === 'wss';\r\n            port = parseInt(host.substring(colonInd + 1), 10);\r\n        }\r\n        else {\r\n            colonInd = host.length;\r\n        }\r\n        const hostWithoutPort = host.slice(0, colonInd);\r\n        if (hostWithoutPort.toLowerCase() === 'localhost') {\r\n            domain = 'localhost';\r\n        }\r\n        else if (hostWithoutPort.split('.').length <= 2) {\r\n            domain = hostWithoutPort;\r\n        }\r\n        else {\r\n            // Interpret the subdomain of a 3 or more component URL as the namespace name.\r\n            const dotInd = host.indexOf('.');\r\n            subdomain = host.substring(0, dotInd).toLowerCase();\r\n            domain = host.substring(dotInd + 1);\r\n            // Normalize namespaces to lowercase to share storage / connection.\r\n            namespace = subdomain;\r\n        }\r\n        // Always treat the value of the `ns` as the namespace name if it is present.\r\n        if ('ns' in queryParams) {\r\n            namespace = queryParams['ns'];\r\n        }\r\n    }\r\n    return {\r\n        host,\r\n        port,\r\n        domain,\r\n        subdomain,\r\n        secure,\r\n        scheme,\r\n        pathString,\r\n        namespace\r\n    };\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Encapsulates the data needed to raise an event\r\n */\r\nclass DataEvent {\r\n    /**\r\n     * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param eventRegistration - The function to call to with the event data. User provided\r\n     * @param snapshot - The data backing the event\r\n     * @param prevName - Optional, the name of the previous child for child_* events.\r\n     */\r\n    constructor(eventType, eventRegistration, snapshot, prevName) {\r\n        this.eventType = eventType;\r\n        this.eventRegistration = eventRegistration;\r\n        this.snapshot = snapshot;\r\n        this.prevName = prevName;\r\n    }\r\n    getPath() {\r\n        const ref = this.snapshot.ref;\r\n        if (this.eventType === 'value') {\r\n            return ref._path;\r\n        }\r\n        else {\r\n            return ref.parent._path;\r\n        }\r\n    }\r\n    getEventType() {\r\n        return this.eventType;\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return (this.getPath().toString() +\r\n            ':' +\r\n            this.eventType +\r\n            ':' +\r\n            stringify(this.snapshot.exportVal()));\r\n    }\r\n}\r\nclass CancelEvent {\r\n    constructor(eventRegistration, error, path) {\r\n        this.eventRegistration = eventRegistration;\r\n        this.error = error;\r\n        this.path = path;\r\n    }\r\n    getPath() {\r\n        return this.path;\r\n    }\r\n    getEventType() {\r\n        return 'cancel';\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return this.path.toString() + ':cancel';\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */\r\nclass CallbackContext {\r\n    constructor(snapshotCallback, cancelCallback) {\r\n        this.snapshotCallback = snapshotCallback;\r\n        this.cancelCallback = cancelCallback;\r\n    }\r\n    onValue(expDataSnapshot, previousChildName) {\r\n        this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\r\n    }\r\n    onCancel(error) {\r\n        assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\r\n        return this.cancelCallback.call(null, error);\r\n    }\r\n    get hasCancelCallback() {\r\n        return !!this.cancelCallback;\r\n    }\r\n    matches(other) {\r\n        return (this.snapshotCallback === other.snapshotCallback ||\r\n            (this.snapshotCallback.userCallback !== undefined &&\r\n                this.snapshotCallback.userCallback ===\r\n                    other.snapshotCallback.userCallback &&\r\n                this.snapshotCallback.context === other.snapshotCallback.context));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The `onDisconnect` class allows you to write or clear data when your client\r\n * disconnects from the Database server. These updates occur whether your\r\n * client disconnects cleanly or not, so you can rely on them to clean up data\r\n * even if a connection is dropped or a client crashes.\r\n *\r\n * The `onDisconnect` class is most commonly used to manage presence in\r\n * applications where it is useful to detect how many clients are connected and\r\n * when other clients disconnect. See\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information.\r\n *\r\n * To avoid problems when a connection is dropped before the requests can be\r\n * transferred to the Database server, these functions should be called before\r\n * writing any data.\r\n *\r\n * Note that `onDisconnect` operations are only triggered once. If you want an\r\n * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n * the `onDisconnect` operations each time you reconnect.\r\n */\r\nclass OnDisconnect {\r\n    /** @hideconstructor */\r\n    constructor(_repo, _path) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n    }\r\n    /**\r\n     * Cancels all previously queued `onDisconnect()` set or update events for this\r\n     * location and all children.\r\n     *\r\n     * If a write has been queued for this location via a `set()` or `update()` at a\r\n     * parent location, the write at this location will be canceled, though writes\r\n     * to sibling locations will still occur.\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    cancel() {\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is deleted when the client is disconnected\r\n     * (due to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    remove() {\r\n        validateWritablePath('OnDisconnect.remove', this._path);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value when the\r\n     * client is disconnected (due to closing the browser, navigating to a new page,\r\n     * or network issues).\r\n     *\r\n     * `set()` is especially useful for implementing \"presence\" systems, where a\r\n     * value should be changed or cleared when a user disconnects so that they\r\n     * appear \"offline\" to other users. See\r\n     * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n     * for more information.\r\n     *\r\n     * Note that `onDisconnect` operations are only triggered once. If you want an\r\n     * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n     * the `onDisconnect` operations each time.\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    set(value) {\r\n        validateWritablePath('OnDisconnect.set', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value and priority\r\n     * when the client is disconnected (due to closing the browser, navigating to a\r\n     * new page, or network issues).\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @param priority - The priority to be written (string, number, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    setWithPriority(value, priority) {\r\n        validateWritablePath('OnDisconnect.setWithPriority', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\r\n        validatePriority('OnDisconnect.setWithPriority', priority, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Writes multiple values at this location when the client is disconnected (due\r\n     * to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * The `values` argument contains multiple property-value pairs that will be\r\n     * written to the Database together. Each child property can either be a simple\r\n     * property (for example, \"name\") or a relative path (for example, \"name/first\")\r\n     * from the current location to the data to update.\r\n     *\r\n     * As opposed to the `set()` method, `update()` can be use to selectively update\r\n     * only the referenced properties at the current location (instead of replacing\r\n     * all the child properties at the current location).\r\n     *\r\n     * @param values - Object containing multiple values.\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    update(values) {\r\n        validateWritablePath('OnDisconnect.update', this._path);\r\n        validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nclass QueryImpl {\r\n    /**\r\n     * @hideconstructor\r\n     */\r\n    constructor(_repo, _path, _queryParams, _orderByCalled) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n        this._queryParams = _queryParams;\r\n        this._orderByCalled = _orderByCalled;\r\n    }\r\n    get key() {\r\n        if (pathIsEmpty(this._path)) {\r\n            return null;\r\n        }\r\n        else {\r\n            return pathGetBack(this._path);\r\n        }\r\n    }\r\n    get ref() {\r\n        return new ReferenceImpl(this._repo, this._path);\r\n    }\r\n    get _queryIdentifier() {\r\n        const obj = queryParamsGetQueryObject(this._queryParams);\r\n        const id = ObjectToUniqueKey(obj);\r\n        return id === '{}' ? 'default' : id;\r\n    }\r\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     */\r\n    get _queryObject() {\r\n        return queryParamsGetQueryObject(this._queryParams);\r\n    }\r\n    isEqual(other) {\r\n        other = getModularInstance(other);\r\n        if (!(other instanceof QueryImpl)) {\r\n            return false;\r\n        }\r\n        const sameRepo = this._repo === other._repo;\r\n        const samePath = pathEquals(this._path, other._path);\r\n        const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\r\n        return sameRepo && samePath && sameQueryIdentifier;\r\n    }\r\n    toJSON() {\r\n        return this.toString();\r\n    }\r\n    toString() {\r\n        return this._repo.toString() + pathToUrlEncodedString(this._path);\r\n    }\r\n}\r\n/**\r\n * Validates that no other order by call has been made\r\n */\r\nfunction validateNoPreviousOrderByCall(query, fnName) {\r\n    if (query._orderByCalled === true) {\r\n        throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\r\n    }\r\n}\r\n/**\r\n * Validates start/end values for queries.\r\n */\r\nfunction validateQueryEndpoints(params) {\r\n    let startNode = null;\r\n    let endNode = null;\r\n    if (params.hasStart()) {\r\n        startNode = params.getIndexStartValue();\r\n    }\r\n    if (params.hasEnd()) {\r\n        endNode = params.getIndexEndValue();\r\n    }\r\n    if (params.getIndex() === KEY_INDEX) {\r\n        const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\r\n            'startAt(), endAt(), or equalTo().';\r\n        const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\r\n            'endAt(), endBefore(), or equalTo() must be a string.';\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            if (startName !== MIN_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof startNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            if (endName !== MAX_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof endNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n    }\r\n    else if (params.getIndex() === PRIORITY_INDEX) {\r\n        if ((startNode != null && !isValidPriority(startNode)) ||\r\n            (endNode != null && !isValidPriority(endNode))) {\r\n            throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\r\n                'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\r\n                '(null, a number, or a string).');\r\n        }\r\n    }\r\n    else {\r\n        assert(params.getIndex() instanceof PathIndex ||\r\n            params.getIndex() === VALUE_INDEX, 'unknown index type.');\r\n        if ((startNode != null && typeof startNode === 'object') ||\r\n            (endNode != null && typeof endNode === 'object')) {\r\n            throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\r\n                'equalTo() cannot be an object.');\r\n        }\r\n    }\r\n}\r\n/**\r\n * Validates that limit* has been called with the correct combination of parameters\r\n */\r\nfunction validateLimit(params) {\r\n    if (params.hasStart() &&\r\n        params.hasEnd() &&\r\n        params.hasLimit() &&\r\n        !params.hasAnchoredLimit()) {\r\n        throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\r\n            'limitToFirst() or limitToLast() instead.');\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass ReferenceImpl extends QueryImpl {\r\n    /** @hideconstructor */\r\n    constructor(repo, path) {\r\n        super(repo, path, new QueryParams(), false);\r\n    }\r\n    get parent() {\r\n        const parentPath = pathParent(this._path);\r\n        return parentPath === null\r\n            ? null\r\n            : new ReferenceImpl(this._repo, parentPath);\r\n    }\r\n    get root() {\r\n        let ref = this;\r\n        while (ref.parent !== null) {\r\n            ref = ref.parent;\r\n        }\r\n        return ref;\r\n    }\r\n}\r\n/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */\r\nclass DataSnapshot {\r\n    /**\r\n     * @param _node - A SnapshotNode to wrap.\r\n     * @param ref - The location this snapshot came from.\r\n     * @param _index - The iteration order for this snapshot\r\n     * @hideconstructor\r\n     */\r\n    constructor(_node, \r\n    /**\r\n     * The location of this DataSnapshot.\r\n     */\r\n    ref, _index) {\r\n        this._node = _node;\r\n        this.ref = ref;\r\n        this._index = _index;\r\n    }\r\n    /**\r\n     * Gets the priority value of the data in this `DataSnapshot`.\r\n     *\r\n     * Applications need not use priority but can order collections by\r\n     * ordinary properties (see\r\n     * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n     * ).\r\n     */\r\n    get priority() {\r\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\r\n        return this._node.getPriority().val();\r\n    }\r\n    /**\r\n     * The key (last part of the path) of the location of this `DataSnapshot`.\r\n     *\r\n     * The last token in a Database location is considered its key. For example,\r\n     * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n     * `DataSnapshot` will return the key for the location that generated it.\r\n     * However, accessing the key on the root URL of a Database will return\r\n     * `null`.\r\n     */\r\n    get key() {\r\n        return this.ref.key;\r\n    }\r\n    /** Returns the number of child properties of this `DataSnapshot`. */\r\n    get size() {\r\n        return this._node.numChildren();\r\n    }\r\n    /**\r\n     * Gets another `DataSnapshot` for the location at the specified relative path.\r\n     *\r\n     * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n     * another `DataSnapshot` for the location at the specified relative path. The\r\n     * relative path can either be a simple child name (for example, \"ada\") or a\r\n     * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n     * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n     * whose value is `null`) is returned.\r\n     *\r\n     * @param path - A relative path to the location of child data.\r\n     */\r\n    child(path) {\r\n        const childPath = new Path(path);\r\n        const childRef = child(this.ref, path);\r\n        return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\r\n    }\r\n    /**\r\n     * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n     * efficient than using `snapshot.val() !== null`.\r\n     */\r\n    exists() {\r\n        return !this._node.isEmpty();\r\n    }\r\n    /**\r\n     * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n     *\r\n     * The `exportVal()` method is similar to `val()`, except priority information\r\n     * is included (if available), making it suitable for backing up your data.\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    exportVal() {\r\n        return this._node.val(true);\r\n    }\r\n    /**\r\n     * Enumerates the top-level children in the `DataSnapshot`.\r\n     *\r\n     * Because of the way JavaScript objects work, the ordering of data in the\r\n     * JavaScript object returned by `val()` is not guaranteed to match the\r\n     * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n     * where `forEach()` comes in handy. It guarantees the children of a\r\n     * `DataSnapshot` will be iterated in their query order.\r\n     *\r\n     * If no explicit `orderBy*()` method is used, results are returned\r\n     * ordered by key (unless priorities are used, in which case, results are\r\n     * returned by priority).\r\n     *\r\n     * @param action - A function that will be called for each child DataSnapshot.\r\n     * The callback can return true to cancel further enumeration.\r\n     * @returns true if enumeration was canceled due to your callback returning\r\n     * true.\r\n     */\r\n    forEach(action) {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        const childrenNode = this._node;\r\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\r\n        return !!childrenNode.forEachChild(this._index, (key, node) => {\r\n            return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\r\n        });\r\n    }\r\n    /**\r\n     * Returns true if the specified child path has (non-null) data.\r\n     *\r\n     * @param path - A relative path to the location of a potential child.\r\n     * @returns `true` if data exists at the specified child path; else\r\n     *  `false`.\r\n     */\r\n    hasChild(path) {\r\n        const childPath = new Path(path);\r\n        return !this._node.getChild(childPath).isEmpty();\r\n    }\r\n    /**\r\n     * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n     * properties.\r\n     *\r\n     * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n     * children. If it does, you can enumerate them using `forEach()`. If it\r\n     * doesn't, then either this snapshot contains a primitive value (which can be\r\n     * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n     * `null`).\r\n     *\r\n     * @returns true if this snapshot has any children; else false.\r\n     */\r\n    hasChildren() {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return !this._node.isEmpty();\r\n        }\r\n    }\r\n    /**\r\n     * Returns a JSON-serializable representation of this object.\r\n     */\r\n    toJSON() {\r\n        return this.exportVal();\r\n    }\r\n    /**\r\n     * Extracts a JavaScript value from a `DataSnapshot`.\r\n     *\r\n     * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n     * scalar type (string, number, or boolean), an array, or an object. It may\r\n     * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n     * data).\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    val() {\r\n        return this._node.val();\r\n    }\r\n}\r\n/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */\r\nfunction ref(db, path) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('ref');\r\n    return path !== undefined ? child(db._root, path) : db._root;\r\n}\r\n/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */\r\nfunction refFromURL(db, url) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('refFromURL');\r\n    const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\r\n    validateUrl('refFromURL', parsedURL);\r\n    const repoInfo = parsedURL.repoInfo;\r\n    if (!db._repo.repoInfo_.isCustomHost() &&\r\n        repoInfo.host !== db._repo.repoInfo_.host) {\r\n        fatal('refFromURL' +\r\n            ': Host name does not match the current database: ' +\r\n            '(found ' +\r\n            repoInfo.host +\r\n            ' but expected ' +\r\n            db._repo.repoInfo_.host +\r\n            ')');\r\n    }\r\n    return ref(db, parsedURL.path.toString());\r\n}\r\n/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */\r\nfunction child(parent, path) {\r\n    parent = getModularInstance(parent);\r\n    if (pathGetFront(parent._path) === null) {\r\n        validateRootPathString('child', 'path', path, false);\r\n    }\r\n    else {\r\n        validatePathString('child', 'path', path, false);\r\n    }\r\n    return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\r\n}\r\n/**\r\n * Returns an `OnDisconnect` object - see\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information on how to use it.\r\n *\r\n * @param ref - The reference to add OnDisconnect triggers for.\r\n */\r\nfunction onDisconnect(ref) {\r\n    ref = getModularInstance(ref);\r\n    return new OnDisconnect(ref._repo, ref._path);\r\n}\r\n/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\r\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */\r\nfunction push(parent, value) {\r\n    parent = getModularInstance(parent);\r\n    validateWritablePath('push', parent._path);\r\n    validateFirebaseDataArg('push', value, parent._path, true);\r\n    const now = repoServerTime(parent._repo);\r\n    const name = nextPushId(now);\r\n    // push() returns a ThennableReference whose promise is fulfilled with a\r\n    // regular Reference. We use child() to create handles to two different\r\n    // references. The first is turned into a ThennableReference below by adding\r\n    // then() and catch() methods and is used as the return value of push(). The\r\n    // second remains a regular Reference and is used as the fulfilled value of\r\n    // the first ThennableReference.\r\n    const thennablePushRef = child(parent, name);\r\n    const pushRef = child(parent, name);\r\n    let promise;\r\n    if (value != null) {\r\n        promise = set(pushRef, value).then(() => pushRef);\r\n    }\r\n    else {\r\n        promise = Promise.resolve(pushRef);\r\n    }\r\n    thennablePushRef.then = promise.then.bind(promise);\r\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\r\n    return thennablePushRef;\r\n}\r\n/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */\r\nfunction remove(ref) {\r\n    validateWritablePath('remove', ref._path);\r\n    return set(ref, null);\r\n}\r\n/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction set(ref, value) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('set', ref._path);\r\n    validateFirebaseDataArg('set', value, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, \r\n    /*priority=*/ null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setPriority(ref, priority) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('setPriority', ref._path);\r\n    validatePriority('setPriority', priority, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setWithPriority(ref, value, priority) {\r\n    validateWritablePath('setWithPriority', ref._path);\r\n    validateFirebaseDataArg('setWithPriority', value, ref._path, false);\r\n    validatePriority('setWithPriority', priority, false);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\r\n    }\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */\r\nfunction update(ref, values) {\r\n    validateFirebaseMergeDataArg('update', values, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */\r\nfunction get(query) {\r\n    query = getModularInstance(query);\r\n    return repoGetValue(query._repo, query).then(node => {\r\n        return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\r\n    });\r\n}\r\n/**\r\n * Represents registration for 'value' events.\r\n */\r\nclass ValueEventRegistration {\r\n    constructor(callbackContext) {\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        return eventType === 'value';\r\n    }\r\n    createEvent(change, query) {\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, null);\r\n        }\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (!(other instanceof ValueEventRegistration)) {\r\n            return false;\r\n        }\r\n        else if (!other.callbackContext || !this.callbackContext) {\r\n            // If no callback specified, we consider it to match any callback.\r\n            return true;\r\n        }\r\n        else {\r\n            return other.callbackContext.matches(this.callbackContext);\r\n        }\r\n    }\r\n    hasAnyCallback() {\r\n        return this.callbackContext !== null;\r\n    }\r\n}\r\n/**\r\n * Represents the registration of a child_x event.\r\n */\r\nclass ChildEventRegistration {\r\n    constructor(eventType, callbackContext) {\r\n        this.eventType = eventType;\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\r\n        eventToCheck =\r\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\r\n        return this.eventType === eventToCheck;\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    createEvent(change, query) {\r\n        assert(change.childName != null, 'Child events should have a childName.');\r\n        const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (other instanceof ChildEventRegistration) {\r\n            return (this.eventType === other.eventType &&\r\n                (!this.callbackContext ||\r\n                    !other.callbackContext ||\r\n                    this.callbackContext.matches(other.callbackContext)));\r\n        }\r\n        return false;\r\n    }\r\n    hasAnyCallback() {\r\n        return !!this.callbackContext;\r\n    }\r\n}\r\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\r\n    let cancelCallback;\r\n    if (typeof cancelCallbackOrListenOptions === 'object') {\r\n        cancelCallback = undefined;\r\n        options = cancelCallbackOrListenOptions;\r\n    }\r\n    if (typeof cancelCallbackOrListenOptions === 'function') {\r\n        cancelCallback = cancelCallbackOrListenOptions;\r\n    }\r\n    if (options && options.onlyOnce) {\r\n        const userCallback = callback;\r\n        const onceCallback = (dataSnapshot, previousChildName) => {\r\n            repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n            userCallback(dataSnapshot, previousChildName);\r\n        };\r\n        onceCallback.userCallback = callback.userCallback;\r\n        onceCallback.context = callback.context;\r\n        callback = onceCallback;\r\n    }\r\n    const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\r\n    const container = eventType === 'value'\r\n        ? new ValueEventRegistration(callbackContext)\r\n        : new ChildEventRegistration(eventType, callbackContext);\r\n    repoAddEventCallbackForQuery(query._repo, query, container);\r\n    return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\n/**\r\n * Detaches a callback previously attached with `on()`.\r\n *\r\n * Detach a callback previously attached with `on()`. Note that if `on()` was\r\n * called multiple times with the same eventType and callback, the callback\r\n * will be called multiple times for each event, and `off()` must be called\r\n * multiple times to remove the callback. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */\r\nfunction off(query, eventType, callback) {\r\n    let container = null;\r\n    const expCallback = callback ? new CallbackContext(callback) : null;\r\n    if (eventType === 'value') {\r\n        container = new ValueEventRegistration(expCallback);\r\n    }\r\n    else if (eventType) {\r\n        container = new ChildEventRegistration(eventType, expCallback);\r\n    }\r\n    repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\r\nclass QueryConstraint {\r\n}\r\nclass QueryEndAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endAt', this._value, query._path, true);\r\n        const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endAt: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */\r\nfunction endAt(value, key) {\r\n    validateKey('endAt', 'key', key, true);\r\n    return new QueryEndAtConstraint(value, key);\r\n}\r\nclass QueryEndBeforeConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endBefore', this._value, query._path, false);\r\n        const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endBefore: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value lesss than or equal\r\n * to the specified value and a a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction endBefore(value, key) {\r\n    validateKey('endBefore', 'key', key, true);\r\n    return new QueryEndBeforeConstraint(value, key);\r\n}\r\nclass QueryStartAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAt', this._value, query._path, true);\r\n        const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAt: Starting point was already set (by another call to startAt, ' +\r\n                'startBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAt(value = null, key) {\r\n    validateKey('startAt', 'key', key, true);\r\n    return new QueryStartAtConstraint(value, key);\r\n}\r\nclass QueryStartAfterConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAfter', this._value, query._path, false);\r\n        const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAfter: Starting point was already set (by another call to startAt, ' +\r\n                'startAfter, or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAfter(value, key) {\r\n    validateKey('startAfter', 'key', key, true);\r\n    return new QueryStartAfterConstraint(value, key);\r\n}\r\nclass QueryLimitToFirstConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToFirst(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToFirst: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToFirstConstraint(limit);\r\n}\r\nclass QueryLimitToLastConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToLast(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToLast: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToLastConstraint(limit);\r\n}\r\nclass QueryOrderByChildConstraint extends QueryConstraint {\r\n    constructor(_path) {\r\n        super();\r\n        this._path = _path;\r\n    }\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByChild');\r\n        const parsedPath = new Path(this._path);\r\n        if (pathIsEmpty(parsedPath)) {\r\n            throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\r\n        }\r\n        const index = new PathIndex(parsedPath);\r\n        const newParams = queryParamsOrderBy(query._queryParams, index);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */\r\nfunction orderByChild(path) {\r\n    if (path === '$key') {\r\n        throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\r\n    }\r\n    else if (path === '$priority') {\r\n        throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\r\n    }\r\n    else if (path === '$value') {\r\n        throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\r\n    }\r\n    validatePathString('orderByChild', 'path', path, false);\r\n    return new QueryOrderByChildConstraint(path);\r\n}\r\nclass QueryOrderByKeyConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByKey');\r\n        const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByKey() {\r\n    return new QueryOrderByKeyConstraint();\r\n}\r\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByPriority');\r\n        const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */\r\nfunction orderByPriority() {\r\n    return new QueryOrderByPriorityConstraint();\r\n}\r\nclass QueryOrderByValueConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByValue');\r\n        const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByValue() {\r\n    return new QueryOrderByValueConstraint();\r\n}\r\nclass QueryEqualToValueConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('equalTo', this._value, query._path, false);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\r\n                'equalTo).');\r\n        }\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\r\n                'equalTo).');\r\n        }\r\n        return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction equalTo(value, key) {\r\n    validateKey('equalTo', 'key', key, true);\r\n    return new QueryEqualToValueConstraint(value, key);\r\n}\r\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\r\nfunction query(query, ...queryConstraints) {\r\n    let queryImpl = getModularInstance(query);\r\n    for (const constraint of queryConstraints) {\r\n        queryImpl = constraint._apply(queryImpl);\r\n    }\r\n    return queryImpl;\r\n}\r\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\r\nsyncPointSetReferenceConstructor(ReferenceImpl);\r\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This variable is also defined in the firebase Node.js Admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\r\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\r\n/**\r\n * Creates and caches `Repo` instances.\r\n */\r\nconst repos = {};\r\n/**\r\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\r\n */\r\nlet useRestClient = false;\r\n/**\r\n * Update an existing `Repo` in place to point to a new host/port.\r\n */\r\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\r\n    repo.repoInfo_ = new RepoInfo(`${host}:${port}`, \r\n    /* secure= */ false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams);\r\n    if (tokenProvider) {\r\n        repo.authTokenProvider_ = tokenProvider;\r\n    }\r\n}\r\n/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */\r\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\r\n    let dbUrl = url || app.options.databaseURL;\r\n    if (dbUrl === undefined) {\r\n        if (!app.options.projectId) {\r\n            fatal(\"Can't determine Firebase Database URL. Be sure to include \" +\r\n                ' a Project ID when calling firebase.initializeApp().');\r\n        }\r\n        log('Using default host for project ', app.options.projectId);\r\n        dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\r\n    }\r\n    let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n    let repoInfo = parsedUrl.repoInfo;\r\n    let isEmulator;\r\n    let dbEmulatorHost = undefined;\r\n    if (typeof process !== 'undefined') {\r\n        dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\r\n    }\r\n    if (dbEmulatorHost) {\r\n        isEmulator = true;\r\n        dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\r\n        parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n        repoInfo = parsedUrl.repoInfo;\r\n    }\r\n    else {\r\n        isEmulator = !parsedUrl.repoInfo.secure;\r\n    }\r\n    const authTokenProvider = nodeAdmin && isEmulator\r\n        ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\r\n        : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\r\n    validateUrl('Invalid Firebase Database URL', parsedUrl);\r\n    if (!pathIsEmpty(parsedUrl.path)) {\r\n        fatal('Database URL must point to the root of a Firebase Database ' +\r\n            '(not including a child path).');\r\n    }\r\n    const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\r\n    return new Database(repo, app);\r\n}\r\n/**\r\n * Remove the repo and make sure it is disconnected.\r\n *\r\n */\r\nfunction repoManagerDeleteRepo(repo, appName) {\r\n    const appRepos = repos[appName];\r\n    // This should never happen...\r\n    if (!appRepos || appRepos[repo.key] !== repo) {\r\n        fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\r\n    }\r\n    repoInterrupt(repo);\r\n    delete appRepos[repo.key];\r\n}\r\n/**\r\n * Ensures a repo doesn't already exist and then creates one using the\r\n * provided app.\r\n *\r\n * @param repoInfo - The metadata about the Repo\r\n * @returns The Repo object for the specified server / repoName.\r\n */\r\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\r\n    let appRepos = repos[app.name];\r\n    if (!appRepos) {\r\n        appRepos = {};\r\n        repos[app.name] = appRepos;\r\n    }\r\n    let repo = appRepos[repoInfo.toURLString()];\r\n    if (repo) {\r\n        fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\r\n    }\r\n    repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\r\n    appRepos[repoInfo.toURLString()] = repo;\r\n    return repo;\r\n}\r\n/**\r\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n */\r\nfunction repoManagerForceRestClient(forceRestClient) {\r\n    useRestClient = forceRestClient;\r\n}\r\n/**\r\n * Class representing a Firebase Realtime Database.\r\n */\r\nclass Database {\r\n    /** @hideconstructor */\r\n    constructor(_repoInternal, \r\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\r\n    app) {\r\n        this._repoInternal = _repoInternal;\r\n        this.app = app;\r\n        /** Represents a `Database` instance. */\r\n        this['type'] = 'database';\r\n        /** Track if the instance has been used (root or repo accessed) */\r\n        this._instanceStarted = false;\r\n    }\r\n    get _repo() {\r\n        if (!this._instanceStarted) {\r\n            repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\r\n            this._instanceStarted = true;\r\n        }\r\n        return this._repoInternal;\r\n    }\r\n    get _root() {\r\n        if (!this._rootInternal) {\r\n            this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\r\n        }\r\n        return this._rootInternal;\r\n    }\r\n    _delete() {\r\n        if (this._rootInternal !== null) {\r\n            repoManagerDeleteRepo(this._repo, this.app.name);\r\n            this._repoInternal = null;\r\n            this._rootInternal = null;\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    _checkNotDeleted(apiName) {\r\n        if (this._rootInternal === null) {\r\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns the instance of the Realtime Database SDK that is associated\r\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\r\n * with default settings if no instance exists or if the existing instance uses\r\n * a custom database URL.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\r\n * Database instance is associated with.\r\n * @param url - The URL of the Realtime Database instance to connect to. If not\r\n * provided, the SDK connects to the default instance of the Firebase App.\r\n * @returns The `Database` instance of the provided app.\r\n */\r\nfunction getDatabase(app = getApp(), url) {\r\n    return _getProvider(app, 'database').getImmediate({\r\n        identifier: url\r\n    });\r\n}\r\n/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */\r\nfunction connectDatabaseEmulator(db, host, port, options = {}) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('useEmulator');\r\n    if (db._instanceStarted) {\r\n        fatal('Cannot call useEmulator() after instance has already been initialized.');\r\n    }\r\n    const repo = db._repoInternal;\r\n    let tokenProvider = undefined;\r\n    if (repo.repoInfo_.nodeAdmin) {\r\n        if (options.mockUserToken) {\r\n            fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\r\n        }\r\n        tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\r\n    }\r\n    else if (options.mockUserToken) {\r\n        const token = typeof options.mockUserToken === 'string'\r\n            ? options.mockUserToken\r\n            : createMockUserToken(options.mockUserToken, db.app.options.projectId);\r\n        tokenProvider = new EmulatorTokenProvider(token);\r\n    }\r\n    // Modify the repo to apply emulator settings\r\n    repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\r\n}\r\n/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */\r\nfunction goOffline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOffline');\r\n    repoInterrupt(db._repo);\r\n}\r\n/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */\r\nfunction goOnline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOnline');\r\n    repoResume(db._repo);\r\n}\r\nfunction enableLogging(logger, persistent) {\r\n    enableLogging$1(logger, persistent);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerDatabase(variant) {\r\n    setSDKVersion(SDK_VERSION$1);\r\n    _registerComponent(new Component('database', (container, { instanceIdentifier: url }) => {\r\n        const app = container.getProvider('app').getImmediate();\r\n        const authProvider = container.getProvider('auth-internal');\r\n        const appCheckProvider = container.getProvider('app-check-internal');\r\n        return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\r\n    }, \"PUBLIC\" /* PUBLIC */).setMultipleInstances(true));\r\n    registerVersion(name, version, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst SERVER_TIMESTAMP = {\r\n    '.sv': 'timestamp'\r\n};\r\n/**\r\n * Returns a placeholder value for auto-populating the current timestamp (time\r\n * since the Unix epoch, in milliseconds) as determined by the Firebase\r\n * servers.\r\n */\r\nfunction serverTimestamp() {\r\n    return SERVER_TIMESTAMP;\r\n}\r\n/**\r\n * Returns a placeholder value that can be used to atomically increment the\r\n * current database value by the provided delta.\r\n *\r\n * @param delta - the amount to modify the current value atomically.\r\n * @returns A placeholder value for modifying data atomically server-side.\r\n */\r\nfunction increment(delta) {\r\n    return {\r\n        '.sv': {\r\n            'increment': delta\r\n        }\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A type for the resolve value of {@link runTransaction}.\r\n */\r\nclass TransactionResult {\r\n    /** @hideconstructor */\r\n    constructor(\r\n    /** Whether the transaction was successfully committed. */\r\n    committed, \r\n    /** The resulting data snapshot. */\r\n    snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    /** Returns a JSON-serializable representation of this object. */\r\n    toJSON() {\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    }\r\n}\r\n/**\r\n * Atomically modifies the data at this location.\r\n *\r\n * Atomically modify the data at this location. Unlike a normal `set()`, which\r\n * just overwrites the data regardless of its previous value, `runTransaction()` is\r\n * used to modify the existing value to a new value, ensuring there are no\r\n * conflicts with other clients writing to the same location at the same time.\r\n *\r\n * To accomplish this, you pass `runTransaction()` an update function which is\r\n * used to transform the current value into a new value. If another client\r\n * writes to the location before your new value is successfully written, your\r\n * update function will be called again with the new current value, and the\r\n * write will be retried. This will happen repeatedly until your write succeeds\r\n * without conflict or you abort the transaction by not returning a value from\r\n * your update function.\r\n *\r\n * Note: Modifying data with `set()` will cancel any pending transactions at\r\n * that location, so extreme care should be taken if mixing `set()` and\r\n * `runTransaction()` to update the same data.\r\n *\r\n * Note: When using transactions with Security and Firebase Rules in place, be\r\n * aware that a client needs `.read` access in addition to `.write` access in\r\n * order to perform a transaction. This is because the client-side nature of\r\n * transactions requires the client to read the data in order to transactionally\r\n * update it.\r\n *\r\n * @param ref - The location to atomically modify.\r\n * @param transactionUpdate - A developer-supplied function which will be passed\r\n * the current data stored at this location (as a JavaScript object). The\r\n * function should return the new value it would like written (as a JavaScript\r\n * object). If `undefined` is returned (i.e. you return with no arguments) the\r\n * transaction will be aborted and the data at this location will not be\r\n * modified.\r\n * @param options - An options object to configure transactions.\r\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\r\n * callback to handle success and failure.\r\n */\r\nfunction runTransaction(ref, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ntransactionUpdate, options) {\r\n    var _a;\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('Reference.transaction', ref._path);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw ('Reference.transaction failed: ' + ref.key + ' is a read-only object.');\r\n    }\r\n    const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\r\n    const deferred = new Deferred();\r\n    const promiseComplete = (error, committed, node) => {\r\n        let dataSnapshot = null;\r\n        if (error) {\r\n            deferred.reject(error);\r\n        }\r\n        else {\r\n            dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\r\n            deferred.resolve(new TransactionResult(committed, dataSnapshot));\r\n        }\r\n    };\r\n    // Add a watch to make sure we get server updates.\r\n    const unwatcher = onValue(ref, () => { });\r\n    repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\r\n    return deferred.promise;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nPersistentConnection;\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\r\n    this.sendRequest('q', { p: pathString }, onComplete);\r\n};\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.echo = function (data, onEcho) {\r\n    this.sendRequest('echo', { d: data }, onEcho);\r\n};\r\n// RealTimeConnection properties that we use in tests.\r\nConnection;\r\n/**\r\n * @internal\r\n */\r\nconst hijackHash = function (newHash) {\r\n    const oldPut = PersistentConnection.prototype.put;\r\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\r\n        if (hash !== undefined) {\r\n            hash = newHash();\r\n        }\r\n        oldPut.call(this, pathString, data, onComplete, hash);\r\n    };\r\n    return function () {\r\n        PersistentConnection.prototype.put = oldPut;\r\n    };\r\n};\r\nRepoInfo;\r\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n * @internal\r\n */\r\nconst forceRestClient = function (forceRestClient) {\r\n    repoManagerForceRestClient(forceRestClient);\r\n};\n\n/**\r\n * Firebase Realtime Database\r\n *\r\n * @packageDocumentation\r\n */\r\nregisterDatabase();\n\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, QueryParams as _QueryParams, ReferenceImpl as _ReferenceImpl, forceRestClient as _TEST_ACCESS_forceRestClient, hijackHash as _TEST_ACCESS_hijackHash, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, setSDKVersion as _setSDKVersion, validatePathString as _validatePathString, validateWritablePath as _validateWritablePath, child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };\n//# sourceMappingURL=index.esm2017.js.map\n","export const firebaseConfig = {\n  apiKey: \"AIzaSyA7S-jw_V79Tdjkjhvj9UCMnTivFtINRn4\",\n  authDomain: \"ozon-clone.firebaseapp.com\",\n  projectId: \"ozon-clone\",\n  storageBucket: \"ozon-clone.appspot.com\",\n  messagingSenderId: \"1030840050649\",\n  appId: \"1:1030840050649:web:32eace2c08cdc306d7efc8\",\n  measurementId: \"G-CQD6T3LJNN\"\n};\n","import { initializeApp } from 'firebase/app';\nimport { getDatabase } from \"firebase/database\";\nimport { firebaseConfig } from './firebaseConfig';\n\nconst app = initializeApp(firebaseConfig);\n\nexport const database = getDatabase(app);\n","import '@/style/style.scss';\nimport modalCart from \"@/modules/modalCart\";\nimport {getGoods} from \"@/lib/services\";\n\nmodalCart();\n\n// const data = getGoods();\n//\n// console.log(data);\n\ngetGoods();\n","import { database } from \"@/lib/firebase\";\nimport { ref, onValue} from \"firebase/database\";\n\nexport const getGoods = () => {\n  let data;\n\n  console.log(database);\n\n  const dbRef = ref(database, 'goods');\n  console.log(dbRef);\n\n  onValue(dbRef, (snapshot => {\n    console.log(snapshot)\n    data = snapshot.val();\n  }));\n\n  console.log(data);\n\n  // return data;\n};\n"],"names":["globalThis","this","Function","e","window","assertion","message","assertionError","Error","stringToByteArray$1","str","out","p","i","length","c","charCodeAt","base64","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","webSafe","Array","isArray","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","push","join","encodeString","btoa","decodeString","bytes","pos","c1","String","fromCharCode","c2","u","c3","byteArrayToString","decodeStringToByteArray","charToByteMap","charAt","byte4","base64Decode","console","error","deepCopy","value","deepExtend","undefined","target","source","Object","constructor","Date","getTime","prop","hasOwnProperty","reject","resolve","promise","Promise","wrapCallback","callback","catch","isMobileCordova","test","navigator","FirebaseError","code","customData","super","name","setPrototypeOf","prototype","captureStackTrace","ErrorFactory","create","service","serviceName","errors","data","fullCode","template","replace","PATTERN","_","key","replaceTemplate","fullMessage","jsonEval","JSON","parse","stringify","decode","token","header","claims","signature","parts","split","obj","call","map","fn","contextObj","res","deepEqual","a","b","aKeys","keys","bKeys","k","includes","aProp","bProp","isObject","thing","Sha1","chain_","buf_","W_","pad_","inbuf_","total_","blockSize","reset","compress_","buf","offset","W","t","f","d","update","lengthMinusBlock","n","inbuf","digest","totalBits","j","fnName","argName","stringLength","_delegate","Component","instanceFactory","type","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","setInstantiationMode","mode","setMultipleInstances","setServiceProps","props","setInstanceCreatedCallback","DEFAULT_ENTRY_NAME","Provider","container","component","instances","Map","instancesDeferred","instancesOptions","onInitCallbacks","get","identifier","normalizedIdentifier","normalizeInstanceIdentifier","has","deferred","set","isInitialized","shouldAutoInitialize","instance","getOrInitializeService","instanceIdentifier","getImmediate","options","_a","optional","getComponent","setComponent","isComponentEager","instanceDeferred","entries","clearInstance","delete","async","services","from","values","all","filter","INTERNAL","_delete","isComponentSet","getOptions","initialize","opts","onInit","existingCallbacks","Set","add","existingInstance","invokeOnInitCallbacks","callbacks","ComponentContainer","providers","addComponent","provider","getProvider","addOrOverwriteComponent","getProviders","LogLevel","levelStringToEnum","DEBUG","VERBOSE","INFO","WARN","ERROR","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","logType","args","logLevel","now","toISOString","method","Logger","_logLevel","_logHandler","_userLogHandler","val","TypeError","setLogLevel","logHandler","userLogHandler","debug","log","info","warn","PlatformLoggerServiceImpl","getPlatformInfoString","isVersionServiceProvider","library","version","logString","name$o","version$1","logger","PLATFORM_LOG_STRING","_apps","_components","_addComponent","app","_registerComponent","componentName","ERROR_FACTORY","FirebaseAppImpl","config","_isDeleted","_options","assign","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","checkDestroyed","isDeleted","appName","registerVersion","libraryKeyOrName","variant","libraryMismatch","match","versionMismatch","warning","DOMStorageWrapper","domStorage_","prefix_","removeItem","prefixedName_","setItem","storedVal","getItem","remove","toString","MemoryStorage","cache_","isInMemoryStorage","createStoragefor","domStorageName","domStorage","PersistentStorage","SessionStorage","logClient","LUIDGenerator","id","sha1","utf8Bytes","high","stringToByteArray","sha1Bytes","buildLogMessage_","varArgs","arg","apply","firstLog_","logger_","persistent","bind","logWrapper","prefix","fatal","isInvalidJSONNumber","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","ObjectToUniqueKey","sort","splitStringBySize","segsize","len","dataSegs","substring","each","doubleToIEEE754String","v","s","ln","Math","abs","pow","min","floor","LN2","round","bits","reverse","hexByteString","hexByte","parseInt","substr","toLowerCase","INTEGER_REGEXP_","RegExp","intVal","exceptionGuard","setTimeout","stack","setTimeoutNonBlocking","time","timeout","AppCheckTokenProvider","appName_","appCheckProvider","appCheck","then","getToken","forceRefresh","addTokenChangeListener","listener","addTokenListener","notifyForInvalidToken","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","auth","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","OWNER","FORGE_DOMAIN_RE","WEBSOCKET","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","_host","_domain","indexOf","internalHost","isCacheableHost","isCustomHost","newHost","toURLString","protocol","query","repoInfoConnectionURL","repoInfo","params","connURL","repoInfoNeedsQueryParam","pairs","StatsCollection","counters_","incrementCounter","amount","collections","reporters","statsManagerGetCollection","hashString","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","toProcess","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","open","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","document","readyState","called","wrappedFn","body","addEventListener","attachEvent","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","pN","urlParams","random","uniqueCallbackIdentifier","location","hostname","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","static","forceAllow_","forceDisallow_","createElement","href","Windows","UI","markConnectionHealthy","shutdown_","close","myDisconnFrame","removeChild","send","dataStr","base64data","base64Encode","MAX_URL_DATA_SIZE","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","pendingSegs","currentSerial","myIFrame","createIFrame_","script","domain","iframeContents","doc","write","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","newRequest_","size","theURL","curDataString","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","doNewRequest","keepaliveTimeout","loadCB","newScript","onload","onreadystatechange","rstate","parentNode","onerror","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","headers","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","userAgent","oldAndroidRegex","oldAndroidMatch","parseFloat","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","ALL_TRANSPORTS","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports","transport","initialTransport","upgradeTransport","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","reason","ServerActions","put","pathString","onComplete","hash","merge","refreshAuthToken","refreshAppCheckToken","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","reportStats","stats","EventEmitter","allowedEvents_","listeners_","trigger","eventType","listeners","context","on","validateEventType_","eventData","getInitialEvent","off","splice","find","et","OnlineMonitor","online_","currentlyOnline","Path","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathSlice","begin","slice","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathEquals","other","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","validationPathCheckValid","validationPath","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","getInstance","onVisible_","onOnline_","action","onResponse","curReqNum","r","initConnection_","request","_path","q","_queryObject","outstandingGet","index","sendGet_","listen","currentHashFn","tag","queryId","_queryIdentifier","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","removeListen_","warnings","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isAdmin","tryAppCheck","authMethod","isValidFormat","requestData","cred","onAuthRevoked_","onAppCheckRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","sendPut_","queued","result","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","handleTimestamp_","sendConnectStats_","restoreState_","scheduleConnect_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","interrupt","resume","delta","serverTimeOffset","normalizedPathString","statusCode","explanation","queries","clientName","NamedNode","node","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__EMPTY_NODE","KeyIndex","isDefinedOn","maxPost","makePost","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","cmp","isEmpty","left","right","getNext","pop","hasNext","peek","LLRBNode","color","RED","SortedMap","EMPTY_NODE","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE$2","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","nodeFromJSON$1","MAX_NODE$1","LeafNode","value_","priorityNode_","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","PRIORITY_INDEX","aPriority","bPriority","indexCmp","LOG_2","Base12Num","num","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","namedNode","middle","root","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","buildFrom12Array","_defaultIndexMap","fallbackObject","IndexMap","indexes_","indexSet_","Default","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","Wrap","newIndex","next","indexName","newIndexSet","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","ChildrenNode","children_","indexMap_","child","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","MAX_NODE","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","nodeFromJSON","json","childData","children","childrenHavePriority","childSet","sortedChildSet","defineProperties","MAX","setNodeFromJSON","PathIndex","indexPath_","extractChild","snap","aChild","bChild","valueNode","VALUE_INDEX","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","IndexedFilter","index_","newChild","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","matches","filtered","self","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","fullLimitUpdateChild_","inRange","indexCompare","foundStartPost","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","oldChildSnap","nextChild","getChildAfterChild","compareNext","newEventCache","QueryParams","limitSet_","startSet_","startNameSet_","startAfterSet_","endSet_","endNameSet_","endBeforeSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","hasStartAfter","hasEndBefore","hasLimit","hasAnchoredLimit","queryParamsToRestQueryStringParameters","queryParams","qs","orderBy","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listens_","listenId","getListenId_","thisListen","queryStringParameters","restRequest_","querystringParams","forEach","arrayVal","encodeURIComponent","querystring","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","getNode","updateSnapshot","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","sparseSnapshotTreeForEachTree","prefixPath","func","tree","sparseSnapshotTreeForEachChild","StatsListener","collection_","last_","newStats","stat","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","reportedStats","haveStatsToReport","OperationType","newOperationSourceServerTaggedQuery","fromUser","fromServer","tagged","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","subtree","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForType","eventGenerator","events","changes","registrations","eventCache","filteredChanges","change","aWrapped","bWrapped","eventGeneratorCompareChanges","materializedChange","prevName","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","complete","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","ImmutableTree","EmptyChildren","childPath","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","findRootMostValueAndPath","toSet","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","CompoundWrite","writeTree_","compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","empty","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeRecordContainsPath_","writeRecord","writeTreeDefaultFilter_","writeTreeLayerTree_","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","visibleWrites","writeId","allWrites","subMerge","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeShadowingWrite","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeCalcCompleteChild","writeTreeRefChild","ChildChangeAccumulator","changeMap","oldChange","oldType","getChanges","NO_COMPLETE_CHILD_SOURCE","getCompleteChild","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","completeServerData","nodes","toIterate","writeTreeCalcIndexedSlice","writeTreeRefCalcIndexedSlice","viewProcessorGenerateEventCacheAfterServerEvent","viewProcessor","changePath","writesCache","accumulator","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","viewProcessorApplyServerOverwrite","oldViewCache","changedSnap","completeCache","filterServerNode","oldServerSnap","newServerCache","serverFilter","newServerNode","viewProcessorApplyUserOverwrite","viewProcessorCacheHasChild","viewProcessorApplyMerge","viewProcessorApplyServerMerge","changedChildren","viewMergeTree","curViewCache","childMergeTree","isUnknownDeepMerge","View","initialViewCache","eventRegistrations_","indexFilter","processor_","newViewProcessor","initialServerCache","initialEventCache","eventGenerator_","viewGetCompleteServerCache","view","cache","viewIsEmpty","viewRemoveEventRegistration","eventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","concat","viewApplyOperation","operation","overwrite","viewProcessorApplyUserMerge","ackUserWrite","serverChildren","viewProcessorRevertUserWrite","ackPath","mergePath","serverCachePath","viewProcessorAckUserWrite","oldServerNode","viewProcessorListenComplete","isLeafOrEmpty","oldCompleteSnap","viewProcessorMaybeAddValueEvent","viewProcessorApplyOperation","viewGenerateEventsForChanges_","eventRegistrations","moves","eventGeneratorGenerateEventsForChanges","referenceConstructor$1","referenceConstructor","SyncPoint","views","syncPointApplyOperation","syncPoint","optCompleteServerCache","syncPointAddEventRegistration","serverCacheComplete","eventCacheComplete","syncPointGetView","viewAddEventRegistration","initialChanges","viewGetInitialEvents","syncPointGetQueryViews","syncPointGetCompleteServerCache","syncPointViewForQuery","syncPointGetCompleteView","syncPointViewExistsForQuery","syncPointHasCompleteView","syncTreeNextQueryTag_","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","lastWriteId","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","writeTreeAddOverwrite","syncTreeApplyOperationToSyncPoints_","syncTreeAckUserWrite","record","writeTreeGetWrite","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeResetTree_","writeTreeRemoveWrite","syncTreeApplyServerOverwrite","syncTreeRemoveEventRegistration","maybeSyncPoint","removedAndEvents","removed","hadCompleteView","viewQueryId","_repo","syncPointRemoveEventRegistration","removingDefault","covered","parentSyncPoint","newViews","maybeChildSyncPoint","childMap","_key","childViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery_","defaultTag","stopListening","queryToRemove","tagToRemove","syncTreeMakeQueryKey_","removedQuery","removedQueryKey","removedQueryTag","syncTreeRemoveTags_","syncTreeAddEventRegistration","foundAncestorDefaultView","pathToSyncPoint","sp","childSyncPoint","viewAlreadyExists","queryKey","queriesToStop","childQueries","queryToStop","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","viewGetServerCache","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","syncTreeApplyTaggedOperation_","syncTreeApplyTaggedListenComplete","syncTreeApplyListenComplete","toUpperCase","errorForServerCode","splitIndex","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","op","unused","existingNode","resolveDeferredValueSnapshot","resolveDeferredValue","rawPri","leafNode","childrenNode","Tree","parent","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeGetPath","childEmpty","treeIsEmpty","childExists","treeUpdateChild","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidPathString","validateFirebaseData","errorPrefix","hasDotValue","hasActualChild","validationPathPush","last","validationPathPop","validatePathString","argumentName","EventQueue","eventLists_","recursionDepth_","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventQueueRaiseEventsAtPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventQueueRaiseEventsForChangedPath","changedPath","sentAll","eventList","eventListRaise","eventFn","getEventRunner","Repo","forceRestClient_","appCheckProvider_","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","repoStart","repo","appId","authOverride","search","isMerge","repoOnDataUpdate","repoOnConnectStatus","connectStatus","repoUpdateInfo","repoOnServerInfoUpdate","statsReporter_","creatorFunction","statsManagerGetOrCreateReporter","infoData_","infoSyncTree_","infoEvents","serverSyncTree_","repoServerTime","repoGenerateServerValues","taggedChildren","raw","changeTree","fromObject","syncTreeApplyTaggedQueryMerge","taggedSnap","syncTreeApplyTaggedQueryOverwrite","syncTreeApplyServerMerge","repoRerunTransactions","repoLog","resolvedOnDisconnectTree","resolved","resolveDeferredValueTree","repoGetAncestorTransactionNode","transactionNode","treeForEachAncestor","repoAbortTransactionsOnNode","repoAbortTransactions","repoRunOnDisconnectEvents","repoGetNextWriteId","repoRemoveEventCallbackForQuery","repoGetLatestState","excludeSets","repoSendReadyTransactions","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","every","transaction","setsToIgnore","txn","currentWriteId","latestState","snapToSend","latestHash","retryCount","currentOutputSnapshotRaw","dataToSend","pathToSend","currentOutputSnapshotResolved","unwatcher","abortReason","repoSendTransactionQueue","rootMostTransactionNode","abortTransaction","currentNode","currentInputSnapshot","newDataNode","oldWriteId","newNodeResolved","applyLocally","repoRerunTransactionQueue","transactionQueue","repoAggregateTransactionQueuesForNode","order","nodeQueue","to","lastSent","parseRepoInfo","dataURL","parsedUrl","parseDatabaseURL","scheme","subdomain","port","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","decodePath","queryString","results","segment","kv","decodeQuery","hostWithoutPort","dotInd","DataEvent","snapshot","ref","getEventType","exportVal","CancelEvent","CallbackContext","snapshotCallback","cancelCallback","onValue","expDataSnapshot","previousChildName","onCancel","hasCancelCallback","userCallback","QueryImpl","_orderByCalled","ReferenceImpl","isEqual","sameRepo","samePath","sameQueryIdentifier","toJSON","pathToUrlEncodedString","parentPath","DataSnapshot","_node","_index","childRef","exists","hasChildren","ValueEventRegistration","callbackContext","ChildEventRegistration","eventToCheck","cancelCallbackOrListenOptions","onlyOnce","onceCallback","dataSnapshot","repoAddEventCallbackForQuery","syncPointSetReferenceConstructor","syncTreeSetReferenceConstructor","repos","repoManagerDatabaseFromApp","authProvider","dbUrl","databaseURL","projectId","isEmulator","dbEmulatorHost","process","env","authTokenProvider","isValidRootPathString","validateUrl","appRepos","repoManagerCreateRepo","Database","_repoInternal","_instanceStarted","_root","_rootInternal","repoInterrupt","repoManagerDeleteRepo","_checkNotDeleted","apiName","simpleListen","echo","onEcho","registerDatabase","database","getApp","_getProvider","getDatabase","rawConfig","existingApp","newApp","initializeApp","apiKey","authDomain","storageBucket","messagingSenderId","measurementId","cartBtn","getElementById","cartModal","querySelector","classList","contains","modalCart","dbRef","db","getGoods"],"sourceRoot":""}